
kernel8.elf:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000080000 <_start>:
   80000:	d5384240 	mrs	x0, currentel
   80004:	f100101f 	cmp	x0, #0x4
   80008:	54000380 	b.eq	80078 <_start+0x78>  // b.none
   8000c:	58000420 	ldr	x0, 80090 <_start+0x90>
   80010:	d51c4100 	msr	sp_el1, x0
   80014:	58000420 	ldr	x0, 80098 <_start+0x98>
   80018:	d51cc000 	msr	vbar_el2, x0
   8001c:	d53ce100 	mrs	x0, cnthctl_el2
   80020:	b2400400 	orr	x0, x0, #0x3
   80024:	d51ce100 	msr	cnthctl_el2, x0
   80028:	d51ce07f 	msr	cntvoff_el2, xzr
   8002c:	d5380000 	mrs	x0, midr_el1
   80030:	d53800a1 	mrs	x1, mpidr_el1
   80034:	d51c0000 	msr	vpidr_el2, x0
   80038:	d51c00a1 	msr	vmpidr_el2, x1
   8003c:	d2867fe0 	mov	x0, #0x33ff                	// #13311
   80040:	d51c1140 	msr	cptr_el2, x0
   80044:	d51c117f 	msr	hstr_el2, xzr
   80048:	d2a00600 	mov	x0, #0x300000              	// #3145728
   8004c:	d5181040 	msr	cpacr_el1, x0
   80050:	d2b00000 	mov	x0, #0x80000000            	// #2147483648
   80054:	d51c1100 	msr	hcr_el2, x0
   80058:	d2810000 	mov	x0, #0x800                 	// #2048
   8005c:	f2a61a00 	movk	x0, #0x30d0, lsl #16
   80060:	d5181000 	msr	sctlr_el1, x0
   80064:	d2807880 	mov	x0, #0x3c4                 	// #964
   80068:	d51c4000 	msr	spsr_el2, x0
   8006c:	10000060 	adr	x0, 80078 <_start+0x78>
   80070:	d51c4020 	msr	elr_el2, x0
   80074:	d69f03e0 	eret
   80078:	58000140 	ldr	x0, 800a0 <_start+0xa0>
   8007c:	9100001f 	mov	sp, x0
   80080:	580000c0 	ldr	x0, 80098 <_start+0x98>
   80084:	d518c000 	msr	vbar_el1, x0
   80088:	1400162a 	b	85930 <sysinit>
   8008c:	00000000 	.inst	0x00000000 ; undefined
   80090:	00308000 	.word	0x00308000
   80094:	00000000 	.word	0x00000000
   80098:	0008c000 	.word	0x0008c000
   8009c:	00000000 	.word	0x00000000
   800a0:	002a0000 	.word	0x002a0000
   800a4:	00000000 	.word	0x00000000

Disassembly of section .text:

0000000000080800 <main>:
   80800:	d12603ff 	sub	sp, sp, #0x980
   80804:	a9007bfd 	stp	x29, x30, [sp]
   80808:	910003fd 	mov	x29, sp
   8080c:	910063a0 	add	x0, x29, #0x18
   80810:	9400000c 	bl	80840 <CKernel::CKernel()>
   80814:	910063a0 	add	x0, x29, #0x18
   80818:	94000036 	bl	808f0 <CKernel::Initialize()>
   8081c:	72001c1f 	tst	w0, #0xff
   80820:	540000c0 	b.eq	80838 <main+0x38>  // b.none
   80824:	910063a0 	add	x0, x29, #0x18
   80828:	94000036 	bl	80900 <CKernel::Run()>
   8082c:	7100081f 	cmp	w0, #0x2
   80830:	54000041 	b.ne	80838 <main+0x38>  // b.any
   80834:	94001433 	bl	85900 <reboot>
   80838:	9400142a 	bl	858e0 <halt>
   8083c:	00000000 	.inst	0x00000000 ; undefined

0000000000080840 <CKernel::CKernel()>:
   80840:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   80844:	52800021 	mov	w1, #0x1                   	// #1
   80848:	910003fd 	mov	x29, sp
   8084c:	a90153f3 	stp	x19, x20, [sp, #16]
   80850:	9100c014 	add	x20, x0, #0x30
   80854:	aa0003f3 	mov	x19, x0
   80858:	f90013f5 	str	x21, [sp, #32]
   8085c:	94001abd 	bl	87350 <CMemorySystem::CMemorySystem(bool)>
   80860:	52800001 	mov	w1, #0x0                   	// #0
   80864:	91006260 	add	x0, x19, #0x18
   80868:	9400008e 	bl	80aa0 <CActLED::CActLED(bool)>
   8086c:	aa1403e0 	mov	x0, x20
   80870:	940006e8 	bl	82410 <CKernelOptions::CKernelOptions()>
   80874:	91224260 	add	x0, x19, #0x890
   80878:	940000fe 	bl	80c70 <CDeviceNameService::CDeviceNameService()>
   8087c:	aa1403e0 	mov	x0, x20
   80880:	94000698 	bl	822e0 <CKernelOptions::GetWidth() const>
   80884:	2a0003f5 	mov	w21, w0
   80888:	aa1403e0 	mov	x0, x20
   8088c:	94000699 	bl	822f0 <CKernelOptions::GetHeight() const>
   80890:	2a0003e2 	mov	w2, w0
   80894:	2a1503e1 	mov	w1, w21
   80898:	91228260 	add	x0, x19, #0x8a0
   8089c:	a94153f3 	ldp	x19, x20, [sp, #16]
   808a0:	52800003 	mov	w3, #0x0                   	// #0
   808a4:	f94013f5 	ldr	x21, [sp, #32]
   808a8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   808ac:	14000a0d 	b	830e0 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool)>

00000000000808b0 <CKernel::~CKernel()>:
   808b0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   808b4:	910003fd 	mov	x29, sp
   808b8:	f9000bf3 	str	x19, [sp, #16]
   808bc:	aa0003f3 	mov	x19, x0
   808c0:	91228000 	add	x0, x0, #0x8a0
   808c4:	94000a2b 	bl	83170 <CScreenDevice::~CScreenDevice()>
   808c8:	91224260 	add	x0, x19, #0x890
   808cc:	940000fd 	bl	80cc0 <CDeviceNameService::~CDeviceNameService()>
   808d0:	9100c260 	add	x0, x19, #0x30
   808d4:	9400067f 	bl	822d0 <CKernelOptions::~CKernelOptions()>
   808d8:	91006260 	add	x0, x19, #0x18
   808dc:	940000a1 	bl	80b60 <CActLED::~CActLED()>
   808e0:	aa1303e0 	mov	x0, x19
   808e4:	f9400bf3 	ldr	x19, [sp, #16]
   808e8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   808ec:	14001ad5 	b	87440 <CMemorySystem::~CMemorySystem()>

00000000000808f0 <CKernel::Initialize()>:
   808f0:	91228000 	add	x0, x0, #0x8a0
   808f4:	14000a4b 	b	83220 <CScreenDevice::Initialize()>
   808f8:	d503201f 	nop
   808fc:	d503201f 	nop

0000000000080900 <CKernel::Run()>:
   80900:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   80904:	910003fd 	mov	x29, sp
   80908:	a90153f3 	stp	x19, x20, [sp, #16]
   8090c:	aa0003f4 	mov	x20, x0
   80910:	a9025bf5 	stp	x21, x22, [sp, #32]
   80914:	91228013 	add	x19, x0, #0x8a0
   80918:	52800015 	mov	w21, #0x0                   	// #0
   8091c:	1400000a 	b	80944 <CKernel::Run()+0x44>
   80920:	94000e34 	bl	841f0 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>
   80924:	aa1303e0 	mov	x0, x19
   80928:	94000aa6 	bl	833c0 <CScreenDevice::GetHeight() const>
   8092c:	2a1503e1 	mov	w1, w21
   80930:	51000402 	sub	w2, w0, #0x1
   80934:	12800403 	mov	w3, #0xffffffdf            	// #-33
   80938:	aa1303e0 	mov	x0, x19
   8093c:	110006b5 	add	w21, w21, #0x1
   80940:	94000e2c 	bl	841f0 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>
   80944:	aa1303e0 	mov	x0, x19
   80948:	94000a9a 	bl	833b0 <CScreenDevice::GetWidth() const>
   8094c:	2a1503e1 	mov	w1, w21
   80950:	6b15001f 	cmp	w0, w21
   80954:	12800403 	mov	w3, #0xffffffdf            	// #-33
   80958:	52800002 	mov	w2, #0x0                   	// #0
   8095c:	aa1303e0 	mov	x0, x19
   80960:	54fffe08 	b.hi	80920 <CKernel::Run()+0x20>  // b.pmore
   80964:	52800015 	mov	w21, #0x0                   	// #0
   80968:	1400000a 	b	80990 <CKernel::Run()+0x90>
   8096c:	94000e21 	bl	841f0 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>
   80970:	aa1303e0 	mov	x0, x19
   80974:	94000a8f 	bl	833b0 <CScreenDevice::GetWidth() const>
   80978:	2a1503e2 	mov	w2, w21
   8097c:	51000401 	sub	w1, w0, #0x1
   80980:	12800403 	mov	w3, #0xffffffdf            	// #-33
   80984:	aa1303e0 	mov	x0, x19
   80988:	110006b5 	add	w21, w21, #0x1
   8098c:	94000e19 	bl	841f0 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>
   80990:	aa1303e0 	mov	x0, x19
   80994:	94000a8b 	bl	833c0 <CScreenDevice::GetHeight() const>
   80998:	2a1503e2 	mov	w2, w21
   8099c:	6b15001f 	cmp	w0, w21
   809a0:	12800403 	mov	w3, #0xffffffdf            	// #-33
   809a4:	52800001 	mov	w1, #0x0                   	// #0
   809a8:	aa1303e0 	mov	x0, x19
   809ac:	54fffe08 	b.hi	8096c <CKernel::Run()+0x6c>  // b.pmore
   809b0:	52800015 	mov	w21, #0x0                   	// #0
   809b4:	14000014 	b	80a04 <CKernel::Run()+0x104>
   809b8:	94000a82 	bl	833c0 <CScreenDevice::GetHeight() const>
   809bc:	1b157c16 	mul	w22, w0, w21
   809c0:	aa1303e0 	mov	x0, x19
   809c4:	94000a7b 	bl	833b0 <CScreenDevice::GetWidth() const>
   809c8:	2a1503e1 	mov	w1, w21
   809cc:	12800403 	mov	w3, #0xffffffdf            	// #-33
   809d0:	1ac00ad6 	udiv	w22, w22, w0
   809d4:	aa1303e0 	mov	x0, x19
   809d8:	2a1603e2 	mov	w2, w22
   809dc:	94000e05 	bl	841f0 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>
   809e0:	aa1303e0 	mov	x0, x19
   809e4:	94000a73 	bl	833b0 <CScreenDevice::GetWidth() const>
   809e8:	2a3503e1 	mvn	w1, w21
   809ec:	12800403 	mov	w3, #0xffffffdf            	// #-33
   809f0:	0b000021 	add	w1, w1, w0
   809f4:	2a1603e2 	mov	w2, w22
   809f8:	aa1303e0 	mov	x0, x19
   809fc:	110006b5 	add	w21, w21, #0x1
   80a00:	94000dfc 	bl	841f0 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>
   80a04:	aa1303e0 	mov	x0, x19
   80a08:	94000a6a 	bl	833b0 <CScreenDevice::GetWidth() const>
   80a0c:	6b15001f 	cmp	w0, w21
   80a10:	aa1303e0 	mov	x0, x19
   80a14:	54fffd28 	b.hi	809b8 <CKernel::Run()+0xb8>  // b.pmore
   80a18:	91006294 	add	x20, x20, #0x18
   80a1c:	528ca013 	mov	w19, #0x6500                	// #25856
   80a20:	72a3b9b3 	movk	w19, #0x1dcd, lsl #16
   80a24:	5292d015 	mov	w21, #0x9680                	// #38528
   80a28:	72a01315 	movk	w21, #0x98, lsl #16
   80a2c:	52800036 	mov	w22, #0x1                   	// #1
   80a30:	aa1403e0 	mov	x0, x20
   80a34:	9400004f 	bl	80b70 <CActLED::On()>
   80a38:	b9003bb6 	str	w22, [x29, #56]
   80a3c:	b9403ba0 	ldr	w0, [x29, #56]
   80a40:	6b13001f 	cmp	w0, w19
   80a44:	540000e8 	b.hi	80a60 <CKernel::Run()+0x160>  // b.pmore
   80a48:	b9403ba0 	ldr	w0, [x29, #56]
   80a4c:	11000400 	add	w0, w0, #0x1
   80a50:	b9003ba0 	str	w0, [x29, #56]
   80a54:	b9403ba0 	ldr	w0, [x29, #56]
   80a58:	6b13001f 	cmp	w0, w19
   80a5c:	54ffff69 	b.ls	80a48 <CKernel::Run()+0x148>  // b.plast
   80a60:	aa1403e0 	mov	x0, x20
   80a64:	9400004f 	bl	80ba0 <CActLED::Off()>
   80a68:	b9003fb6 	str	w22, [x29, #60]
   80a6c:	b9403fa0 	ldr	w0, [x29, #60]
   80a70:	6b15001f 	cmp	w0, w21
   80a74:	54fffde8 	b.hi	80a30 <CKernel::Run()+0x130>  // b.pmore
   80a78:	b9403fa0 	ldr	w0, [x29, #60]
   80a7c:	11000400 	add	w0, w0, #0x1
   80a80:	b9003fa0 	str	w0, [x29, #60]
   80a84:	b9403fa0 	ldr	w0, [x29, #60]
   80a88:	6b15001f 	cmp	w0, w21
   80a8c:	54ffff69 	b.ls	80a78 <CKernel::Run()+0x178>  // b.plast
   80a90:	17ffffe8 	b	80a30 <CKernel::Run()+0x130>
	...

0000000000080aa0 <CActLED::CActLED(bool)>:
   80aa0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   80aa4:	910003fd 	mov	x29, sp
   80aa8:	a90153f3 	stp	x19, x20, [sp, #16]
   80aac:	aa0003f4 	mov	x20, x0
   80ab0:	f90013f5 	str	x21, [sp, #32]
   80ab4:	f0000060 	adrp	x0, 8f000 <vtable for CDevice+0x720>
   80ab8:	12001c35 	and	w21, w1, #0xff
   80abc:	a9007e9f 	stp	xzr, xzr, [x20]
   80ac0:	f9029414 	str	x20, [x0, #1320]
   80ac4:	94000974 	bl	83094 <CMachineInfo::Get()>
   80ac8:	9400086f 	bl	82c84 <CMachineInfo::GetActLEDInfo() const>
   80acc:	2a0003f3 	mov	w19, w0
   80ad0:	37380233 	tbnz	w19, #7, 80b14 <CActLED::CActLED(bool)+0x74>
   80ad4:	d2800800 	mov	x0, #0x40                  	// #64
   80ad8:	94001d32 	bl	87fa0 <operator new(unsigned long)>
   80adc:	12001661 	and	w1, w19, #0x3f
   80ae0:	d27a0273 	eor	x19, x19, #0x40
   80ae4:	aa0003f5 	mov	x21, x0
   80ae8:	d2800003 	mov	x3, #0x0                   	// #0
   80aec:	52800022 	mov	w2, #0x1                   	// #1
   80af0:	d3461a73 	ubfx	x19, x19, #6, #1
   80af4:	9400024b 	bl	81420 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   80af8:	f9000295 	str	x21, [x20]
   80afc:	39004293 	strb	w19, [x20, #16]
   80b00:	aa1403e0 	mov	x0, x20
   80b04:	a94153f3 	ldp	x19, x20, [sp, #16]
   80b08:	f94013f5 	ldr	x21, [sp, #32]
   80b0c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   80b10:	14000024 	b	80ba0 <CActLED::Off()>
   80b14:	f90017b6 	str	x22, [x29, #40]
   80b18:	d2800300 	mov	x0, #0x18                  	// #24
   80b1c:	94001d21 	bl	87fa0 <operator new(unsigned long)>
   80b20:	aa0003f6 	mov	x22, x0
   80b24:	12001661 	and	w1, w19, #0x3f
   80b28:	d27a0273 	eor	x19, x19, #0x40
   80b2c:	2a1503e2 	mov	w2, w21
   80b30:	94001924 	bl	86fc0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>
   80b34:	d3461a73 	ubfx	x19, x19, #6, #1
   80b38:	f9000696 	str	x22, [x20, #8]
   80b3c:	f94017b6 	ldr	x22, [x29, #40]
   80b40:	aa1403e0 	mov	x0, x20
   80b44:	39004293 	strb	w19, [x20, #16]
   80b48:	a94153f3 	ldp	x19, x20, [sp, #16]
   80b4c:	f94013f5 	ldr	x21, [sp, #32]
   80b50:	a8c37bfd 	ldp	x29, x30, [sp], #48
   80b54:	14000013 	b	80ba0 <CActLED::Off()>
   80b58:	d503201f 	nop
   80b5c:	d503201f 	nop

0000000000080b60 <CActLED::~CActLED()>:
   80b60:	f0000060 	adrp	x0, 8f000 <vtable for CDevice+0x720>
   80b64:	f902941f 	str	xzr, [x0, #1320]
   80b68:	d65f03c0 	ret
   80b6c:	d503201f 	nop

0000000000080b70 <CActLED::On()>:
   80b70:	f9400002 	ldr	x2, [x0]
   80b74:	b4000082 	cbz	x2, 80b84 <CActLED::On()+0x14>
   80b78:	39404001 	ldrb	w1, [x0, #16]
   80b7c:	aa0203e0 	mov	x0, x2
   80b80:	140002e4 	b	81710 <CGPIOPin::Write(unsigned int)>
   80b84:	f9400402 	ldr	x2, [x0, #8]
   80b88:	b4000082 	cbz	x2, 80b98 <CActLED::On()+0x28>
   80b8c:	39404001 	ldrb	w1, [x0, #16]
   80b90:	aa0203e0 	mov	x0, x2
   80b94:	1400195f 	b	87110 <CVirtualGPIOPin::Write(unsigned int)>
   80b98:	d65f03c0 	ret
   80b9c:	d503201f 	nop

0000000000080ba0 <CActLED::Off()>:
   80ba0:	f9400002 	ldr	x2, [x0]
   80ba4:	b40000a2 	cbz	x2, 80bb8 <CActLED::Off()+0x18>
   80ba8:	39404001 	ldrb	w1, [x0, #16]
   80bac:	aa0203e0 	mov	x0, x2
   80bb0:	52000021 	eor	w1, w1, #0x1
   80bb4:	140002d7 	b	81710 <CGPIOPin::Write(unsigned int)>
   80bb8:	f9400402 	ldr	x2, [x0, #8]
   80bbc:	b40000a2 	cbz	x2, 80bd0 <CActLED::Off()+0x30>
   80bc0:	39404001 	ldrb	w1, [x0, #16]
   80bc4:	aa0203e0 	mov	x0, x2
   80bc8:	52000021 	eor	w1, w1, #0x1
   80bcc:	14001951 	b	87110 <CVirtualGPIOPin::Write(unsigned int)>
   80bd0:	d65f03c0 	ret
   80bd4:	d503201f 	nop
   80bd8:	d503201f 	nop
   80bdc:	d503201f 	nop

0000000000080be0 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
   80be0:	34000381 	cbz	w1, 80c50 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x70>
   80be4:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   80be8:	910003fd 	mov	x29, sp
   80bec:	a90153f3 	stp	x19, x20, [sp, #16]
   80bf0:	aa0003f4 	mov	x20, x0
   80bf4:	a9025bf5 	stp	x21, x22, [sp, #32]
   80bf8:	2a0203f6 	mov	w22, w2
   80bfc:	f9001bf7 	str	x23, [sp, #48]
   80c00:	2a0103f5 	mov	w21, w1
   80c04:	2a0303f7 	mov	w23, w3
   80c08:	52800033 	mov	w19, #0x1                   	// #1
   80c0c:	d503201f 	nop
   80c10:	aa1403e0 	mov	x0, x20
   80c14:	97ffffd7 	bl	80b70 <CActLED::On()>
   80c18:	2a1603e0 	mov	w0, w22
   80c1c:	940016ed 	bl	867d0 <CTimer::SimpleMsDelay(unsigned int)>
   80c20:	aa1403e0 	mov	x0, x20
   80c24:	97ffffdf 	bl	80ba0 <CActLED::Off()>
   80c28:	11000673 	add	w19, w19, #0x1
   80c2c:	2a1703e0 	mov	w0, w23
   80c30:	940016e8 	bl	867d0 <CTimer::SimpleMsDelay(unsigned int)>
   80c34:	6b1302bf 	cmp	w21, w19
   80c38:	54fffec2 	b.cs	80c10 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x30>  // b.hs, b.nlast
   80c3c:	a94153f3 	ldp	x19, x20, [sp, #16]
   80c40:	a9425bf5 	ldp	x21, x22, [sp, #32]
   80c44:	f9401bf7 	ldr	x23, [sp, #48]
   80c48:	a8c47bfd 	ldp	x29, x30, [sp], #64
   80c4c:	d65f03c0 	ret
   80c50:	d65f03c0 	ret
   80c54:	d503201f 	nop
   80c58:	d503201f 	nop
   80c5c:	d503201f 	nop

0000000000080c60 <CActLED::Get()>:
   80c60:	f0000060 	adrp	x0, 8f000 <vtable for CDevice+0x720>
   80c64:	f9429400 	ldr	x0, [x0, #1320]
   80c68:	d65f03c0 	ret
   80c6c:	00000000 	.inst	0x00000000 ; undefined

0000000000080c70 <CDeviceNameService::CDeviceNameService()>:
   80c70:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   80c74:	910003fd 	mov	x29, sp
   80c78:	a90153f3 	stp	x19, x20, [sp, #16]
   80c7c:	aa0003f3 	mov	x19, x0
   80c80:	f0000074 	adrp	x20, 8f000 <vtable for CDevice+0x720>
   80c84:	f9429a80 	ldr	x0, [x20, #1328]
   80c88:	f900027f 	str	xzr, [x19]
   80c8c:	b9000a7f 	str	wzr, [x19, #8]
   80c90:	b40000e0 	cbz	x0, 80cac <CDeviceNameService::CDeviceNameService()+0x3c>
   80c94:	90000061 	adrp	x1, 8c000 <VectorTable>
   80c98:	90000060 	adrp	x0, 8c000 <VectorTable>
   80c9c:	528003e2 	mov	w2, #0x1f                  	// #31
   80ca0:	9137e021 	add	x1, x1, #0xdf8
   80ca4:	91384000 	add	x0, x0, #0xe10
   80ca8:	94001e62 	bl	88630 <assertion_failed>
   80cac:	f9029a93 	str	x19, [x20, #1328]
   80cb0:	a94153f3 	ldp	x19, x20, [sp, #16]
   80cb4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   80cb8:	d65f03c0 	ret
   80cbc:	d503201f 	nop

0000000000080cc0 <CDeviceNameService::~CDeviceNameService()>:
   80cc0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   80cc4:	910003fd 	mov	x29, sp
   80cc8:	f9000ff4 	str	x20, [sp, #24]
   80ccc:	aa0003f4 	mov	x20, x0
   80cd0:	f9400000 	ldr	x0, [x0]
   80cd4:	b4000200 	cbz	x0, 80d14 <CDeviceNameService::~CDeviceNameService()+0x54>
   80cd8:	f9000bb3 	str	x19, [x29, #16]
   80cdc:	d503201f 	nop
   80ce0:	a9400413 	ldp	x19, x1, [x0]
   80ce4:	aa0103e0 	mov	x0, x1
   80ce8:	b4000041 	cbz	x1, 80cf0 <CDeviceNameService::~CDeviceNameService()+0x30>
   80cec:	94001cb9 	bl	87fd0 <operator delete[](void*)>
   80cf0:	f9400282 	ldr	x2, [x20]
   80cf4:	d2800401 	mov	x1, #0x20                  	// #32
   80cf8:	aa0203e0 	mov	x0, x2
   80cfc:	a900fc5f 	stp	xzr, xzr, [x2, #8]
   80d00:	94001cb8 	bl	87fe0 <operator delete(void*, unsigned long)>
   80d04:	f9000293 	str	x19, [x20]
   80d08:	aa1303e0 	mov	x0, x19
   80d0c:	b5fffeb3 	cbnz	x19, 80ce0 <CDeviceNameService::~CDeviceNameService()+0x20>
   80d10:	f9400bb3 	ldr	x19, [x29, #16]
   80d14:	f0000060 	adrp	x0, 8f000 <vtable for CDevice+0x720>
   80d18:	f9400ff4 	ldr	x20, [sp, #24]
   80d1c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   80d20:	f902981f 	str	xzr, [x0, #1328]
   80d24:	d65f03c0 	ret
   80d28:	d503201f 	nop
   80d2c:	d503201f 	nop

0000000000080d30 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>:
   80d30:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   80d34:	910003fd 	mov	x29, sp
   80d38:	a90153f3 	stp	x19, x20, [sp, #16]
   80d3c:	aa0003f4 	mov	x20, x0
   80d40:	b9400800 	ldr	w0, [x0, #8]
   80d44:	a9025bf5 	stp	x21, x22, [sp, #32]
   80d48:	aa0103f5 	mov	x21, x1
   80d4c:	f9001bf7 	str	x23, [sp, #48]
   80d50:	aa0203f6 	mov	x22, x2
   80d54:	12001c77 	and	w23, w3, #0xff
   80d58:	350003c0 	cbnz	w0, 80dd0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xa0>
   80d5c:	d2800400 	mov	x0, #0x20                  	// #32
   80d60:	94001c90 	bl	87fa0 <operator new(unsigned long)>
   80d64:	aa0003f3 	mov	x19, x0
   80d68:	b40003f5 	cbz	x21, 80de4 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb4>
   80d6c:	aa1503e0 	mov	x0, x21
   80d70:	9400172c 	bl	86a20 <strlen>
   80d74:	91000400 	add	x0, x0, #0x1
   80d78:	94001c8e 	bl	87fb0 <operator new[](unsigned long)>
   80d7c:	f9000660 	str	x0, [x19, #8]
   80d80:	aa1503e1 	mov	x1, x21
   80d84:	94001793 	bl	86bd0 <strcpy>
   80d88:	b40004d6 	cbz	x22, 80e20 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xf0>
   80d8c:	b9400a80 	ldr	w0, [x20, #8]
   80d90:	f9400281 	ldr	x1, [x20]
   80d94:	f9000261 	str	x1, [x19]
   80d98:	f9000a76 	str	x22, [x19, #16]
   80d9c:	39006277 	strb	w23, [x19, #24]
   80da0:	f9000293 	str	x19, [x20]
   80da4:	350000c0 	cbnz	w0, 80dbc <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x8c>
   80da8:	a94153f3 	ldp	x19, x20, [sp, #16]
   80dac:	a9425bf5 	ldp	x21, x22, [sp, #32]
   80db0:	f9401bf7 	ldr	x23, [sp, #48]
   80db4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   80db8:	d65f03c0 	ret
   80dbc:	a94153f3 	ldp	x19, x20, [sp, #16]
   80dc0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   80dc4:	f9401bf7 	ldr	x23, [sp, #48]
   80dc8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   80dcc:	14001a69 	b	87770 <LeaveCritical>
   80dd0:	94001a30 	bl	87690 <EnterCritical>
   80dd4:	d2800400 	mov	x0, #0x20                  	// #32
   80dd8:	94001c72 	bl	87fa0 <operator new(unsigned long)>
   80ddc:	aa0003f3 	mov	x19, x0
   80de0:	b5fffc75 	cbnz	x21, 80d6c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x3c>
   80de4:	90000061 	adrp	x1, 8c000 <VectorTable>
   80de8:	9137e021 	add	x1, x1, #0xdf8
   80dec:	52800762 	mov	w2, #0x3b                  	// #59
   80df0:	90000060 	adrp	x0, 8c000 <VectorTable>
   80df4:	91388000 	add	x0, x0, #0xe20
   80df8:	94001e0e 	bl	88630 <assertion_failed>
   80dfc:	aa1503e0 	mov	x0, x21
   80e00:	94001708 	bl	86a20 <strlen>
   80e04:	91000400 	add	x0, x0, #0x1
   80e08:	94001c6a 	bl	87fb0 <operator new[](unsigned long)>
   80e0c:	f9000660 	str	x0, [x19, #8]
   80e10:	aa1503e1 	mov	x1, x21
   80e14:	9400176f 	bl	86bd0 <strcpy>
   80e18:	b5fffbb6 	cbnz	x22, 80d8c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x5c>
   80e1c:	d503201f 	nop
   80e20:	90000061 	adrp	x1, 8c000 <VectorTable>
   80e24:	90000060 	adrp	x0, 8c000 <VectorTable>
   80e28:	52800802 	mov	w2, #0x40                  	// #64
   80e2c:	9137e021 	add	x1, x1, #0xdf8
   80e30:	9138c000 	add	x0, x0, #0xe30
   80e34:	94001dff 	bl	88630 <assertion_failed>
   80e38:	17ffffd5 	b	80d8c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x5c>
   80e3c:	d503201f 	nop

0000000000080e40 <CDeviceNameService::RemoveDevice(char const*, bool)>:
   80e40:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   80e44:	910003fd 	mov	x29, sp
   80e48:	a90153f3 	stp	x19, x20, [sp, #16]
   80e4c:	aa0103f4 	mov	x20, x1
   80e50:	a902dff6 	stp	x22, x23, [sp, #40]
   80e54:	aa0003f7 	mov	x23, x0
   80e58:	12001c56 	and	w22, w2, #0xff
   80e5c:	b40008a1 	cbz	x1, 80f70 <CDeviceNameService::RemoveDevice(char const*, bool)+0x130>
   80e60:	b9400ae0 	ldr	w0, [x23, #8]
   80e64:	35000760 	cbnz	w0, 80f50 <CDeviceNameService::RemoveDevice(char const*, bool)+0x110>
   80e68:	f94002f3 	ldr	x19, [x23]
   80e6c:	b4000613 	cbz	x19, 80f2c <CDeviceNameService::RemoveDevice(char const*, bool)+0xec>
   80e70:	f90013b5 	str	x21, [x29, #32]
   80e74:	d2800015 	mov	x21, #0x0                   	// #0
   80e78:	a903e7b8 	stp	x24, x25, [x29, #56]
   80e7c:	90000079 	adrp	x25, 8c000 <VectorTable>
   80e80:	9137e339 	add	x25, x25, #0xdf8
   80e84:	90000078 	adrp	x24, 8c000 <VectorTable>
   80e88:	91390318 	add	x24, x24, #0xe40
   80e8c:	1400000b 	b	80eb8 <CDeviceNameService::RemoveDevice(char const*, bool)+0x78>
   80e90:	aa1403e0 	mov	x0, x20
   80e94:	940016ef 	bl	86a50 <strcmp>
   80e98:	35000080 	cbnz	w0, 80ea8 <CDeviceNameService::RemoveDevice(char const*, bool)+0x68>
   80e9c:	39406260 	ldrb	w0, [x19, #24]
   80ea0:	6b16001f 	cmp	w0, w22
   80ea4:	540001a0 	b.eq	80ed8 <CDeviceNameService::RemoveDevice(char const*, bool)+0x98>  // b.none
   80ea8:	f9400260 	ldr	x0, [x19]
   80eac:	aa1303f5 	mov	x21, x19
   80eb0:	aa0003f3 	mov	x19, x0
   80eb4:	b4000340 	cbz	x0, 80f1c <CDeviceNameService::RemoveDevice(char const*, bool)+0xdc>
   80eb8:	f9400661 	ldr	x1, [x19, #8]
   80ebc:	b5fffea1 	cbnz	x1, 80e90 <CDeviceNameService::RemoveDevice(char const*, bool)+0x50>
   80ec0:	aa1903e1 	mov	x1, x25
   80ec4:	52800bc2 	mov	w2, #0x5e                  	// #94
   80ec8:	aa1803e0 	mov	x0, x24
   80ecc:	94001dd9 	bl	88630 <assertion_failed>
   80ed0:	f9400661 	ldr	x1, [x19, #8]
   80ed4:	17ffffef 	b	80e90 <CDeviceNameService::RemoveDevice(char const*, bool)+0x50>
   80ed8:	f9400260 	ldr	x0, [x19]
   80edc:	b4000315 	cbz	x21, 80f3c <CDeviceNameService::RemoveDevice(char const*, bool)+0xfc>
   80ee0:	f90002a0 	str	x0, [x21]
   80ee4:	b9400ae0 	ldr	w0, [x23, #8]
   80ee8:	35000300 	cbnz	w0, 80f48 <CDeviceNameService::RemoveDevice(char const*, bool)+0x108>
   80eec:	f9400660 	ldr	x0, [x19, #8]
   80ef0:	b4000040 	cbz	x0, 80ef8 <CDeviceNameService::RemoveDevice(char const*, bool)+0xb8>
   80ef4:	94001c37 	bl	87fd0 <operator delete[](void*)>
   80ef8:	a943e7b8 	ldp	x24, x25, [x29, #56]
   80efc:	aa1303e0 	mov	x0, x19
   80f00:	a942dff6 	ldp	x22, x23, [sp, #40]
   80f04:	d2800401 	mov	x1, #0x20                  	// #32
   80f08:	f94013b5 	ldr	x21, [x29, #32]
   80f0c:	a900fe7f 	stp	xzr, xzr, [x19, #8]
   80f10:	a94153f3 	ldp	x19, x20, [sp, #16]
   80f14:	a8c57bfd 	ldp	x29, x30, [sp], #80
   80f18:	14001c32 	b	87fe0 <operator delete(void*, unsigned long)>
   80f1c:	f94013b5 	ldr	x21, [x29, #32]
   80f20:	a943e7b8 	ldp	x24, x25, [x29, #56]
   80f24:	b9400ae0 	ldr	w0, [x23, #8]
   80f28:	350001c0 	cbnz	w0, 80f60 <CDeviceNameService::RemoveDevice(char const*, bool)+0x120>
   80f2c:	a94153f3 	ldp	x19, x20, [sp, #16]
   80f30:	a942dff6 	ldp	x22, x23, [sp, #40]
   80f34:	a8c57bfd 	ldp	x29, x30, [sp], #80
   80f38:	d65f03c0 	ret
   80f3c:	f90002e0 	str	x0, [x23]
   80f40:	b9400ae0 	ldr	w0, [x23, #8]
   80f44:	34fffd40 	cbz	w0, 80eec <CDeviceNameService::RemoveDevice(char const*, bool)+0xac>
   80f48:	94001a0a 	bl	87770 <LeaveCritical>
   80f4c:	17ffffe8 	b	80eec <CDeviceNameService::RemoveDevice(char const*, bool)+0xac>
   80f50:	940019d0 	bl	87690 <EnterCritical>
   80f54:	f94002f3 	ldr	x19, [x23]
   80f58:	b5fff8d3 	cbnz	x19, 80e70 <CDeviceNameService::RemoveDevice(char const*, bool)+0x30>
   80f5c:	17fffff2 	b	80f24 <CDeviceNameService::RemoveDevice(char const*, bool)+0xe4>
   80f60:	a94153f3 	ldp	x19, x20, [sp, #16]
   80f64:	a942dff6 	ldp	x22, x23, [sp, #40]
   80f68:	a8c57bfd 	ldp	x29, x30, [sp], #80
   80f6c:	14001a01 	b	87770 <LeaveCritical>
   80f70:	90000061 	adrp	x1, 8c000 <VectorTable>
   80f74:	90000060 	adrp	x0, 8c000 <VectorTable>
   80f78:	52800ac2 	mov	w2, #0x56                  	// #86
   80f7c:	9137e021 	add	x1, x1, #0xdf8
   80f80:	91388000 	add	x0, x0, #0xe20
   80f84:	94001dab 	bl	88630 <assertion_failed>
   80f88:	17ffffb6 	b	80e60 <CDeviceNameService::RemoveDevice(char const*, bool)+0x20>
   80f8c:	d503201f 	nop

0000000000080f90 <CDeviceNameService::GetDevice(char const*, bool)>:
   80f90:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   80f94:	910003fd 	mov	x29, sp
   80f98:	a90153f3 	stp	x19, x20, [sp, #16]
   80f9c:	aa0103f4 	mov	x20, x1
   80fa0:	f90013f5 	str	x21, [sp, #32]
   80fa4:	12001c55 	and	w21, w2, #0xff
   80fa8:	f9001ff8 	str	x24, [sp, #56]
   80fac:	aa0003f8 	mov	x24, x0
   80fb0:	b40006e1 	cbz	x1, 8108c <CDeviceNameService::GetDevice(char const*, bool)+0xfc>
   80fb4:	b9400b00 	ldr	w0, [x24, #8]
   80fb8:	35000480 	cbnz	w0, 81048 <CDeviceNameService::GetDevice(char const*, bool)+0xb8>
   80fbc:	f9400313 	ldr	x19, [x24]
   80fc0:	b4000373 	cbz	x19, 8102c <CDeviceNameService::GetDevice(char const*, bool)+0x9c>
   80fc4:	a902dfb6 	stp	x22, x23, [x29, #40]
   80fc8:	90000077 	adrp	x23, 8c000 <VectorTable>
   80fcc:	9137e2f7 	add	x23, x23, #0xdf8
   80fd0:	90000076 	adrp	x22, 8c000 <VectorTable>
   80fd4:	913902d6 	add	x22, x22, #0xe40
   80fd8:	14000009 	b	80ffc <CDeviceNameService::GetDevice(char const*, bool)+0x6c>
   80fdc:	aa1403e0 	mov	x0, x20
   80fe0:	9400169c 	bl	86a50 <strcmp>
   80fe4:	35000080 	cbnz	w0, 80ff4 <CDeviceNameService::GetDevice(char const*, bool)+0x64>
   80fe8:	39406260 	ldrb	w0, [x19, #24]
   80fec:	6b15001f 	cmp	w0, w21
   80ff0:	54000340 	b.eq	81058 <CDeviceNameService::GetDevice(char const*, bool)+0xc8>  // b.none
   80ff4:	f9400273 	ldr	x19, [x19]
   80ff8:	b4000133 	cbz	x19, 8101c <CDeviceNameService::GetDevice(char const*, bool)+0x8c>
   80ffc:	f9400661 	ldr	x1, [x19, #8]
   81000:	b5fffee1 	cbnz	x1, 80fdc <CDeviceNameService::GetDevice(char const*, bool)+0x4c>
   81004:	aa1703e1 	mov	x1, x23
   81008:	52801242 	mov	w2, #0x92                  	// #146
   8100c:	aa1603e0 	mov	x0, x22
   81010:	94001d88 	bl	88630 <assertion_failed>
   81014:	f9400661 	ldr	x1, [x19, #8]
   81018:	17fffff1 	b	80fdc <CDeviceNameService::GetDevice(char const*, bool)+0x4c>
   8101c:	a942dfb6 	ldp	x22, x23, [x29, #40]
   81020:	b9400b00 	ldr	w0, [x24, #8]
   81024:	34000040 	cbz	w0, 8102c <CDeviceNameService::GetDevice(char const*, bool)+0x9c>
   81028:	940019d2 	bl	87770 <LeaveCritical>
   8102c:	d2800013 	mov	x19, #0x0                   	// #0
   81030:	aa1303e0 	mov	x0, x19
   81034:	f94013f5 	ldr	x21, [sp, #32]
   81038:	a94153f3 	ldp	x19, x20, [sp, #16]
   8103c:	f9401ff8 	ldr	x24, [sp, #56]
   81040:	a8c47bfd 	ldp	x29, x30, [sp], #64
   81044:	d65f03c0 	ret
   81048:	94001992 	bl	87690 <EnterCritical>
   8104c:	f9400313 	ldr	x19, [x24]
   81050:	b5fffbb3 	cbnz	x19, 80fc4 <CDeviceNameService::GetDevice(char const*, bool)+0x34>
   81054:	17fffff3 	b	81020 <CDeviceNameService::GetDevice(char const*, bool)+0x90>
   81058:	b9400b00 	ldr	w0, [x24, #8]
   8105c:	f9400a73 	ldr	x19, [x19, #16]
   81060:	35000120 	cbnz	w0, 81084 <CDeviceNameService::GetDevice(char const*, bool)+0xf4>
   81064:	b4000233 	cbz	x19, 810a8 <CDeviceNameService::GetDevice(char const*, bool)+0x118>
   81068:	aa1303e0 	mov	x0, x19
   8106c:	f94013f5 	ldr	x21, [sp, #32]
   81070:	a942dfb6 	ldp	x22, x23, [x29, #40]
   81074:	a94153f3 	ldp	x19, x20, [sp, #16]
   81078:	f9401ff8 	ldr	x24, [sp, #56]
   8107c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   81080:	d65f03c0 	ret
   81084:	940019bb 	bl	87770 <LeaveCritical>
   81088:	17fffff7 	b	81064 <CDeviceNameService::GetDevice(char const*, bool)+0xd4>
   8108c:	f0000041 	adrp	x1, 8c000 <VectorTable>
   81090:	f0000040 	adrp	x0, 8c000 <VectorTable>
   81094:	52801162 	mov	w2, #0x8b                  	// #139
   81098:	9137e021 	add	x1, x1, #0xdf8
   8109c:	91388000 	add	x0, x0, #0xe20
   810a0:	94001d64 	bl	88630 <assertion_failed>
   810a4:	17ffffc4 	b	80fb4 <CDeviceNameService::GetDevice(char const*, bool)+0x24>
   810a8:	f0000041 	adrp	x1, 8c000 <VectorTable>
   810ac:	f0000040 	adrp	x0, 8c000 <VectorTable>
   810b0:	52801342 	mov	w2, #0x9a                  	// #154
   810b4:	9137e021 	add	x1, x1, #0xdf8
   810b8:	91396000 	add	x0, x0, #0xe58
   810bc:	94001d5d 	bl	88630 <assertion_failed>
   810c0:	a942dfb6 	ldp	x22, x23, [x29, #40]
   810c4:	17ffffdb 	b	81030 <CDeviceNameService::GetDevice(char const*, bool)+0xa0>
   810c8:	d503201f 	nop
   810cc:	d503201f 	nop

00000000000810d0 <CDeviceNameService::Get()>:
   810d0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   810d4:	910003fd 	mov	x29, sp
   810d8:	f9000bf3 	str	x19, [sp, #16]
   810dc:	d0000073 	adrp	x19, 8f000 <vtable for CDevice+0x720>
   810e0:	f9429a60 	ldr	x0, [x19, #1328]
   810e4:	b4000080 	cbz	x0, 810f4 <CDeviceNameService::Get()+0x24>
   810e8:	f9400bf3 	ldr	x19, [sp, #16]
   810ec:	a8c27bfd 	ldp	x29, x30, [sp], #32
   810f0:	d65f03c0 	ret
   810f4:	52801982 	mov	w2, #0xcc                  	// #204
   810f8:	f0000041 	adrp	x1, 8c000 <VectorTable>
   810fc:	f0000040 	adrp	x0, 8c000 <VectorTable>
   81100:	9137e021 	add	x1, x1, #0xdf8
   81104:	9139a000 	add	x0, x0, #0xe68
   81108:	94001d4a 	bl	88630 <assertion_failed>
   8110c:	f9429a60 	ldr	x0, [x19, #1328]
   81110:	f9400bf3 	ldr	x19, [sp, #16]
   81114:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81118:	d65f03c0 	ret
   8111c:	d503201f 	nop

0000000000081120 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>:
   81120:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   81124:	910003fd 	mov	x29, sp
   81128:	a90153f3 	stp	x19, x20, [sp, #16]
   8112c:	aa0303f4 	mov	x20, x3
   81130:	a9025bf5 	stp	x21, x22, [sp, #32]
   81134:	aa0003f3 	mov	x19, x0
   81138:	12001c95 	and	w21, w4, #0xff
   8113c:	f9001bf7 	str	x23, [sp, #48]
   81140:	aa0103f6 	mov	x22, x1
   81144:	2a0203f7 	mov	w23, w2
   81148:	910103a0 	add	x0, x29, #0x40
   8114c:	94000cfd 	bl	84540 <CString::CString()>
   81150:	2a1703e3 	mov	w3, w23
   81154:	aa1603e2 	mov	x2, x22
   81158:	f0000041 	adrp	x1, 8c000 <VectorTable>
   8115c:	9139e021 	add	x1, x1, #0xe78
   81160:	910103a0 	add	x0, x29, #0x40
   81164:	940011b3 	bl	85830 <CString::Format(char const*, ...)>
   81168:	910103a0 	add	x0, x29, #0x40
   8116c:	94000d11 	bl	845b0 <CString::operator char const*() const>
   81170:	aa0003e1 	mov	x1, x0
   81174:	2a1503e3 	mov	w3, w21
   81178:	aa1403e2 	mov	x2, x20
   8117c:	aa1303e0 	mov	x0, x19
   81180:	97fffeec 	bl	80d30 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   81184:	910103a0 	add	x0, x29, #0x40
   81188:	94000cae 	bl	84440 <CString::~CString()>
   8118c:	f9401bf7 	ldr	x23, [sp, #48]
   81190:	a94153f3 	ldp	x19, x20, [sp, #16]
   81194:	a9425bf5 	ldp	x21, x22, [sp, #32]
   81198:	a8c67bfd 	ldp	x29, x30, [sp], #96
   8119c:	d65f03c0 	ret

00000000000811a0 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>:
   811a0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   811a4:	910003fd 	mov	x29, sp
   811a8:	a90153f3 	stp	x19, x20, [sp, #16]
   811ac:	12001c74 	and	w20, w3, #0xff
   811b0:	a9025bf5 	stp	x21, x22, [sp, #32]
   811b4:	aa0003f3 	mov	x19, x0
   811b8:	aa0103f5 	mov	x21, x1
   811bc:	2a0203f6 	mov	w22, w2
   811c0:	9100c3a0 	add	x0, x29, #0x30
   811c4:	94000cdf 	bl	84540 <CString::CString()>
   811c8:	2a1603e3 	mov	w3, w22
   811cc:	aa1503e2 	mov	x2, x21
   811d0:	f0000041 	adrp	x1, 8c000 <VectorTable>
   811d4:	9139e021 	add	x1, x1, #0xe78
   811d8:	9100c3a0 	add	x0, x29, #0x30
   811dc:	94001195 	bl	85830 <CString::Format(char const*, ...)>
   811e0:	9100c3a0 	add	x0, x29, #0x30
   811e4:	94000cf3 	bl	845b0 <CString::operator char const*() const>
   811e8:	aa0003e1 	mov	x1, x0
   811ec:	2a1403e2 	mov	w2, w20
   811f0:	aa1303e0 	mov	x0, x19
   811f4:	97ffff13 	bl	80e40 <CDeviceNameService::RemoveDevice(char const*, bool)>
   811f8:	9100c3a0 	add	x0, x29, #0x30
   811fc:	94000c91 	bl	84440 <CString::~CString()>
   81200:	a94153f3 	ldp	x19, x20, [sp, #16]
   81204:	a9425bf5 	ldp	x21, x22, [sp, #32]
   81208:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8120c:	d65f03c0 	ret

0000000000081210 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)>:
   81210:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   81214:	910003fd 	mov	x29, sp
   81218:	a90153f3 	stp	x19, x20, [sp, #16]
   8121c:	12001c74 	and	w20, w3, #0xff
   81220:	a9025bf5 	stp	x21, x22, [sp, #32]
   81224:	aa0003f3 	mov	x19, x0
   81228:	aa0103f5 	mov	x21, x1
   8122c:	2a0203f6 	mov	w22, w2
   81230:	9100c3a0 	add	x0, x29, #0x30
   81234:	94000cc3 	bl	84540 <CString::CString()>
   81238:	2a1603e3 	mov	w3, w22
   8123c:	aa1503e2 	mov	x2, x21
   81240:	f0000041 	adrp	x1, 8c000 <VectorTable>
   81244:	9139e021 	add	x1, x1, #0xe78
   81248:	9100c3a0 	add	x0, x29, #0x30
   8124c:	94001179 	bl	85830 <CString::Format(char const*, ...)>
   81250:	9100c3a0 	add	x0, x29, #0x30
   81254:	94000cd7 	bl	845b0 <CString::operator char const*() const>
   81258:	aa0003e1 	mov	x1, x0
   8125c:	2a1403e2 	mov	w2, w20
   81260:	aa1303e0 	mov	x0, x19
   81264:	97ffff4b 	bl	80f90 <CDeviceNameService::GetDevice(char const*, bool)>
   81268:	aa0003f3 	mov	x19, x0
   8126c:	9100c3a0 	add	x0, x29, #0x30
   81270:	94000c74 	bl	84440 <CString::~CString()>
   81274:	aa1303e0 	mov	x0, x19
   81278:	a94153f3 	ldp	x19, x20, [sp, #16]
   8127c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   81280:	a8c57bfd 	ldp	x29, x30, [sp], #80
   81284:	d65f03c0 	ret
   81288:	d503201f 	nop
   8128c:	d503201f 	nop

0000000000081290 <CDeviceNameService::ListDevices(CDevice*)>:
   81290:	a9b87bfd 	stp	x29, x30, [sp, #-128]!
   81294:	910003fd 	mov	x29, sp
   81298:	f9000bf3 	str	x19, [sp, #16]
   8129c:	aa0003f3 	mov	x19, x0
   812a0:	f90013f5 	str	x21, [sp, #32]
   812a4:	aa0103f5 	mov	x21, x1
   812a8:	b4000961 	cbz	x1, 813d4 <CDeviceNameService::ListDevices(CDevice*)+0x144>
   812ac:	f9400273 	ldr	x19, [x19]
   812b0:	b40006d3 	cbz	x19, 81388 <CDeviceNameService::ListDevices(CDevice*)+0xf8>
   812b4:	f9000fb4 	str	x20, [x29, #24]
   812b8:	52800014 	mov	w20, #0x0                   	// #0
   812bc:	a902dfb6 	stp	x22, x23, [x29, #40]
   812c0:	a903e7b8 	stp	x24, x25, [x29, #56]
   812c4:	f0000059 	adrp	x25, 8c000 <VectorTable>
   812c8:	91390339 	add	x25, x25, #0xe40
   812cc:	a904efba 	stp	x26, x27, [x29, #72]
   812d0:	f0000058 	adrp	x24, 8c000 <VectorTable>
   812d4:	f000005a 	adrp	x26, 8c000 <VectorTable>
   812d8:	9137e35a 	add	x26, x26, #0xdf8
   812dc:	1400001b 	b	81348 <CDeviceNameService::ListDevices(CDevice*)+0xb8>
   812e0:	39406262 	ldrb	w2, [x19, #24]
   812e4:	52800405 	mov	w5, #0x20                  	// #32
   812e8:	913a4301 	add	x1, x24, #0xe90
   812ec:	910183a0 	add	x0, x29, #0x60
   812f0:	7100005f 	cmp	w2, #0x0
   812f4:	52800144 	mov	w4, #0xa                   	// #10
   812f8:	1a9f17e2 	cset	w2, eq  // eq = none
   812fc:	7200069b 	ands	w27, w20, #0x3
   81300:	11018842 	add	w2, w2, #0x62
   81304:	1a8410a4 	csel	w4, w5, w4, ne  // ne = any
   81308:	9400114a 	bl	85830 <CString::Format(char const*, ...)>
   8130c:	f94002a1 	ldr	x1, [x21]
   81310:	910183a0 	add	x0, x29, #0x60
   81314:	f9400c36 	ldr	x22, [x1, #24]
   81318:	94000ca6 	bl	845b0 <CString::operator char const*() const>
   8131c:	aa0003f7 	mov	x23, x0
   81320:	910183a0 	add	x0, x29, #0x60
   81324:	94000cdb 	bl	84690 <CString::GetLength() const>
   81328:	aa1703e1 	mov	x1, x23
   8132c:	aa0003e2 	mov	x2, x0
   81330:	aa1503e0 	mov	x0, x21
   81334:	d63f02c0 	blr	x22
   81338:	f9400273 	ldr	x19, [x19]
   8133c:	910183a0 	add	x0, x29, #0x60
   81340:	94000c40 	bl	84440 <CString::~CString()>
   81344:	b4000193 	cbz	x19, 81374 <CDeviceNameService::ListDevices(CDevice*)+0xe4>
   81348:	910183a0 	add	x0, x29, #0x60
   8134c:	94000c7d 	bl	84540 <CString::CString()>
   81350:	f9400663 	ldr	x3, [x19, #8]
   81354:	11000694 	add	w20, w20, #0x1
   81358:	b5fffc43 	cbnz	x3, 812e0 <CDeviceNameService::ListDevices(CDevice*)+0x50>
   8135c:	52801722 	mov	w2, #0xb9                  	// #185
   81360:	aa1a03e1 	mov	x1, x26
   81364:	aa1903e0 	mov	x0, x25
   81368:	94001cb2 	bl	88630 <assertion_failed>
   8136c:	f9400663 	ldr	x3, [x19, #8]
   81370:	17ffffdc 	b	812e0 <CDeviceNameService::ListDevices(CDevice*)+0x50>
   81374:	3500013b 	cbnz	w27, 81398 <CDeviceNameService::ListDevices(CDevice*)+0x108>
   81378:	f9400fb4 	ldr	x20, [x29, #24]
   8137c:	a942dfb6 	ldp	x22, x23, [x29, #40]
   81380:	a943e7b8 	ldp	x24, x25, [x29, #56]
   81384:	a944efba 	ldp	x26, x27, [x29, #72]
   81388:	f9400bf3 	ldr	x19, [sp, #16]
   8138c:	f94013f5 	ldr	x21, [sp, #32]
   81390:	a8c87bfd 	ldp	x29, x30, [sp], #128
   81394:	d65f03c0 	ret
   81398:	f94002a3 	ldr	x3, [x21]
   8139c:	d2800022 	mov	x2, #0x1                   	// #1
   813a0:	aa1503e0 	mov	x0, x21
   813a4:	f0000041 	adrp	x1, 8c000 <VectorTable>
   813a8:	913a8021 	add	x1, x1, #0xea0
   813ac:	f9400c63 	ldr	x3, [x3, #24]
   813b0:	d63f0060 	blr	x3
   813b4:	f9400fb4 	ldr	x20, [x29, #24]
   813b8:	a942dfb6 	ldp	x22, x23, [x29, #40]
   813bc:	a943e7b8 	ldp	x24, x25, [x29, #56]
   813c0:	a944efba 	ldp	x26, x27, [x29, #72]
   813c4:	f9400bf3 	ldr	x19, [sp, #16]
   813c8:	f94013f5 	ldr	x21, [sp, #32]
   813cc:	a8c87bfd 	ldp	x29, x30, [sp], #128
   813d0:	d65f03c0 	ret
   813d4:	f0000041 	adrp	x1, 8c000 <VectorTable>
   813d8:	f0000040 	adrp	x0, 8c000 <VectorTable>
   813dc:	52801602 	mov	w2, #0xb0                  	// #176
   813e0:	9137e021 	add	x1, x1, #0xdf8
   813e4:	913a0000 	add	x0, x0, #0xe80
   813e8:	94001c92 	bl	88630 <assertion_failed>
   813ec:	17ffffb0 	b	812ac <CDeviceNameService::ListDevices(CDevice*)+0x1c>

00000000000813f0 <CGPIOPin::CGPIOPin()>:
   813f0:	528000c2 	mov	w2, #0x6                   	// #6
   813f4:	528006c4 	mov	w4, #0x36                  	// #54
   813f8:	52800143 	mov	w3, #0xa                   	// #10
   813fc:	f0000041 	adrp	x1, 8c000 <VectorTable>
   81400:	913ae021 	add	x1, x1, #0xeb8
   81404:	f9000001 	str	x1, [x0]
   81408:	b9000804 	str	w4, [x0, #8]
   8140c:	b9001403 	str	w3, [x0, #20]
   81410:	a9027c1f 	stp	xzr, xzr, [x0, #32]
   81414:	29070802 	stp	w2, w2, [x0, #56]
   81418:	d65f03c0 	ret
   8141c:	d503201f 	nop

0000000000081420 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
   81420:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81424:	f0000044 	adrp	x4, 8c000 <VectorTable>
   81428:	913ae084 	add	x4, x4, #0xeb8
   8142c:	910003fd 	mov	x29, sp
   81430:	a90153f3 	stp	x19, x20, [sp, #16]
   81434:	528000c5 	mov	w5, #0x6                   	// #6
   81438:	528006c7 	mov	w7, #0x36                  	// #54
   8143c:	52800146 	mov	w6, #0xa                   	// #10
   81440:	f9000004 	str	x4, [x0]
   81444:	2a0203f4 	mov	w20, w2
   81448:	b9000807 	str	w7, [x0, #8]
   8144c:	aa0003f3 	mov	x19, x0
   81450:	b9001406 	str	w6, [x0, #20]
   81454:	a9027c03 	stp	x3, xzr, [x0, #32]
   81458:	29071405 	stp	w5, w5, [x0, #56]
   8145c:	94000011 	bl	814a0 <CGPIOPin::AssignPin(unsigned int)>
   81460:	2a1403e1 	mov	w1, w20
   81464:	aa1303e0 	mov	x0, x19
   81468:	a94153f3 	ldp	x19, x20, [sp, #16]
   8146c:	52800022 	mov	w2, #0x1                   	// #1
   81470:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81474:	14000033 	b	81540 <CGPIOPin::SetMode(TGPIOMode, bool)>
   81478:	d503201f 	nop
   8147c:	d503201f 	nop

0000000000081480 <CGPIOPin::~CGPIOPin()>:
   81480:	d65f03c0 	ret
   81484:	d503201f 	nop
   81488:	d503201f 	nop
   8148c:	d503201f 	nop

0000000000081490 <CGPIOPin::~CGPIOPin()>:
   81490:	d2800801 	mov	x1, #0x40                  	// #64
   81494:	14001ad3 	b	87fe0 <operator delete(void*, unsigned long)>
   81498:	d503201f 	nop
   8149c:	d503201f 	nop

00000000000814a0 <CGPIOPin::AssignPin(unsigned int)>:
   814a0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   814a4:	910003fd 	mov	x29, sp
   814a8:	a90153f3 	stp	x19, x20, [sp, #16]
   814ac:	aa0003f4 	mov	x20, x0
   814b0:	b9400800 	ldr	w0, [x0, #8]
   814b4:	2a0103f3 	mov	w19, w1
   814b8:	7100d81f 	cmp	w0, #0x36
   814bc:	540000c0 	b.eq	814d4 <CGPIOPin::AssignPin(unsigned int)+0x34>  // b.none
   814c0:	f0000041 	adrp	x1, 8c000 <VectorTable>
   814c4:	913b2021 	add	x1, x1, #0xec8
   814c8:	52800802 	mov	w2, #0x40                  	// #64
   814cc:	91004020 	add	x0, x1, #0x10
   814d0:	94001c58 	bl	88630 <assertion_failed>
   814d4:	b9000a93 	str	w19, [x20, #8]
   814d8:	7100d67f 	cmp	w19, #0x35
   814dc:	54000148 	b.hi	81504 <CGPIOPin::AssignPin(unsigned int)+0x64>  // b.pmore
   814e0:	53057e61 	lsr	w1, w19, #5
   814e4:	12001273 	and	w19, w19, #0x1f
   814e8:	52800020 	mov	w0, #0x1                   	// #1
   814ec:	1ad32013 	lsl	w19, w0, w19
   814f0:	531e7421 	lsl	w1, w1, #2
   814f4:	2901ce81 	stp	w1, w19, [x20, #12]
   814f8:	a94153f3 	ldp	x19, x20, [sp, #16]
   814fc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81500:	d65f03c0 	ret
   81504:	940006e4 	bl	83094 <CMachineInfo::Get()>
   81508:	2a1303e1 	mov	w1, w19
   8150c:	9400062d 	bl	82dc0 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
   81510:	b9000a80 	str	w0, [x20, #8]
   81514:	2a0003f3 	mov	w19, w0
   81518:	7100d41f 	cmp	w0, #0x35
   8151c:	54fffe29 	b.ls	814e0 <CGPIOPin::AssignPin(unsigned int)+0x40>  // b.plast
   81520:	f0000041 	adrp	x1, 8c000 <VectorTable>
   81524:	913b2021 	add	x1, x1, #0xec8
   81528:	528008e2 	mov	w2, #0x47                  	// #71
   8152c:	9100a020 	add	x0, x1, #0x28
   81530:	94001c40 	bl	88630 <assertion_failed>
   81534:	b9400a93 	ldr	w19, [x20, #8]
   81538:	17ffffea 	b	814e0 <CGPIOPin::AssignPin(unsigned int)+0x40>
   8153c:	d503201f 	nop

0000000000081540 <CGPIOPin::SetMode(TGPIOMode, bool)>:
   81540:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   81544:	7100243f 	cmp	w1, #0x9
   81548:	910003fd 	mov	x29, sp
   8154c:	a90153f3 	stp	x19, x20, [sp, #16]
   81550:	2a0103f3 	mov	w19, w1
   81554:	a9025bf5 	stp	x21, x22, [sp, #32]
   81558:	aa0003f4 	mov	x20, x0
   8155c:	12001c56 	and	w22, w2, #0xff
   81560:	2a0103f5 	mov	w21, w1
   81564:	5400082c 	b.gt	81668 <CGPIOPin::SetMode(TGPIOMode, bool)+0x128>
   81568:	b9001693 	str	w19, [x20, #20]
   8156c:	51001260 	sub	w0, w19, #0x4
   81570:	7100141f 	cmp	w0, #0x5
   81574:	54000108 	b.hi	81594 <CGPIOPin::SetMode(TGPIOMode, bool)+0x54>  // b.pmore
   81578:	35000856 	cbnz	w22, 81680 <CGPIOPin::SetMode(TGPIOMode, bool)+0x140>
   8157c:	510012a1 	sub	w1, w21, #0x4
   81580:	aa1403e0 	mov	x0, x20
   81584:	a94153f3 	ldp	x19, x20, [sp, #16]
   81588:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8158c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   81590:	14000294 	b	81fe0 <CGPIOPin::SetAlternateFunction(unsigned int)>
   81594:	f9001bb7 	str	x23, [x29, #48]
   81598:	710002df 	cmp	w22, #0x0
   8159c:	7a411a60 	ccmp	w19, #0x1, #0x0, ne  // ne = any
   815a0:	54000a00 	b.eq	816e0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1a0>  // b.none
   815a4:	b9400a81 	ldr	w1, [x20, #8]
   815a8:	7100d43f 	cmp	w1, #0x35
   815ac:	54000848 	b.hi	816b4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x174>  // b.pmore
   815b0:	529999b3 	mov	w19, #0xcccd                	// #52429
   815b4:	72b99993 	movk	w19, #0xcccc, lsl #16
   815b8:	52800142 	mov	w2, #0xa                   	// #10
   815bc:	d0000077 	adrp	x23, 8f000 <vtable for CDevice+0x720>
   815c0:	b9453ae0 	ldr	w0, [x23, #1336]
   815c4:	9bb37c33 	umull	x19, w1, w19
   815c8:	52a1f915 	mov	w21, #0xfc80000             	// #264765440
   815cc:	d363fe73 	lsr	x19, x19, #35
   815d0:	0b150275 	add	w21, w19, w21
   815d4:	1b028673 	msub	w19, w19, w2, w1
   815d8:	531e76b5 	lsl	w21, w21, #2
   815dc:	0b130673 	add	w19, w19, w19, lsl #1
   815e0:	35000780 	cbnz	w0, 816d0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x190>
   815e4:	b9401680 	ldr	w0, [x20, #20]
   815e8:	528000e1 	mov	w1, #0x7                   	// #7
   815ec:	b94002a2 	ldr	w2, [x21]
   815f0:	1ad32021 	lsl	w1, w1, w19
   815f4:	7100041f 	cmp	w0, #0x1
   815f8:	1a9f17e0 	cset	w0, eq  // eq = none
   815fc:	0a210041 	bic	w1, w2, w1
   81600:	1ad32013 	lsl	w19, w0, w19
   81604:	2a010273 	orr	w19, w19, w1
   81608:	b90002b3 	str	w19, [x21]
   8160c:	b9453ae0 	ldr	w0, [x23, #1336]
   81610:	350004c0 	cbnz	w0, 816a8 <CGPIOPin::SetMode(TGPIOMode, bool)+0x168>
   81614:	34000216 	cbz	w22, 81654 <CGPIOPin::SetMode(TGPIOMode, bool)+0x114>
   81618:	b9401681 	ldr	w1, [x20, #20]
   8161c:	7100043f 	cmp	w1, #0x1
   81620:	54000680 	b.eq	816f0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1b0>  // b.none
   81624:	340005a1 	cbz	w1, 816d8 <CGPIOPin::SetMode(TGPIOMode, bool)+0x198>
   81628:	7100083f 	cmp	w1, #0x2
   8162c:	54000080 	b.eq	8163c <CGPIOPin::SetMode(TGPIOMode, bool)+0xfc>  // b.none
   81630:	71000c3f 	cmp	w1, #0x3
   81634:	54000101 	b.ne	81654 <CGPIOPin::SetMode(TGPIOMode, bool)+0x114>  // b.any
   81638:	52800021 	mov	w1, #0x1                   	// #1
   8163c:	aa1403e0 	mov	x0, x20
   81640:	f9401bb7 	ldr	x23, [x29, #48]
   81644:	a94153f3 	ldp	x19, x20, [sp, #16]
   81648:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8164c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   81650:	14000234 	b	81f20 <CGPIOPin::SetPullUpMode(unsigned int)>
   81654:	a94153f3 	ldp	x19, x20, [sp, #16]
   81658:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8165c:	f9401bb7 	ldr	x23, [x29, #48]
   81660:	a8c47bfd 	ldp	x29, x30, [sp], #64
   81664:	d65f03c0 	ret
   81668:	f0000041 	adrp	x1, 8c000 <VectorTable>
   8166c:	913b2021 	add	x1, x1, #0xec8
   81670:	528009e2 	mov	w2, #0x4f                  	// #79
   81674:	91010020 	add	x0, x1, #0x40
   81678:	94001bee 	bl	88630 <assertion_failed>
   8167c:	17ffffbb 	b	81568 <CGPIOPin::SetMode(TGPIOMode, bool)+0x28>
   81680:	aa1403e0 	mov	x0, x20
   81684:	52800001 	mov	w1, #0x0                   	// #0
   81688:	94000226 	bl	81f20 <CGPIOPin::SetPullUpMode(unsigned int)>
   8168c:	b9401695 	ldr	w21, [x20, #20]
   81690:	aa1403e0 	mov	x0, x20
   81694:	510012a1 	sub	w1, w21, #0x4
   81698:	a94153f3 	ldp	x19, x20, [sp, #16]
   8169c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   816a0:	a8c47bfd 	ldp	x29, x30, [sp], #64
   816a4:	1400024f 	b	81fe0 <CGPIOPin::SetAlternateFunction(unsigned int)>
   816a8:	94001832 	bl	87770 <LeaveCritical>
   816ac:	35fffb76 	cbnz	w22, 81618 <CGPIOPin::SetMode(TGPIOMode, bool)+0xd8>
   816b0:	17ffffe9 	b	81654 <CGPIOPin::SetMode(TGPIOMode, bool)+0x114>
   816b4:	f0000041 	adrp	x1, 8c000 <VectorTable>
   816b8:	913b2021 	add	x1, x1, #0xec8
   816bc:	9100a020 	add	x0, x1, #0x28
   816c0:	52800d02 	mov	w2, #0x68                  	// #104
   816c4:	94001bdb 	bl	88630 <assertion_failed>
   816c8:	b9400a81 	ldr	w1, [x20, #8]
   816cc:	17ffffb9 	b	815b0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x70>
   816d0:	940017f0 	bl	87690 <EnterCritical>
   816d4:	17ffffc4 	b	815e4 <CGPIOPin::SetMode(TGPIOMode, bool)+0xa4>
   816d8:	52800001 	mov	w1, #0x0                   	// #0
   816dc:	17ffffd8 	b	8163c <CGPIOPin::SetMode(TGPIOMode, bool)+0xfc>
   816e0:	52800001 	mov	w1, #0x0                   	// #0
   816e4:	aa1403e0 	mov	x0, x20
   816e8:	9400020e 	bl	81f20 <CGPIOPin::SetPullUpMode(unsigned int)>
   816ec:	17ffffae 	b	815a4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x64>
   816f0:	aa1403e0 	mov	x0, x20
   816f4:	f9401bb7 	ldr	x23, [x29, #48]
   816f8:	a94153f3 	ldp	x19, x20, [sp, #16]
   816fc:	52800001 	mov	w1, #0x0                   	// #0
   81700:	a9425bf5 	ldp	x21, x22, [sp, #32]
   81704:	a8c47bfd 	ldp	x29, x30, [sp], #64
   81708:	14000002 	b	81710 <CGPIOPin::Write(unsigned int)>
   8170c:	d503201f 	nop

0000000000081710 <CGPIOPin::Write(unsigned int)>:
   81710:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81714:	910003fd 	mov	x29, sp
   81718:	a90153f3 	stp	x19, x20, [sp, #16]
   8171c:	aa0003f3 	mov	x19, x0
   81720:	b9400800 	ldr	w0, [x0, #8]
   81724:	2a0103f4 	mov	w20, w1
   81728:	7100d41f 	cmp	w0, #0x35
   8172c:	540004e8 	b.hi	817c8 <CGPIOPin::Write(unsigned int)+0xb8>  // b.pmore
   81730:	b9401660 	ldr	w0, [x19, #20]
   81734:	71000c1f 	cmp	w0, #0x3
   81738:	540003cc 	b.gt	817b0 <CGPIOPin::Write(unsigned int)+0xa0>
   8173c:	7100069f 	cmp	w20, #0x1
   81740:	540001c8 	b.hi	81778 <CGPIOPin::Write(unsigned int)+0x68>  // b.pmore
   81744:	7100029f 	cmp	w20, #0x0
   81748:	52800501 	mov	w1, #0x28                  	// #40
   8174c:	72a7e401 	movk	w1, #0x3f20, lsl #16
   81750:	52800380 	mov	w0, #0x1c                  	// #28
   81754:	72a7e400 	movk	w0, #0x3f20, lsl #16
   81758:	1a811000 	csel	w0, w0, w1, ne  // ne = any
   8175c:	b9001a74 	str	w20, [x19, #24]
   81760:	29418662 	ldp	w2, w1, [x19, #12]
   81764:	a94153f3 	ldp	x19, x20, [sp, #16]
   81768:	0b020000 	add	w0, w0, w2
   8176c:	b9000001 	str	w1, [x0]
   81770:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81774:	d65f03c0 	ret
   81778:	f0000041 	adrp	x1, 8c000 <VectorTable>
   8177c:	913b2021 	add	x1, x1, #0xec8
   81780:	91020020 	add	x0, x1, #0x80
   81784:	52801302 	mov	w2, #0x98                  	// #152
   81788:	94001baa 	bl	88630 <assertion_failed>
   8178c:	b9001a74 	str	w20, [x19, #24]
   81790:	29418662 	ldp	w2, w1, [x19, #12]
   81794:	52800380 	mov	w0, #0x1c                  	// #28
   81798:	72a7e400 	movk	w0, #0x3f20, lsl #16
   8179c:	0b020000 	add	w0, w0, w2
   817a0:	a94153f3 	ldp	x19, x20, [sp, #16]
   817a4:	b9000001 	str	w1, [x0]
   817a8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   817ac:	d65f03c0 	ret
   817b0:	f0000041 	adrp	x1, 8c000 <VectorTable>
   817b4:	913b2021 	add	x1, x1, #0xec8
   817b8:	52801282 	mov	w2, #0x94                  	// #148
   817bc:	91016020 	add	x0, x1, #0x58
   817c0:	94001b9c 	bl	88630 <assertion_failed>
   817c4:	17ffffde 	b	8173c <CGPIOPin::Write(unsigned int)+0x2c>
   817c8:	f0000041 	adrp	x1, 8c000 <VectorTable>
   817cc:	913b2021 	add	x1, x1, #0xec8
   817d0:	52801222 	mov	w2, #0x91                  	// #145
   817d4:	9100a020 	add	x0, x1, #0x28
   817d8:	94001b96 	bl	88630 <assertion_failed>
   817dc:	17ffffd5 	b	81730 <CGPIOPin::Write(unsigned int)+0x20>

00000000000817e0 <CGPIOPin::Read() const>:
   817e0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   817e4:	910003fd 	mov	x29, sp
   817e8:	f9000bf3 	str	x19, [sp, #16]
   817ec:	aa0003f3 	mov	x19, x0
   817f0:	b9400800 	ldr	w0, [x0, #8]
   817f4:	7100d41f 	cmp	w0, #0x35
   817f8:	54000208 	b.hi	81838 <CGPIOPin::Read() const+0x58>  // b.pmore
   817fc:	b9401660 	ldr	w0, [x19, #20]
   81800:	51000801 	sub	w1, w0, #0x2
   81804:	7100001f 	cmp	w0, #0x0
   81808:	7a411820 	ccmp	w1, #0x1, #0x0, ne  // ne = any
   8180c:	540002a8 	b.hi	81860 <CGPIOPin::Read() const+0x80>  // b.pmore
   81810:	29418660 	ldp	w0, w1, [x19, #12]
   81814:	52800682 	mov	w2, #0x34                  	// #52
   81818:	72a7e402 	movk	w2, #0x3f20, lsl #16
   8181c:	0b020000 	add	w0, w0, w2
   81820:	f9400bf3 	ldr	x19, [sp, #16]
   81824:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81828:	b9400000 	ldr	w0, [x0]
   8182c:	6a01001f 	tst	w0, w1
   81830:	1a9f07e0 	cset	w0, ne  // ne = any
   81834:	d65f03c0 	ret
   81838:	f0000041 	adrp	x1, 8c000 <VectorTable>
   8183c:	913b2021 	add	x1, x1, #0xec8
   81840:	9100a020 	add	x0, x1, #0x28
   81844:	52801482 	mov	w2, #0xa4                  	// #164
   81848:	94001b7a 	bl	88630 <assertion_failed>
   8184c:	b9401660 	ldr	w0, [x19, #20]
   81850:	51000801 	sub	w1, w0, #0x2
   81854:	7100001f 	cmp	w0, #0x0
   81858:	7a411820 	ccmp	w1, #0x1, #0x0, ne  // ne = any
   8185c:	54fffda9 	b.ls	81810 <CGPIOPin::Read() const+0x30>  // b.plast
   81860:	f0000041 	adrp	x1, 8c000 <VectorTable>
   81864:	913b2021 	add	x1, x1, #0xec8
   81868:	52801502 	mov	w2, #0xa8                  	// #168
   8186c:	91028020 	add	x0, x1, #0xa0
   81870:	94001b70 	bl	88630 <assertion_failed>
   81874:	17ffffe7 	b	81810 <CGPIOPin::Read() const+0x30>
   81878:	d503201f 	nop
   8187c:	d503201f 	nop

0000000000081880 <CGPIOPin::Invert()>:
   81880:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81884:	910003fd 	mov	x29, sp
   81888:	f9000bf3 	str	x19, [sp, #16]
   8188c:	aa0003f3 	mov	x19, x0
   81890:	b9401400 	ldr	w0, [x0, #20]
   81894:	7100041f 	cmp	w0, #0x1
   81898:	540000c0 	b.eq	818b0 <CGPIOPin::Invert()+0x30>  // b.none
   8189c:	f0000041 	adrp	x1, 8c000 <VectorTable>
   818a0:	913b2021 	add	x1, x1, #0xec8
   818a4:	528016a2 	mov	w2, #0xb5                  	// #181
   818a8:	91040020 	add	x0, x1, #0x100
   818ac:	94001b61 	bl	88630 <assertion_failed>
   818b0:	b9401a61 	ldr	w1, [x19, #24]
   818b4:	aa1303e0 	mov	x0, x19
   818b8:	f9400bf3 	ldr	x19, [sp, #16]
   818bc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   818c0:	52000021 	eor	w1, w1, #0x1
   818c4:	17ffff93 	b	81710 <CGPIOPin::Write(unsigned int)>
   818c8:	d503201f 	nop
   818cc:	d503201f 	nop

00000000000818d0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)>:
   818d0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   818d4:	910003fd 	mov	x29, sp
   818d8:	a90153f3 	stp	x19, x20, [sp, #16]
   818dc:	aa0003f3 	mov	x19, x0
   818e0:	b9401400 	ldr	w0, [x0, #20]
   818e4:	aa0103f4 	mov	x20, x1
   818e8:	f90013f5 	str	x21, [sp, #32]
   818ec:	aa0203f5 	mov	x21, x2
   818f0:	51000801 	sub	w1, w0, #0x2
   818f4:	7100001f 	cmp	w0, #0x0
   818f8:	7a411820 	ccmp	w1, #0x1, #0x0, ne  // ne = any
   818fc:	54000508 	b.hi	8199c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xcc>  // b.pmore
   81900:	b9403a60 	ldr	w0, [x19, #56]
   81904:	7100181f 	cmp	w0, #0x6
   81908:	540000c0 	b.eq	81920 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x50>  // b.none
   8190c:	f0000041 	adrp	x1, 8c000 <VectorTable>
   81910:	913b2021 	add	x1, x1, #0xec8
   81914:	52801802 	mov	w2, #0xc0                  	// #192
   81918:	91048020 	add	x0, x1, #0x120
   8191c:	94001b45 	bl	88630 <assertion_failed>
   81920:	b9403e60 	ldr	w0, [x19, #60]
   81924:	7100181f 	cmp	w0, #0x6
   81928:	54000221 	b.ne	8196c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x9c>  // b.any
   8192c:	b40002d4 	cbz	x20, 81984 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xb4>
   81930:	f9401660 	ldr	x0, [x19, #40]
   81934:	b40000c0 	cbz	x0, 8194c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x7c>
   81938:	f0000041 	adrp	x1, 8c000 <VectorTable>
   8193c:	913b2021 	add	x1, x1, #0xec8
   81940:	52801882 	mov	w2, #0xc4                  	// #196
   81944:	91060020 	add	x0, x1, #0x180
   81948:	94001b3a 	bl	88630 <assertion_failed>
   8194c:	f9401260 	ldr	x0, [x19, #32]
   81950:	a902d674 	stp	x20, x21, [x19, #40]
   81954:	b4000300 	cbz	x0, 819b4 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
   81958:	aa1303e1 	mov	x1, x19
   8195c:	f94013f5 	ldr	x21, [sp, #32]
   81960:	a94153f3 	ldp	x19, x20, [sp, #16]
   81964:	a8c37bfd 	ldp	x29, x30, [sp], #48
   81968:	1400218a 	b	89f90 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
   8196c:	f0000041 	adrp	x1, 8c000 <VectorTable>
   81970:	913b2021 	add	x1, x1, #0xec8
   81974:	52801822 	mov	w2, #0xc1                  	// #193
   81978:	91052020 	add	x0, x1, #0x148
   8197c:	94001b2d 	bl	88630 <assertion_failed>
   81980:	b5fffd94 	cbnz	x20, 81930 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x60>
   81984:	f0000041 	adrp	x1, 8c000 <VectorTable>
   81988:	913b2021 	add	x1, x1, #0xec8
   8198c:	52801862 	mov	w2, #0xc3                  	// #195
   81990:	9105c020 	add	x0, x1, #0x170
   81994:	94001b27 	bl	88630 <assertion_failed>
   81998:	17ffffe6 	b	81930 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x60>
   8199c:	f0000041 	adrp	x1, 8c000 <VectorTable>
   819a0:	913b2021 	add	x1, x1, #0xec8
   819a4:	528017c2 	mov	w2, #0xbe                  	// #190
   819a8:	91028020 	add	x0, x1, #0xa0
   819ac:	94001b21 	bl	88630 <assertion_failed>
   819b0:	17ffffd4 	b	81900 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x30>
   819b4:	f0000041 	adrp	x1, 8c000 <VectorTable>
   819b8:	913b2021 	add	x1, x1, #0xec8
   819bc:	91064020 	add	x0, x1, #0x190
   819c0:	52801922 	mov	w2, #0xc9                  	// #201
   819c4:	94001b1b 	bl	88630 <assertion_failed>
   819c8:	f94013f5 	ldr	x21, [sp, #32]
   819cc:	f9401260 	ldr	x0, [x19, #32]
   819d0:	aa1303e1 	mov	x1, x19
   819d4:	a94153f3 	ldp	x19, x20, [sp, #16]
   819d8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   819dc:	1400216d 	b	89f90 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>

00000000000819e0 <CGPIOPin::DisconnectInterrupt()>:
   819e0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   819e4:	910003fd 	mov	x29, sp
   819e8:	f9000bf3 	str	x19, [sp, #16]
   819ec:	aa0003f3 	mov	x19, x0
   819f0:	b9401400 	ldr	w0, [x0, #20]
   819f4:	51000801 	sub	w1, w0, #0x2
   819f8:	7100001f 	cmp	w0, #0x0
   819fc:	7a411820 	ccmp	w1, #0x1, #0x0, ne  // ne = any
   81a00:	54000348 	b.hi	81a68 <CGPIOPin::DisconnectInterrupt()+0x88>  // b.pmore
   81a04:	b9403a60 	ldr	w0, [x19, #56]
   81a08:	7100181f 	cmp	w0, #0x6
   81a0c:	540000c0 	b.eq	81a24 <CGPIOPin::DisconnectInterrupt()+0x44>  // b.none
   81a10:	f0000041 	adrp	x1, 8c000 <VectorTable>
   81a14:	913b2021 	add	x1, x1, #0xec8
   81a18:	52801a62 	mov	w2, #0xd3                  	// #211
   81a1c:	91048020 	add	x0, x1, #0x120
   81a20:	94001b04 	bl	88630 <assertion_failed>
   81a24:	b9403e60 	ldr	w0, [x19, #60]
   81a28:	7100181f 	cmp	w0, #0x6
   81a2c:	540000c0 	b.eq	81a44 <CGPIOPin::DisconnectInterrupt()+0x64>  // b.none
   81a30:	f0000041 	adrp	x1, 8c000 <VectorTable>
   81a34:	913b2021 	add	x1, x1, #0xec8
   81a38:	52801a82 	mov	w2, #0xd4                  	// #212
   81a3c:	91052020 	add	x0, x1, #0x148
   81a40:	94001afc 	bl	88630 <assertion_failed>
   81a44:	f9401660 	ldr	x0, [x19, #40]
   81a48:	b4000300 	cbz	x0, 81aa8 <CGPIOPin::DisconnectInterrupt()+0xc8>
   81a4c:	f9401260 	ldr	x0, [x19, #32]
   81a50:	f900167f 	str	xzr, [x19, #40]
   81a54:	b4000160 	cbz	x0, 81a80 <CGPIOPin::DisconnectInterrupt()+0xa0>
   81a58:	aa1303e1 	mov	x1, x19
   81a5c:	f9400bf3 	ldr	x19, [sp, #16]
   81a60:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81a64:	1400217f 	b	8a060 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
   81a68:	f0000041 	adrp	x1, 8c000 <VectorTable>
   81a6c:	913b2021 	add	x1, x1, #0xec8
   81a70:	52801a22 	mov	w2, #0xd1                  	// #209
   81a74:	91028020 	add	x0, x1, #0xa0
   81a78:	94001aee 	bl	88630 <assertion_failed>
   81a7c:	17ffffe2 	b	81a04 <CGPIOPin::DisconnectInterrupt()+0x24>
   81a80:	f0000041 	adrp	x1, 8c000 <VectorTable>
   81a84:	913b2021 	add	x1, x1, #0xec8
   81a88:	91064020 	add	x0, x1, #0x190
   81a8c:	52801b22 	mov	w2, #0xd9                  	// #217
   81a90:	94001ae8 	bl	88630 <assertion_failed>
   81a94:	f9401260 	ldr	x0, [x19, #32]
   81a98:	aa1303e1 	mov	x1, x19
   81a9c:	f9400bf3 	ldr	x19, [sp, #16]
   81aa0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81aa4:	1400216f 	b	8a060 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
   81aa8:	f0000041 	adrp	x1, 8c000 <VectorTable>
   81aac:	913b2021 	add	x1, x1, #0xec8
   81ab0:	52801ac2 	mov	w2, #0xd6                  	// #214
   81ab4:	91068020 	add	x0, x1, #0x1a0
   81ab8:	94001ade 	bl	88630 <assertion_failed>
   81abc:	17ffffe4 	b	81a4c <CGPIOPin::DisconnectInterrupt()+0x6c>

0000000000081ac0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
   81ac0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   81ac4:	910003fd 	mov	x29, sp
   81ac8:	a90153f3 	stp	x19, x20, [sp, #16]
   81acc:	aa0003f4 	mov	x20, x0
   81ad0:	b9401400 	ldr	w0, [x0, #20]
   81ad4:	2a0103f3 	mov	w19, w1
   81ad8:	f90013f5 	str	x21, [sp, #32]
   81adc:	51000801 	sub	w1, w0, #0x2
   81ae0:	7100001f 	cmp	w0, #0x0
   81ae4:	7a411820 	ccmp	w1, #0x1, #0x0, ne  // ne = any
   81ae8:	54000708 	b.hi	81bc8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x108>  // b.pmore
   81aec:	f9401680 	ldr	x0, [x20, #40]
   81af0:	b40007a0 	cbz	x0, 81be4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x124>
   81af4:	b9403a80 	ldr	w0, [x20, #56]
   81af8:	7100181f 	cmp	w0, #0x6
   81afc:	540000c0 	b.eq	81b14 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x54>  // b.none
   81b00:	f0000041 	adrp	x1, 8c000 <VectorTable>
   81b04:	913b2021 	add	x1, x1, #0xec8
   81b08:	52801c82 	mov	w2, #0xe4                  	// #228
   81b0c:	91048020 	add	x0, x1, #0x120
   81b10:	94001ac8 	bl	88630 <assertion_failed>
   81b14:	7100167f 	cmp	w19, #0x5
   81b18:	540003cc 	b.gt	81b90 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xd0>
   81b1c:	b9403e80 	ldr	w0, [x20, #60]
   81b20:	6b13001f 	cmp	w0, w19
   81b24:	54000460 	b.eq	81bb0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf0>  // b.none
   81b28:	b9400e81 	ldr	w1, [x20, #12]
   81b2c:	d0000075 	adrp	x21, 8f000 <vtable for CDevice+0x720>
   81b30:	b9453aa0 	ldr	w0, [x21, #1336]
   81b34:	52800982 	mov	w2, #0x4c                  	// #76
   81b38:	72a7e402 	movk	w2, #0x3f20, lsl #16
   81b3c:	0b020021 	add	w1, w1, w2
   81b40:	b9003a93 	str	w19, [x20, #56]
   81b44:	52800182 	mov	w2, #0xc                   	// #12
   81b48:	1b020673 	madd	w19, w19, w2, w1
   81b4c:	350001e0 	cbnz	w0, 81b88 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xc8>
   81b50:	b9400260 	ldr	w0, [x19]
   81b54:	b9401281 	ldr	w1, [x20, #16]
   81b58:	2a010000 	orr	w0, w0, w1
   81b5c:	b9000260 	str	w0, [x19]
   81b60:	b9453aa0 	ldr	w0, [x21, #1336]
   81b64:	350000a0 	cbnz	w0, 81b78 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xb8>
   81b68:	a94153f3 	ldp	x19, x20, [sp, #16]
   81b6c:	f94013f5 	ldr	x21, [sp, #32]
   81b70:	a8c37bfd 	ldp	x29, x30, [sp], #48
   81b74:	d65f03c0 	ret
   81b78:	a94153f3 	ldp	x19, x20, [sp, #16]
   81b7c:	f94013f5 	ldr	x21, [sp, #32]
   81b80:	a8c37bfd 	ldp	x29, x30, [sp], #48
   81b84:	140016fb 	b	87770 <LeaveCritical>
   81b88:	940016c2 	bl	87690 <EnterCritical>
   81b8c:	17fffff1 	b	81b50 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x90>
   81b90:	f0000041 	adrp	x1, 8c000 <VectorTable>
   81b94:	913b2021 	add	x1, x1, #0xec8
   81b98:	9106c020 	add	x0, x1, #0x1b0
   81b9c:	52801ca2 	mov	w2, #0xe5                  	// #229
   81ba0:	94001aa4 	bl	88630 <assertion_failed>
   81ba4:	b9403e80 	ldr	w0, [x20, #60]
   81ba8:	6b13001f 	cmp	w0, w19
   81bac:	54fffbe1 	b.ne	81b28 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x68>  // b.any
   81bb0:	f0000041 	adrp	x1, 8c000 <VectorTable>
   81bb4:	913b2021 	add	x1, x1, #0xec8
   81bb8:	52801cc2 	mov	w2, #0xe6                  	// #230
   81bbc:	91076020 	add	x0, x1, #0x1d8
   81bc0:	94001a9c 	bl	88630 <assertion_failed>
   81bc4:	17ffffd9 	b	81b28 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x68>
   81bc8:	f0000041 	adrp	x1, 8c000 <VectorTable>
   81bcc:	913b2021 	add	x1, x1, #0xec8
   81bd0:	91028020 	add	x0, x1, #0xa0
   81bd4:	52801c22 	mov	w2, #0xe1                  	// #225
   81bd8:	94001a96 	bl	88630 <assertion_failed>
   81bdc:	f9401680 	ldr	x0, [x20, #40]
   81be0:	b5fff8a0 	cbnz	x0, 81af4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x34>
   81be4:	f0000041 	adrp	x1, 8c000 <VectorTable>
   81be8:	913b2021 	add	x1, x1, #0xec8
   81bec:	52801c42 	mov	w2, #0xe2                  	// #226
   81bf0:	91068020 	add	x0, x1, #0x1a0
   81bf4:	94001a8f 	bl	88630 <assertion_failed>
   81bf8:	17ffffbf 	b	81af4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x34>
   81bfc:	d503201f 	nop

0000000000081c00 <CGPIOPin::DisableInterrupt()>:
   81c00:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   81c04:	910003fd 	mov	x29, sp
   81c08:	a90153f3 	stp	x19, x20, [sp, #16]
   81c0c:	aa0003f3 	mov	x19, x0
   81c10:	b9401400 	ldr	w0, [x0, #20]
   81c14:	f90013f5 	str	x21, [sp, #32]
   81c18:	51000801 	sub	w1, w0, #0x2
   81c1c:	7100001f 	cmp	w0, #0x0
   81c20:	7a411820 	ccmp	w1, #0x1, #0x0, ne  // ne = any
   81c24:	54000468 	b.hi	81cb0 <CGPIOPin::DisableInterrupt()+0xb0>  // b.pmore
   81c28:	b9403a61 	ldr	w1, [x19, #56]
   81c2c:	7100143f 	cmp	w1, #0x5
   81c30:	5400032c 	b.gt	81c94 <CGPIOPin::DisableInterrupt()+0x94>
   81c34:	b9400e74 	ldr	w20, [x19, #12]
   81c38:	d0000075 	adrp	x21, 8f000 <vtable for CDevice+0x720>
   81c3c:	b9453aa0 	ldr	w0, [x21, #1336]
   81c40:	52800982 	mov	w2, #0x4c                  	// #76
   81c44:	72a7e402 	movk	w2, #0x3f20, lsl #16
   81c48:	0b020294 	add	w20, w20, w2
   81c4c:	52800182 	mov	w2, #0xc                   	// #12
   81c50:	1b025034 	madd	w20, w1, w2, w20
   81c54:	350001c0 	cbnz	w0, 81c8c <CGPIOPin::DisableInterrupt()+0x8c>
   81c58:	b9401260 	ldr	w0, [x19, #16]
   81c5c:	b9400281 	ldr	w1, [x20]
   81c60:	0a200020 	bic	w0, w1, w0
   81c64:	b9000280 	str	w0, [x20]
   81c68:	b9453aa0 	ldr	w0, [x21, #1336]
   81c6c:	34000040 	cbz	w0, 81c74 <CGPIOPin::DisableInterrupt()+0x74>
   81c70:	940016c0 	bl	87770 <LeaveCritical>
   81c74:	f94013f5 	ldr	x21, [sp, #32]
   81c78:	528000c0 	mov	w0, #0x6                   	// #6
   81c7c:	b9003a60 	str	w0, [x19, #56]
   81c80:	a94153f3 	ldp	x19, x20, [sp, #16]
   81c84:	a8c37bfd 	ldp	x29, x30, [sp], #48
   81c88:	d65f03c0 	ret
   81c8c:	94001681 	bl	87690 <EnterCritical>
   81c90:	17fffff2 	b	81c58 <CGPIOPin::DisableInterrupt()+0x58>
   81c94:	f0000041 	adrp	x1, 8c000 <VectorTable>
   81c98:	913b2021 	add	x1, x1, #0xec8
   81c9c:	9107e020 	add	x0, x1, #0x1f8
   81ca0:	52801f22 	mov	w2, #0xf9                  	// #249
   81ca4:	94001a63 	bl	88630 <assertion_failed>
   81ca8:	b9403a61 	ldr	w1, [x19, #56]
   81cac:	17ffffe2 	b	81c34 <CGPIOPin::DisableInterrupt()+0x34>
   81cb0:	f0000041 	adrp	x1, 8c000 <VectorTable>
   81cb4:	913b2021 	add	x1, x1, #0xec8
   81cb8:	52801ee2 	mov	w2, #0xf7                  	// #247
   81cbc:	91028020 	add	x0, x1, #0xa0
   81cc0:	94001a5c 	bl	88630 <assertion_failed>
   81cc4:	17ffffd9 	b	81c28 <CGPIOPin::DisableInterrupt()+0x28>
   81cc8:	d503201f 	nop
   81ccc:	d503201f 	nop

0000000000081cd0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
   81cd0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   81cd4:	910003fd 	mov	x29, sp
   81cd8:	a90153f3 	stp	x19, x20, [sp, #16]
   81cdc:	aa0003f4 	mov	x20, x0
   81ce0:	b9401400 	ldr	w0, [x0, #20]
   81ce4:	2a0103f3 	mov	w19, w1
   81ce8:	f90013f5 	str	x21, [sp, #32]
   81cec:	51000801 	sub	w1, w0, #0x2
   81cf0:	7100001f 	cmp	w0, #0x0
   81cf4:	7a411820 	ccmp	w1, #0x1, #0x0, ne  // ne = any
   81cf8:	54000708 	b.hi	81dd8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x108>  // b.pmore
   81cfc:	f9401680 	ldr	x0, [x20, #40]
   81d00:	b40007a0 	cbz	x0, 81df4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x124>
   81d04:	b9403e80 	ldr	w0, [x20, #60]
   81d08:	7100181f 	cmp	w0, #0x6
   81d0c:	540000c0 	b.eq	81d24 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x54>  // b.none
   81d10:	f0000041 	adrp	x1, 8c000 <VectorTable>
   81d14:	913b2021 	add	x1, x1, #0xec8
   81d18:	528021a2 	mov	w2, #0x10d                 	// #269
   81d1c:	91052020 	add	x0, x1, #0x148
   81d20:	94001a44 	bl	88630 <assertion_failed>
   81d24:	7100167f 	cmp	w19, #0x5
   81d28:	540003cc 	b.gt	81da0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xd0>
   81d2c:	b9403a80 	ldr	w0, [x20, #56]
   81d30:	6b13001f 	cmp	w0, w19
   81d34:	54000460 	b.eq	81dc0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf0>  // b.none
   81d38:	b9400e81 	ldr	w1, [x20, #12]
   81d3c:	d0000075 	adrp	x21, 8f000 <vtable for CDevice+0x720>
   81d40:	b9453aa0 	ldr	w0, [x21, #1336]
   81d44:	52800982 	mov	w2, #0x4c                  	// #76
   81d48:	72a7e402 	movk	w2, #0x3f20, lsl #16
   81d4c:	0b020021 	add	w1, w1, w2
   81d50:	b9003e93 	str	w19, [x20, #60]
   81d54:	52800182 	mov	w2, #0xc                   	// #12
   81d58:	1b020673 	madd	w19, w19, w2, w1
   81d5c:	350001e0 	cbnz	w0, 81d98 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xc8>
   81d60:	b9400260 	ldr	w0, [x19]
   81d64:	b9401281 	ldr	w1, [x20, #16]
   81d68:	2a010000 	orr	w0, w0, w1
   81d6c:	b9000260 	str	w0, [x19]
   81d70:	b9453aa0 	ldr	w0, [x21, #1336]
   81d74:	350000a0 	cbnz	w0, 81d88 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xb8>
   81d78:	a94153f3 	ldp	x19, x20, [sp, #16]
   81d7c:	f94013f5 	ldr	x21, [sp, #32]
   81d80:	a8c37bfd 	ldp	x29, x30, [sp], #48
   81d84:	d65f03c0 	ret
   81d88:	a94153f3 	ldp	x19, x20, [sp, #16]
   81d8c:	f94013f5 	ldr	x21, [sp, #32]
   81d90:	a8c37bfd 	ldp	x29, x30, [sp], #48
   81d94:	14001677 	b	87770 <LeaveCritical>
   81d98:	9400163e 	bl	87690 <EnterCritical>
   81d9c:	17fffff1 	b	81d60 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x90>
   81da0:	f0000041 	adrp	x1, 8c000 <VectorTable>
   81da4:	913b2021 	add	x1, x1, #0xec8
   81da8:	9106c020 	add	x0, x1, #0x1b0
   81dac:	528021c2 	mov	w2, #0x10e                 	// #270
   81db0:	94001a20 	bl	88630 <assertion_failed>
   81db4:	b9403a80 	ldr	w0, [x20, #56]
   81db8:	6b13001f 	cmp	w0, w19
   81dbc:	54fffbe1 	b.ne	81d38 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x68>  // b.any
   81dc0:	f0000041 	adrp	x1, 8c000 <VectorTable>
   81dc4:	913b2021 	add	x1, x1, #0xec8
   81dc8:	528021e2 	mov	w2, #0x10f                 	// #271
   81dcc:	91088020 	add	x0, x1, #0x220
   81dd0:	94001a18 	bl	88630 <assertion_failed>
   81dd4:	17ffffd9 	b	81d38 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x68>
   81dd8:	f0000041 	adrp	x1, 8c000 <VectorTable>
   81ddc:	913b2021 	add	x1, x1, #0xec8
   81de0:	91028020 	add	x0, x1, #0xa0
   81de4:	52802142 	mov	w2, #0x10a                 	// #266
   81de8:	94001a12 	bl	88630 <assertion_failed>
   81dec:	f9401680 	ldr	x0, [x20, #40]
   81df0:	b5fff8a0 	cbnz	x0, 81d04 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x34>
   81df4:	f0000041 	adrp	x1, 8c000 <VectorTable>
   81df8:	913b2021 	add	x1, x1, #0xec8
   81dfc:	52802162 	mov	w2, #0x10b                 	// #267
   81e00:	91068020 	add	x0, x1, #0x1a0
   81e04:	94001a0b 	bl	88630 <assertion_failed>
   81e08:	17ffffbf 	b	81d04 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x34>
   81e0c:	d503201f 	nop

0000000000081e10 <CGPIOPin::DisableInterrupt2()>:
   81e10:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   81e14:	910003fd 	mov	x29, sp
   81e18:	a90153f3 	stp	x19, x20, [sp, #16]
   81e1c:	aa0003f3 	mov	x19, x0
   81e20:	b9401400 	ldr	w0, [x0, #20]
   81e24:	f90013f5 	str	x21, [sp, #32]
   81e28:	51000801 	sub	w1, w0, #0x2
   81e2c:	7100001f 	cmp	w0, #0x0
   81e30:	7a411820 	ccmp	w1, #0x1, #0x0, ne  // ne = any
   81e34:	54000468 	b.hi	81ec0 <CGPIOPin::DisableInterrupt2()+0xb0>  // b.pmore
   81e38:	b9403e61 	ldr	w1, [x19, #60]
   81e3c:	7100143f 	cmp	w1, #0x5
   81e40:	5400032c 	b.gt	81ea4 <CGPIOPin::DisableInterrupt2()+0x94>
   81e44:	b9400e74 	ldr	w20, [x19, #12]
   81e48:	d0000075 	adrp	x21, 8f000 <vtable for CDevice+0x720>
   81e4c:	b9453aa0 	ldr	w0, [x21, #1336]
   81e50:	52800982 	mov	w2, #0x4c                  	// #76
   81e54:	72a7e402 	movk	w2, #0x3f20, lsl #16
   81e58:	0b020294 	add	w20, w20, w2
   81e5c:	52800182 	mov	w2, #0xc                   	// #12
   81e60:	1b025034 	madd	w20, w1, w2, w20
   81e64:	350001c0 	cbnz	w0, 81e9c <CGPIOPin::DisableInterrupt2()+0x8c>
   81e68:	b9401260 	ldr	w0, [x19, #16]
   81e6c:	b9400281 	ldr	w1, [x20]
   81e70:	0a200020 	bic	w0, w1, w0
   81e74:	b9000280 	str	w0, [x20]
   81e78:	b9453aa0 	ldr	w0, [x21, #1336]
   81e7c:	34000040 	cbz	w0, 81e84 <CGPIOPin::DisableInterrupt2()+0x74>
   81e80:	9400163c 	bl	87770 <LeaveCritical>
   81e84:	f94013f5 	ldr	x21, [sp, #32]
   81e88:	528000c0 	mov	w0, #0x6                   	// #6
   81e8c:	b9003e60 	str	w0, [x19, #60]
   81e90:	a94153f3 	ldp	x19, x20, [sp, #16]
   81e94:	a8c37bfd 	ldp	x29, x30, [sp], #48
   81e98:	d65f03c0 	ret
   81e9c:	940015fd 	bl	87690 <EnterCritical>
   81ea0:	17fffff2 	b	81e68 <CGPIOPin::DisableInterrupt2()+0x58>
   81ea4:	f0000041 	adrp	x1, 8c000 <VectorTable>
   81ea8:	913b2021 	add	x1, x1, #0xec8
   81eac:	91090020 	add	x0, x1, #0x240
   81eb0:	52802442 	mov	w2, #0x122                 	// #290
   81eb4:	940019df 	bl	88630 <assertion_failed>
   81eb8:	b9403e61 	ldr	w1, [x19, #60]
   81ebc:	17ffffe2 	b	81e44 <CGPIOPin::DisableInterrupt2()+0x34>
   81ec0:	f0000041 	adrp	x1, 8c000 <VectorTable>
   81ec4:	913b2021 	add	x1, x1, #0xec8
   81ec8:	52802402 	mov	w2, #0x120                 	// #288
   81ecc:	91028020 	add	x0, x1, #0xa0
   81ed0:	940019d8 	bl	88630 <assertion_failed>
   81ed4:	17ffffd9 	b	81e38 <CGPIOPin::DisableInterrupt2()+0x28>
   81ed8:	d503201f 	nop
   81edc:	d503201f 	nop

0000000000081ee0 <CGPIOPin::WriteAll(unsigned int, unsigned int)>:
   81ee0:	6a200022 	bics	w2, w1, w0
   81ee4:	54000080 	b.eq	81ef4 <CGPIOPin::WriteAll(unsigned int, unsigned int)+0x14>  // b.none
   81ee8:	d2800503 	mov	x3, #0x28                  	// #40
   81eec:	f2a7e403 	movk	x3, #0x3f20, lsl #16
   81ef0:	b9000062 	str	w2, [x3]
   81ef4:	6a010000 	ands	w0, w0, w1
   81ef8:	54000080 	b.eq	81f08 <CGPIOPin::WriteAll(unsigned int, unsigned int)+0x28>  // b.none
   81efc:	d2800381 	mov	x1, #0x1c                  	// #28
   81f00:	f2a7e401 	movk	x1, #0x3f20, lsl #16
   81f04:	b9000020 	str	w0, [x1]
   81f08:	d65f03c0 	ret
   81f0c:	d503201f 	nop

0000000000081f10 <CGPIOPin::ReadAll()>:
   81f10:	d2800680 	mov	x0, #0x34                  	// #52
   81f14:	f2a7e400 	movk	x0, #0x3f20, lsl #16
   81f18:	b9400000 	ldr	w0, [x0]
   81f1c:	d65f03c0 	ret

0000000000081f20 <CGPIOPin::SetPullUpMode(unsigned int)>:
   81f20:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   81f24:	52801302 	mov	w2, #0x98                  	// #152
   81f28:	72a7e402 	movk	w2, #0x3f20, lsl #16
   81f2c:	910003fd 	mov	x29, sp
   81f30:	a9025bf5 	stp	x21, x22, [sp, #32]
   81f34:	aa0003f6 	mov	x22, x0
   81f38:	a90153f3 	stp	x19, x20, [sp, #16]
   81f3c:	d0000074 	adrp	x20, 8f000 <vtable for CDevice+0x720>
   81f40:	b9453a80 	ldr	w0, [x20, #1336]
   81f44:	b9400ed3 	ldr	w19, [x22, #12]
   81f48:	f9001bf7 	str	x23, [sp, #48]
   81f4c:	2a0103f7 	mov	w23, w1
   81f50:	0b020273 	add	w19, w19, w2
   81f54:	35000400 	cbnz	w0, 81fd4 <CGPIOPin::SetPullUpMode(unsigned int)+0xb4>
   81f58:	71000aff 	cmp	w23, #0x2
   81f5c:	54000308 	b.hi	81fbc <CGPIOPin::SetPullUpMode(unsigned int)+0x9c>  // b.pmore
   81f60:	d2801295 	mov	x21, #0x94                  	// #148
   81f64:	f2a7e415 	movk	x21, #0x3f20, lsl #16
   81f68:	528000a0 	mov	w0, #0x5                   	// #5
   81f6c:	b90002b7 	str	w23, [x21]
   81f70:	94001220 	bl	867f0 <CTimer::SimpleusDelay(unsigned int)>
   81f74:	b94012c0 	ldr	w0, [x22, #16]
   81f78:	b9000260 	str	w0, [x19]
   81f7c:	528000a0 	mov	w0, #0x5                   	// #5
   81f80:	9400121c 	bl	867f0 <CTimer::SimpleusDelay(unsigned int)>
   81f84:	b90002bf 	str	wzr, [x21]
   81f88:	b900027f 	str	wzr, [x19]
   81f8c:	b9453a80 	ldr	w0, [x20, #1336]
   81f90:	350000c0 	cbnz	w0, 81fa8 <CGPIOPin::SetPullUpMode(unsigned int)+0x88>
   81f94:	a94153f3 	ldp	x19, x20, [sp, #16]
   81f98:	a9425bf5 	ldp	x21, x22, [sp, #32]
   81f9c:	f9401bf7 	ldr	x23, [sp, #48]
   81fa0:	a8c47bfd 	ldp	x29, x30, [sp], #64
   81fa4:	d65f03c0 	ret
   81fa8:	a94153f3 	ldp	x19, x20, [sp, #16]
   81fac:	a9425bf5 	ldp	x21, x22, [sp, #32]
   81fb0:	f9401bf7 	ldr	x23, [sp, #48]
   81fb4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   81fb8:	140015ee 	b	87770 <LeaveCritical>
   81fbc:	f0000041 	adrp	x1, 8c000 <VectorTable>
   81fc0:	913b2021 	add	x1, x1, #0xec8
   81fc4:	52802a82 	mov	w2, #0x154                 	// #340
   81fc8:	9109a020 	add	x0, x1, #0x268
   81fcc:	94001999 	bl	88630 <assertion_failed>
   81fd0:	17ffffe4 	b	81f60 <CGPIOPin::SetPullUpMode(unsigned int)+0x40>
   81fd4:	940015af 	bl	87690 <EnterCritical>
   81fd8:	17ffffe0 	b	81f58 <CGPIOPin::SetPullUpMode(unsigned int)+0x38>
   81fdc:	d503201f 	nop

0000000000081fe0 <CGPIOPin::SetAlternateFunction(unsigned int)>:
   81fe0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   81fe4:	910003fd 	mov	x29, sp
   81fe8:	a90153f3 	stp	x19, x20, [sp, #16]
   81fec:	aa0003f3 	mov	x19, x0
   81ff0:	a9025bf5 	stp	x21, x22, [sp, #32]
   81ff4:	f0000055 	adrp	x21, 8c000 <VectorTable>
   81ff8:	b9400800 	ldr	w0, [x0, #8]
   81ffc:	f9001bf7 	str	x23, [sp, #48]
   82000:	2a0103f7 	mov	w23, w1
   82004:	7100d41f 	cmp	w0, #0x35
   82008:	540005a8 	b.hi	820bc <CGPIOPin::SetAlternateFunction(unsigned int)+0xdc>  // b.pmore
   8200c:	529999b3 	mov	w19, #0xcccd                	// #52429
   82010:	72b99993 	movk	w19, #0xcccc, lsl #16
   82014:	52800141 	mov	w1, #0xa                   	// #10
   82018:	52a1f914 	mov	w20, #0xfc80000             	// #264765440
   8201c:	9bb37c13 	umull	x19, w0, w19
   82020:	710016ff 	cmp	w23, #0x5
   82024:	d363fe73 	lsr	x19, x19, #35
   82028:	0b140274 	add	w20, w19, w20
   8202c:	1b018273 	msub	w19, w19, w1, w0
   82030:	531e7694 	lsl	w20, w20, #2
   82034:	0b130673 	add	w19, w19, w19, lsl #1
   82038:	54000388 	b.hi	820a8 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc8>  // b.pmore
   8203c:	b0000076 	adrp	x22, 8f000 <vtable for CDevice+0x720>
   82040:	b9453ac0 	ldr	w0, [x22, #1336]
   82044:	350002e0 	cbnz	w0, 820a0 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc0>
   82048:	913b22b5 	add	x21, x21, #0xec8
   8204c:	b9400280 	ldr	w0, [x20]
   82050:	9109e2b5 	add	x21, x21, #0x278
   82054:	528000e1 	mov	w1, #0x7                   	// #7
   82058:	1ad32021 	lsl	w1, w1, w19
   8205c:	0a210001 	bic	w1, w0, w1
   82060:	b8775aa0 	ldr	w0, [x21, w23, uxtw #2]
   82064:	1ad32013 	lsl	w19, w0, w19
   82068:	2a010273 	orr	w19, w19, w1
   8206c:	b9000293 	str	w19, [x20]
   82070:	b9453ac0 	ldr	w0, [x22, #1336]
   82074:	350000c0 	cbnz	w0, 8208c <CGPIOPin::SetAlternateFunction(unsigned int)+0xac>
   82078:	a94153f3 	ldp	x19, x20, [sp, #16]
   8207c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   82080:	f9401bf7 	ldr	x23, [sp, #48]
   82084:	a8c47bfd 	ldp	x29, x30, [sp], #64
   82088:	d65f03c0 	ret
   8208c:	a94153f3 	ldp	x19, x20, [sp, #16]
   82090:	a9425bf5 	ldp	x21, x22, [sp, #32]
   82094:	f9401bf7 	ldr	x23, [sp, #48]
   82098:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8209c:	140015b5 	b	87770 <LeaveCritical>
   820a0:	9400157c 	bl	87690 <EnterCritical>
   820a4:	17ffffe9 	b	82048 <CGPIOPin::SetAlternateFunction(unsigned int)+0x68>
   820a8:	913b22a1 	add	x1, x21, #0xec8
   820ac:	52802ca2 	mov	w2, #0x165                 	// #357
   820b0:	910a4020 	add	x0, x1, #0x290
   820b4:	9400195f 	bl	88630 <assertion_failed>
   820b8:	17ffffe1 	b	8203c <CGPIOPin::SetAlternateFunction(unsigned int)+0x5c>
   820bc:	913b22a1 	add	x1, x21, #0xec8
   820c0:	52802c22 	mov	w2, #0x161                 	// #353
   820c4:	9100a020 	add	x0, x1, #0x28
   820c8:	9400195a 	bl	88630 <assertion_failed>
   820cc:	b9400a60 	ldr	w0, [x19, #8]
   820d0:	17ffffcf 	b	8200c <CGPIOPin::SetAlternateFunction(unsigned int)+0x2c>
   820d4:	d503201f 	nop
   820d8:	d503201f 	nop
   820dc:	d503201f 	nop

00000000000820e0 <CGPIOPin::InterruptHandler()>:
   820e0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   820e4:	910003fd 	mov	x29, sp
   820e8:	f9000bf3 	str	x19, [sp, #16]
   820ec:	aa0003f3 	mov	x19, x0
   820f0:	b9401400 	ldr	w0, [x0, #20]
   820f4:	51000801 	sub	w1, w0, #0x2
   820f8:	7100001f 	cmp	w0, #0x0
   820fc:	7a411820 	ccmp	w1, #0x1, #0x0, ne  // ne = any
   82100:	540001a8 	b.hi	82134 <CGPIOPin::InterruptHandler()+0x54>  // b.pmore
   82104:	b9403a60 	ldr	w0, [x19, #56]
   82108:	7100141f 	cmp	w0, #0x5
   8210c:	5400008d 	b.le	8211c <CGPIOPin::InterruptHandler()+0x3c>
   82110:	b9403e60 	ldr	w0, [x19, #60]
   82114:	7100141f 	cmp	w0, #0x5
   82118:	540001ac 	b.gt	8214c <CGPIOPin::InterruptHandler()+0x6c>
   8211c:	f9401661 	ldr	x1, [x19, #40]
   82120:	b4000241 	cbz	x1, 82168 <CGPIOPin::InterruptHandler()+0x88>
   82124:	f9401a60 	ldr	x0, [x19, #48]
   82128:	f9400bf3 	ldr	x19, [sp, #16]
   8212c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   82130:	d61f0020 	br	x1
   82134:	d0000041 	adrp	x1, 8c000 <VectorTable>
   82138:	913b2021 	add	x1, x1, #0xec8
   8213c:	52802e82 	mov	w2, #0x174                 	// #372
   82140:	91028020 	add	x0, x1, #0xa0
   82144:	9400193b 	bl	88630 <assertion_failed>
   82148:	17ffffef 	b	82104 <CGPIOPin::InterruptHandler()+0x24>
   8214c:	d0000041 	adrp	x1, 8c000 <VectorTable>
   82150:	913b2021 	add	x1, x1, #0xec8
   82154:	910a8020 	add	x0, x1, #0x2a0
   82158:	52802ec2 	mov	w2, #0x176                 	// #374
   8215c:	94001935 	bl	88630 <assertion_failed>
   82160:	f9401661 	ldr	x1, [x19, #40]
   82164:	b5fffe01 	cbnz	x1, 82124 <CGPIOPin::InterruptHandler()+0x44>
   82168:	d0000041 	adrp	x1, 8c000 <VectorTable>
   8216c:	913b2021 	add	x1, x1, #0xec8
   82170:	91068020 	add	x0, x1, #0x1a0
   82174:	52802f02 	mov	w2, #0x178                 	// #376
   82178:	9400192e 	bl	88630 <assertion_failed>
   8217c:	f9401661 	ldr	x1, [x19, #40]
   82180:	f9401a60 	ldr	x0, [x19, #48]
   82184:	f9400bf3 	ldr	x19, [sp, #16]
   82188:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8218c:	d61f0020 	br	x1

0000000000082190 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
   82190:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   82194:	7100d41f 	cmp	w0, #0x35
   82198:	910003fd 	mov	x29, sp
   8219c:	a90153f3 	stp	x19, x20, [sp, #16]
   821a0:	2a0003f4 	mov	w20, w0
   821a4:	a9025bf5 	stp	x21, x22, [sp, #32]
   821a8:	54000528 	b.hi	8224c <CGPIOPin::DisableAllInterrupts(unsigned int)+0xbc>  // b.pmore
   821ac:	52800275 	mov	w21, #0x13                  	// #19
   821b0:	72a1f915 	movk	w21, #0xfc8, lsl #16
   821b4:	0b5416b5 	add	w21, w21, w20, lsr #5
   821b8:	b0000076 	adrp	x22, 8f000 <vtable for CDevice+0x720>
   821bc:	b9453ac0 	ldr	w0, [x22, #1336]
   821c0:	12001294 	and	w20, w20, #0x1f
   821c4:	531e76b5 	lsl	w21, w21, #2
   821c8:	52800021 	mov	w1, #0x1                   	// #1
   821cc:	1ad42034 	lsl	w20, w1, w20
   821d0:	2a1503f3 	mov	w19, w21
   821d4:	35000300 	cbnz	w0, 82234 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa4>
   821d8:	52801160 	mov	w0, #0x8b                  	// #139
   821dc:	72a7e400 	movk	w0, #0x3f20, lsl #16
   821e0:	6b0002bf 	cmp	w21, w0
   821e4:	54000188 	b.hi	82214 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x84>  // b.pmore
   821e8:	2a3403e1 	mvn	w1, w20
   821ec:	d2801162 	mov	x2, #0x8b                  	// #139
   821f0:	f2a7e402 	movk	x2, #0x3f20, lsl #16
   821f4:	d503201f 	nop
   821f8:	b9400260 	ldr	w0, [x19]
   821fc:	0a000020 	and	w0, w1, w0
   82200:	b800c660 	str	w0, [x19], #12
   82204:	eb02027f 	cmp	x19, x2
   82208:	54ffff89 	b.ls	821f8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x68>  // b.plast
   8220c:	b9453ac0 	ldr	w0, [x22, #1336]
   82210:	350000a0 	cbnz	w0, 82224 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x94>
   82214:	a94153f3 	ldp	x19, x20, [sp, #16]
   82218:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8221c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   82220:	d65f03c0 	ret
   82224:	a94153f3 	ldp	x19, x20, [sp, #16]
   82228:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8222c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   82230:	14001550 	b	87770 <LeaveCritical>
   82234:	94001517 	bl	87690 <EnterCritical>
   82238:	52801160 	mov	w0, #0x8b                  	// #139
   8223c:	72a7e400 	movk	w0, #0x3f20, lsl #16
   82240:	6b0002bf 	cmp	w21, w0
   82244:	54fffd29 	b.ls	821e8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x58>  // b.plast
   82248:	17fffff1 	b	8220c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x7c>
   8224c:	d0000041 	adrp	x1, 8c000 <VectorTable>
   82250:	913b2021 	add	x1, x1, #0xec8
   82254:	52802fc2 	mov	w2, #0x17e                 	// #382
   82258:	910bc020 	add	x0, x1, #0x2f0
   8225c:	940018f5 	bl	88630 <assertion_failed>
   82260:	17ffffd3 	b	821ac <CGPIOPin::DisableAllInterrupts(unsigned int)+0x1c>
	...

0000000000082270 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
   82270:	b0000060 	adrp	x0, 8f000 <vtable for CDevice+0x720>
   82274:	52800021 	mov	w1, #0x1                   	// #1
   82278:	b9053801 	str	w1, [x0, #1336]
   8227c:	d65f03c0 	ret

0000000000082280 <CKernelOptions::GetDecimal(char*) [clone .part.0]>:
   82280:	aa0003e3 	mov	x3, x0
   82284:	52800145 	mov	w5, #0xa                   	// #10
   82288:	52800000 	mov	w0, #0x0                   	// #0
   8228c:	14000008 	b	822ac <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x2c>
   82290:	1b050401 	madd	w1, w0, w5, w1
   82294:	7100249f 	cmp	w4, #0x9
   82298:	54000148 	b.hi	822c0 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x40>  // b.pmore
   8229c:	6b01001f 	cmp	w0, w1
   822a0:	2a0103e0 	mov	w0, w1
   822a4:	3a419824 	ccmn	w1, #0x1, #0x4, ls  // ls = plast
   822a8:	540000c0 	b.eq	822c0 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x40>  // b.none
   822ac:	38c01462 	ldrsb	w2, [x3], #1
   822b0:	5100c041 	sub	w1, w2, #0x30
   822b4:	12001c24 	and	w4, w1, #0xff
   822b8:	35fffec2 	cbnz	w2, 82290 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x10>
   822bc:	d65f03c0 	ret
   822c0:	12800000 	mov	w0, #0xffffffff            	// #-1
   822c4:	d65f03c0 	ret
   822c8:	d503201f 	nop
   822cc:	d503201f 	nop

00000000000822d0 <CKernelOptions::~CKernelOptions()>:
   822d0:	b0000060 	adrp	x0, 8f000 <vtable for CDevice+0x720>
   822d4:	f902a01f 	str	xzr, [x0, #1344]
   822d8:	d65f03c0 	ret
   822dc:	d503201f 	nop

00000000000822e0 <CKernelOptions::GetWidth() const>:
   822e0:	b9481800 	ldr	w0, [x0, #2072]
   822e4:	d65f03c0 	ret
   822e8:	d503201f 	nop
   822ec:	d503201f 	nop

00000000000822f0 <CKernelOptions::GetHeight() const>:
   822f0:	b9481c00 	ldr	w0, [x0, #2076]
   822f4:	d65f03c0 	ret
   822f8:	d503201f 	nop
   822fc:	d503201f 	nop

0000000000082300 <CKernelOptions::GetLogDevice() const>:
   82300:	91208000 	add	x0, x0, #0x820
   82304:	d65f03c0 	ret
   82308:	d503201f 	nop
   8230c:	d503201f 	nop

0000000000082310 <CKernelOptions::GetLogLevel() const>:
   82310:	b9483400 	ldr	w0, [x0, #2100]
   82314:	d65f03c0 	ret
   82318:	d503201f 	nop
   8231c:	d503201f 	nop

0000000000082320 <CKernelOptions::GetKeyMap() const>:
   82320:	9120e000 	add	x0, x0, #0x838
   82324:	d65f03c0 	ret
   82328:	d503201f 	nop
   8232c:	d503201f 	nop

0000000000082330 <CKernelOptions::GetUSBPowerDelay() const>:
   82330:	b9483c00 	ldr	w0, [x0, #2108]
   82334:	d65f03c0 	ret
   82338:	d503201f 	nop
   8233c:	d503201f 	nop

0000000000082340 <CKernelOptions::GetSoundDevice() const>:
   82340:	91210000 	add	x0, x0, #0x840
   82344:	d65f03c0 	ret
   82348:	d503201f 	nop
   8234c:	d503201f 	nop

0000000000082350 <CKernelOptions::GetSoundOption() const>:
   82350:	b9485400 	ldr	w0, [x0, #2132]
   82354:	d65f03c0 	ret
   82358:	d503201f 	nop
   8235c:	d503201f 	nop

0000000000082360 <CKernelOptions::GetCPUSpeed() const>:
   82360:	b9485800 	ldr	w0, [x0, #2136]
   82364:	d65f03c0 	ret
   82368:	d503201f 	nop
   8236c:	d503201f 	nop

0000000000082370 <CKernelOptions::GetSoCMaxTemp() const>:
   82370:	b9485c00 	ldr	w0, [x0, #2140]
   82374:	d65f03c0 	ret
   82378:	d503201f 	nop
   8237c:	d503201f 	nop

0000000000082380 <CKernelOptions::Get()>:
   82380:	b0000060 	adrp	x0, 8f000 <vtable for CDevice+0x720>
   82384:	f942a000 	ldr	x0, [x0, #1344]
   82388:	d65f03c0 	ret
   8238c:	d503201f 	nop

0000000000082390 <CKernelOptions::GetToken()>:
   82390:	aa0003e4 	mov	x4, x0
   82394:	f9440800 	ldr	x0, [x0, #2064]
   82398:	39c00001 	ldrsb	w1, [x0]
   8239c:	34000141 	cbz	w1, 823c4 <CKernelOptions::GetToken()+0x34>
   823a0:	7100803f 	cmp	w1, #0x20
   823a4:	54000060 	b.eq	823b0 <CKernelOptions::GetToken()+0x20>  // b.none
   823a8:	14000009 	b	823cc <CKernelOptions::GetToken()+0x3c>
   823ac:	54000101 	b.ne	823cc <CKernelOptions::GetToken()+0x3c>  // b.any
   823b0:	91000400 	add	x0, x0, #0x1
   823b4:	f9040880 	str	x0, [x4, #2064]
   823b8:	39c00001 	ldrsb	w1, [x0]
   823bc:	7100803f 	cmp	w1, #0x20
   823c0:	35ffff61 	cbnz	w1, 823ac <CKernelOptions::GetToken()+0x1c>
   823c4:	d2800000 	mov	x0, #0x0                   	// #0
   823c8:	d65f03c0 	ret
   823cc:	aa0003e1 	mov	x1, x0
   823d0:	14000003 	b	823dc <CKernelOptions::GetToken()+0x4c>
   823d4:	54000100 	b.eq	823f4 <CKernelOptions::GetToken()+0x64>  // b.none
   823d8:	aa0303e1 	mov	x1, x3
   823dc:	91000423 	add	x3, x1, #0x1
   823e0:	f9040883 	str	x3, [x4, #2064]
   823e4:	39c00422 	ldrsb	w2, [x1, #1]
   823e8:	7100805f 	cmp	w2, #0x20
   823ec:	35ffff42 	cbnz	w2, 823d4 <CKernelOptions::GetToken()+0x44>
   823f0:	17fffff6 	b	823c8 <CKernelOptions::GetToken()+0x38>
   823f4:	91000821 	add	x1, x1, #0x2
   823f8:	f9040881 	str	x1, [x4, #2064]
   823fc:	3900007f 	strb	wzr, [x3]
   82400:	d65f03c0 	ret
   82404:	d503201f 	nop
   82408:	d503201f 	nop
   8240c:	d503201f 	nop

0000000000082410 <CKernelOptions::CKernelOptions()>:
   82410:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   82414:	52800082 	mov	w2, #0x4                   	// #4
   82418:	f0000041 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   8241c:	91074021 	add	x1, x1, #0x1d0
   82420:	910003fd 	mov	x29, sp
   82424:	f9000ff4 	str	x20, [sp, #24]
   82428:	aa0003f4 	mov	x20, x0
   8242c:	a903e7f8 	stp	x24, x25, [sp, #56]
   82430:	52800780 	mov	w0, #0x3c                  	// #60
   82434:	91208298 	add	x24, x20, #0x820
   82438:	9120e299 	add	x25, x20, #0x838
   8243c:	f9040e9f 	str	xzr, [x20, #2072]
   82440:	b9083682 	str	w2, [x20, #2100]
   82444:	b9083e9f 	str	wzr, [x20, #2108]
   82448:	b908569f 	str	wzr, [x20, #2132]
   8244c:	b9085a9f 	str	wzr, [x20, #2136]
   82450:	b9085e80 	str	w0, [x20, #2140]
   82454:	aa1803e0 	mov	x0, x24
   82458:	940011de 	bl	86bd0 <strcpy>
   8245c:	f0000041 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   82460:	91076021 	add	x1, x1, #0x1d8
   82464:	aa1903e0 	mov	x0, x25
   82468:	940011da 	bl	86bd0 <strcpy>
   8246c:	b0000062 	adrp	x2, 8f000 <vtable for CDevice+0x720>
   82470:	3921029f 	strb	wzr, [x20, #2112]
   82474:	52800001 	mov	w1, #0x0                   	// #0
   82478:	910163a0 	add	x0, x29, #0x58
   8247c:	f902a054 	str	x20, [x2, #1344]
   82480:	940019a8 	bl	88b20 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   82484:	52800004 	mov	w4, #0x0                   	// #0
   82488:	52810183 	mov	w3, #0x80c                 	// #2060
   8248c:	aa1403e2 	mov	x2, x20
   82490:	52800021 	mov	w1, #0x1                   	// #1
   82494:	72a000a1 	movk	w1, #0x5, lsl #16
   82498:	910163a0 	add	x0, x29, #0x58
   8249c:	940019a9 	bl	88b40 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   824a0:	72001c1f 	tst	w0, #0xff
   824a4:	540007e0 	b.eq	825a0 <CKernelOptions::CKernelOptions()+0x190>  // b.none
   824a8:	b9400a80 	ldr	w0, [x20, #8]
   824ac:	711ffc1f 	cmp	w0, #0x7ff
   824b0:	54000788 	b.hi	825a0 <CKernelOptions::CKernelOptions()+0x190>  // b.pmore
   824b4:	8b204280 	add	x0, x20, w0, uxtw
   824b8:	f9000bb3 	str	x19, [x29, #16]
   824bc:	a9025bb5 	stp	x21, x22, [x29, #32]
   824c0:	f0000056 	adrp	x22, 8d000 <vtable for CGPIOPin+0x158>
   824c4:	910962d6 	add	x22, x22, #0x258
   824c8:	f9001bb7 	str	x23, [x29, #48]
   824cc:	f90027ba 	str	x26, [x29, #72]
   824d0:	f000005a 	adrp	x26, 8d000 <vtable for CGPIOPin+0x158>
   824d4:	9107835a 	add	x26, x26, #0x1e0
   824d8:	3900301f 	strb	wzr, [x0, #12]
   824dc:	91003280 	add	x0, x20, #0xc
   824e0:	f9040a80 	str	x0, [x20, #2064]
   824e4:	d503201f 	nop
   824e8:	aa1403e0 	mov	x0, x20
   824ec:	97ffffa9 	bl	82390 <CKernelOptions::GetToken()>
   824f0:	aa0003f5 	mov	x21, x0
   824f4:	b40004e0 	cbz	x0, 82590 <CKernelOptions::CKernelOptions()+0x180>
   824f8:	39c00000 	ldrsb	w0, [x0]
   824fc:	34000120 	cbz	w0, 82520 <CKernelOptions::CKernelOptions()+0x110>
   82500:	aa1503f3 	mov	x19, x21
   82504:	7100f41f 	cmp	w0, #0x3d
   82508:	54000061 	b.ne	82514 <CKernelOptions::CKernelOptions()+0x104>  // b.any
   8250c:	1400002b 	b	825b8 <CKernelOptions::CKernelOptions()+0x1a8>
   82510:	54000540 	b.eq	825b8 <CKernelOptions::CKernelOptions()+0x1a8>  // b.none
   82514:	38c01e60 	ldrsb	w0, [x19, #1]!
   82518:	7100f41f 	cmp	w0, #0x3d
   8251c:	35ffffa0 	cbnz	w0, 82510 <CKernelOptions::CKernelOptions()+0x100>
   82520:	aa1603e1 	mov	x1, x22
   82524:	aa1503e0 	mov	x0, x21
   82528:	9400114a 	bl	86a50 <strcmp>
   8252c:	34fffde0 	cbz	w0, 824e8 <CKernelOptions::CKernelOptions()+0xd8>
   82530:	aa1a03e1 	mov	x1, x26
   82534:	aa1503e0 	mov	x0, x21
   82538:	d2800017 	mov	x23, #0x0                   	// #0
   8253c:	94001145 	bl	86a50 <strcmp>
   82540:	34fffd40 	cbz	w0, 824e8 <CKernelOptions::CKernelOptions()+0xd8>
   82544:	f0000041 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   82548:	9107a021 	add	x1, x1, #0x1e8
   8254c:	aa1503e0 	mov	x0, x21
   82550:	94001140 	bl	86a50 <strcmp>
   82554:	340006e0 	cbz	w0, 82630 <CKernelOptions::CKernelOptions()+0x220>
   82558:	f0000041 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   8255c:	9107c021 	add	x1, x1, #0x1f0
   82560:	aa1503e0 	mov	x0, x21
   82564:	9400113b 	bl	86a50 <strcmp>
   82568:	35000700 	cbnz	w0, 82648 <CKernelOptions::CKernelOptions()+0x238>
   8256c:	b4fffbf7 	cbz	x23, 824e8 <CKernelOptions::CKernelOptions()+0xd8>
   82570:	39c002e0 	ldrsb	w0, [x23]
   82574:	34fffba0 	cbz	w0, 824e8 <CKernelOptions::CKernelOptions()+0xd8>
   82578:	aa1703e0 	mov	x0, x23
   8257c:	97ffff41 	bl	82280 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   82580:	7100101f 	cmp	w0, #0x4
   82584:	54fffb28 	b.hi	824e8 <CKernelOptions::CKernelOptions()+0xd8>  // b.pmore
   82588:	b9083680 	str	w0, [x20, #2100]
   8258c:	17ffffd7 	b	824e8 <CKernelOptions::CKernelOptions()+0xd8>
   82590:	f9400bb3 	ldr	x19, [x29, #16]
   82594:	a9425bb5 	ldp	x21, x22, [x29, #32]
   82598:	f9401bb7 	ldr	x23, [x29, #48]
   8259c:	f94027ba 	ldr	x26, [x29, #72]
   825a0:	910163a0 	add	x0, x29, #0x58
   825a4:	94001963 	bl	88b30 <CBcmPropertyTags::~CBcmPropertyTags()>
   825a8:	f9400ff4 	ldr	x20, [sp, #24]
   825ac:	a943e7f8 	ldp	x24, x25, [sp, #56]
   825b0:	a8c67bfd 	ldp	x29, x30, [sp], #96
   825b4:	d65f03c0 	ret
   825b8:	3900027f 	strb	wzr, [x19]
   825bc:	91000677 	add	x23, x19, #0x1
   825c0:	aa1603e1 	mov	x1, x22
   825c4:	aa1503e0 	mov	x0, x21
   825c8:	94001122 	bl	86a50 <strcmp>
   825cc:	35000160 	cbnz	w0, 825f8 <CKernelOptions::CKernelOptions()+0x1e8>
   825d0:	b4fff8d7 	cbz	x23, 824e8 <CKernelOptions::CKernelOptions()+0xd8>
   825d4:	39c00660 	ldrsb	w0, [x19, #1]
   825d8:	34fff880 	cbz	w0, 824e8 <CKernelOptions::CKernelOptions()+0xd8>
   825dc:	aa1703e0 	mov	x0, x23
   825e0:	97ffff28 	bl	82280 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   825e4:	510a0001 	sub	w1, w0, #0x280
   825e8:	7114f03f 	cmp	w1, #0x53c
   825ec:	54fff7e8 	b.hi	824e8 <CKernelOptions::CKernelOptions()+0xd8>  // b.pmore
   825f0:	b9081a80 	str	w0, [x20, #2072]
   825f4:	17ffffbd 	b	824e8 <CKernelOptions::CKernelOptions()+0xd8>
   825f8:	aa1a03e1 	mov	x1, x26
   825fc:	aa1503e0 	mov	x0, x21
   82600:	94001114 	bl	86a50 <strcmp>
   82604:	35fffa00 	cbnz	w0, 82544 <CKernelOptions::CKernelOptions()+0x134>
   82608:	b4fff717 	cbz	x23, 824e8 <CKernelOptions::CKernelOptions()+0xd8>
   8260c:	39c00660 	ldrsb	w0, [x19, #1]
   82610:	34fff6c0 	cbz	w0, 824e8 <CKernelOptions::CKernelOptions()+0xd8>
   82614:	aa1703e0 	mov	x0, x23
   82618:	97ffff1a 	bl	82280 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   8261c:	51078001 	sub	w1, w0, #0x1e0
   82620:	7109603f 	cmp	w1, #0x258
   82624:	54fff628 	b.hi	824e8 <CKernelOptions::CKernelOptions()+0xd8>  // b.pmore
   82628:	b9081e80 	str	w0, [x20, #2076]
   8262c:	17ffffaf 	b	824e8 <CKernelOptions::CKernelOptions()+0xd8>
   82630:	d2800262 	mov	x2, #0x13                  	// #19
   82634:	aa1703e1 	mov	x1, x23
   82638:	aa1803e0 	mov	x0, x24
   8263c:	94001171 	bl	86c00 <strncpy>
   82640:	3920ce9f 	strb	wzr, [x20, #2099]
   82644:	17ffffa9 	b	824e8 <CKernelOptions::CKernelOptions()+0xd8>
   82648:	f0000041 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   8264c:	91080021 	add	x1, x1, #0x200
   82650:	aa1503e0 	mov	x0, x21
   82654:	940010ff 	bl	86a50 <strcmp>
   82658:	350000e0 	cbnz	w0, 82674 <CKernelOptions::CKernelOptions()+0x264>
   8265c:	d2800042 	mov	x2, #0x2                   	// #2
   82660:	aa1703e1 	mov	x1, x23
   82664:	aa1903e0 	mov	x0, x25
   82668:	94001166 	bl	86c00 <strncpy>
   8266c:	3920ea9f 	strb	wzr, [x20, #2106]
   82670:	17ffff9e 	b	824e8 <CKernelOptions::CKernelOptions()+0xd8>
   82674:	f0000041 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   82678:	91082021 	add	x1, x1, #0x208
   8267c:	aa1503e0 	mov	x0, x21
   82680:	940010f4 	bl	86a50 <strcmp>
   82684:	35000180 	cbnz	w0, 826b4 <CKernelOptions::CKernelOptions()+0x2a4>
   82688:	b4fff317 	cbz	x23, 824e8 <CKernelOptions::CKernelOptions()+0xd8>
   8268c:	39c002e0 	ldrsb	w0, [x23]
   82690:	34fff2c0 	cbz	w0, 824e8 <CKernelOptions::CKernelOptions()+0xd8>
   82694:	aa1703e0 	mov	x0, x23
   82698:	97fffefa 	bl	82280 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   8269c:	51032002 	sub	w2, w0, #0xc8
   826a0:	5283cf01 	mov	w1, #0x1e78                	// #7800
   826a4:	6b01005f 	cmp	w2, w1
   826a8:	54fff208 	b.hi	824e8 <CKernelOptions::CKernelOptions()+0xd8>  // b.pmore
   826ac:	b9083e80 	str	w0, [x20, #2108]
   826b0:	17ffff8e 	b	824e8 <CKernelOptions::CKernelOptions()+0xd8>
   826b4:	f0000041 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   826b8:	91086021 	add	x1, x1, #0x218
   826bc:	aa1503e0 	mov	x0, x21
   826c0:	940010e4 	bl	86a50 <strcmp>
   826c4:	350000e0 	cbnz	w0, 826e0 <CKernelOptions::CKernelOptions()+0x2d0>
   826c8:	d2800262 	mov	x2, #0x13                  	// #19
   826cc:	aa1703e1 	mov	x1, x23
   826d0:	91210280 	add	x0, x20, #0x840
   826d4:	9400114b 	bl	86c00 <strncpy>
   826d8:	39214e9f 	strb	wzr, [x20, #2131]
   826dc:	17ffff83 	b	824e8 <CKernelOptions::CKernelOptions()+0xd8>
   826e0:	f0000041 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   826e4:	9108a021 	add	x1, x1, #0x228
   826e8:	aa1503e0 	mov	x0, x21
   826ec:	940010d9 	bl	86a50 <strcmp>
   826f0:	35000140 	cbnz	w0, 82718 <CKernelOptions::CKernelOptions()+0x308>
   826f4:	b4ffefb7 	cbz	x23, 824e8 <CKernelOptions::CKernelOptions()+0xd8>
   826f8:	39c002e0 	ldrsb	w0, [x23]
   826fc:	34ffef60 	cbz	w0, 824e8 <CKernelOptions::CKernelOptions()+0xd8>
   82700:	aa1703e0 	mov	x0, x23
   82704:	97fffedf 	bl	82280 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   82708:	7100081f 	cmp	w0, #0x2
   8270c:	54ffeee8 	b.hi	824e8 <CKernelOptions::CKernelOptions()+0xd8>  // b.pmore
   82710:	b9085680 	str	w0, [x20, #2132]
   82714:	17ffff75 	b	824e8 <CKernelOptions::CKernelOptions()+0xd8>
   82718:	f0000041 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   8271c:	9108e021 	add	x1, x1, #0x238
   82720:	aa1503e0 	mov	x0, x21
   82724:	940010cb 	bl	86a50 <strcmp>
   82728:	35000120 	cbnz	w0, 8274c <CKernelOptions::CKernelOptions()+0x33c>
   8272c:	f0000041 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   82730:	91090021 	add	x1, x1, #0x240
   82734:	aa1703e0 	mov	x0, x23
   82738:	940010c6 	bl	86a50 <strcmp>
   8273c:	35ffed60 	cbnz	w0, 824e8 <CKernelOptions::CKernelOptions()+0xd8>
   82740:	52800020 	mov	w0, #0x1                   	// #1
   82744:	b9085a80 	str	w0, [x20, #2136]
   82748:	17ffff68 	b	824e8 <CKernelOptions::CKernelOptions()+0xd8>
   8274c:	f0000041 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   82750:	91092021 	add	x1, x1, #0x248
   82754:	aa1503e0 	mov	x0, x21
   82758:	940010be 	bl	86a50 <strcmp>
   8275c:	7100001f 	cmp	w0, #0x0
   82760:	fa400ae4 	ccmp	x23, #0x0, #0x4, eq  // eq = none
   82764:	54ffec20 	b.eq	824e8 <CKernelOptions::CKernelOptions()+0xd8>  // b.none
   82768:	39c002e0 	ldrsb	w0, [x23]
   8276c:	34ffebe0 	cbz	w0, 824e8 <CKernelOptions::CKernelOptions()+0xd8>
   82770:	aa1703e0 	mov	x0, x23
   82774:	97fffec3 	bl	82280 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   82778:	5100a001 	sub	w1, w0, #0x28
   8277c:	7100983f 	cmp	w1, #0x26
   82780:	54ffeb48 	b.hi	824e8 <CKernelOptions::CKernelOptions()+0xd8>  // b.pmore
   82784:	b9085e80 	str	w0, [x20, #2140]
   82788:	17ffff58 	b	824e8 <CKernelOptions::CKernelOptions()+0xd8>
   8278c:	d503201f 	nop

0000000000082790 <CKernelOptions::GetOptionValue(char*)>:
   82790:	39c00001 	ldrsb	w1, [x0]
   82794:	34000101 	cbz	w1, 827b4 <CKernelOptions::GetOptionValue(char*)+0x24>
   82798:	7100f43f 	cmp	w1, #0x3d
   8279c:	54000061 	b.ne	827a8 <CKernelOptions::GetOptionValue(char*)+0x18>  // b.any
   827a0:	14000008 	b	827c0 <CKernelOptions::GetOptionValue(char*)+0x30>
   827a4:	540000e0 	b.eq	827c0 <CKernelOptions::GetOptionValue(char*)+0x30>  // b.none
   827a8:	38c01c01 	ldrsb	w1, [x0, #1]!
   827ac:	7100f43f 	cmp	w1, #0x3d
   827b0:	35ffffa1 	cbnz	w1, 827a4 <CKernelOptions::GetOptionValue(char*)+0x14>
   827b4:	d2800001 	mov	x1, #0x0                   	// #0
   827b8:	aa0103e0 	mov	x0, x1
   827bc:	d65f03c0 	ret
   827c0:	91000401 	add	x1, x0, #0x1
   827c4:	3900001f 	strb	wzr, [x0]
   827c8:	aa0103e0 	mov	x0, x1
   827cc:	d65f03c0 	ret

00000000000827d0 <CKernelOptions::GetDecimal(char*)>:
   827d0:	b4000080 	cbz	x0, 827e0 <CKernelOptions::GetDecimal(char*)+0x10>
   827d4:	39c00001 	ldrsb	w1, [x0]
   827d8:	34000041 	cbz	w1, 827e0 <CKernelOptions::GetDecimal(char*)+0x10>
   827dc:	17fffea9 	b	82280 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   827e0:	12800000 	mov	w0, #0xffffffff            	// #-1
   827e4:	d65f03c0 	ret

00000000000827e8 <CMachineInfo::CMachineInfo()>:
   827e8:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
   827ec:	910003fd 	mov	x29, sp
   827f0:	f9000bf3 	str	x19, [sp, #16]
   827f4:	f90017a0 	str	x0, [x29, #40]
   827f8:	f94017a0 	ldr	x0, [x29, #40]
   827fc:	b900001f 	str	wzr, [x0]
   82800:	f94017a0 	ldr	x0, [x29, #40]
   82804:	528001e1 	mov	w1, #0xf                   	// #15
   82808:	b9000401 	str	w1, [x0, #4]
   8280c:	f94017a0 	ldr	x0, [x29, #40]
   82810:	b900081f 	str	wzr, [x0, #8]
   82814:	f94017a0 	ldr	x0, [x29, #40]
   82818:	b9000c1f 	str	wzr, [x0, #12]
   8281c:	f94017a0 	ldr	x0, [x29, #40]
   82820:	52800061 	mov	w1, #0x3                   	// #3
   82824:	b9001001 	str	w1, [x0, #16]
   82828:	f94017a0 	ldr	x0, [x29, #40]
   8282c:	b900141f 	str	wzr, [x0, #20]
   82830:	f94017a0 	ldr	x0, [x29, #40]
   82834:	5283e6a1 	mov	w1, #0x1f35                	// #7989
   82838:	79003001 	strh	w1, [x0, #24]
   8283c:	b0000060 	adrp	x0, 8f000 <vtable for CDevice+0x720>
   82840:	91152000 	add	x0, x0, #0x548
   82844:	f9400000 	ldr	x0, [x0]
   82848:	f100001f 	cmp	x0, #0x0
   8284c:	540004c0 	b.eq	828e4 <CMachineInfo::CMachineInfo()+0xfc>  // b.none
   82850:	b0000060 	adrp	x0, 8f000 <vtable for CDevice+0x720>
   82854:	91152000 	add	x0, x0, #0x548
   82858:	f9400000 	ldr	x0, [x0]
   8285c:	b9400001 	ldr	w1, [x0]
   82860:	f94017a0 	ldr	x0, [x29, #40]
   82864:	b9000001 	str	w1, [x0]
   82868:	b0000060 	adrp	x0, 8f000 <vtable for CDevice+0x720>
   8286c:	91152000 	add	x0, x0, #0x548
   82870:	f9400000 	ldr	x0, [x0]
   82874:	b9400401 	ldr	w1, [x0, #4]
   82878:	f94017a0 	ldr	x0, [x29, #40]
   8287c:	b9000401 	str	w1, [x0, #4]
   82880:	b0000060 	adrp	x0, 8f000 <vtable for CDevice+0x720>
   82884:	91152000 	add	x0, x0, #0x548
   82888:	f9400000 	ldr	x0, [x0]
   8288c:	b9400801 	ldr	w1, [x0, #8]
   82890:	f94017a0 	ldr	x0, [x29, #40]
   82894:	b9000801 	str	w1, [x0, #8]
   82898:	b0000060 	adrp	x0, 8f000 <vtable for CDevice+0x720>
   8289c:	91152000 	add	x0, x0, #0x548
   828a0:	f9400000 	ldr	x0, [x0]
   828a4:	b9400c01 	ldr	w1, [x0, #12]
   828a8:	f94017a0 	ldr	x0, [x29, #40]
   828ac:	b9000c01 	str	w1, [x0, #12]
   828b0:	b0000060 	adrp	x0, 8f000 <vtable for CDevice+0x720>
   828b4:	91152000 	add	x0, x0, #0x548
   828b8:	f9400000 	ldr	x0, [x0]
   828bc:	b9401001 	ldr	w1, [x0, #16]
   828c0:	f94017a0 	ldr	x0, [x29, #40]
   828c4:	b9001001 	str	w1, [x0, #16]
   828c8:	b0000060 	adrp	x0, 8f000 <vtable for CDevice+0x720>
   828cc:	91152000 	add	x0, x0, #0x548
   828d0:	f9400000 	ldr	x0, [x0]
   828d4:	b9401401 	ldr	w1, [x0, #20]
   828d8:	f94017a0 	ldr	x0, [x29, #40]
   828dc:	b9001401 	str	w1, [x0, #20]
   828e0:	140000c5 	b	82bf4 <CMachineInfo::CMachineInfo()+0x40c>
   828e4:	b0000060 	adrp	x0, 8f000 <vtable for CDevice+0x720>
   828e8:	91152000 	add	x0, x0, #0x548
   828ec:	f94017a1 	ldr	x1, [x29, #40]
   828f0:	f9000001 	str	x1, [x0]
   828f4:	910163a0 	add	x0, x29, #0x58
   828f8:	52800021 	mov	w1, #0x1                   	// #1
   828fc:	94001889 	bl	88b20 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   82900:	910123a1 	add	x1, x29, #0x48
   82904:	910163a0 	add	x0, x29, #0x58
   82908:	52800004 	mov	w4, #0x0                   	// #0
   8290c:	52800203 	mov	w3, #0x10                  	// #16
   82910:	aa0103e2 	mov	x2, x1
   82914:	52800021 	mov	w1, #0x1                   	// #1
   82918:	72a000c1 	movk	w1, #0x6, lsl #16
   8291c:	94001889 	bl	88b40 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   82920:	12001c00 	and	w0, w0, #0xff
   82924:	7100001f 	cmp	w0, #0x0
   82928:	540000a0 	b.eq	8293c <CMachineInfo::CMachineInfo()+0x154>  // b.none
   8292c:	b94057a0 	ldr	w0, [x29, #84]
   82930:	12003c01 	and	w1, w0, #0xffff
   82934:	f94017a0 	ldr	x0, [x29, #40]
   82938:	79003001 	strh	w1, [x0, #24]
   8293c:	9100e3a1 	add	x1, x29, #0x38
   82940:	910163a0 	add	x0, x29, #0x58
   82944:	52800004 	mov	w4, #0x0                   	// #0
   82948:	52800203 	mov	w3, #0x10                  	// #16
   8294c:	aa0103e2 	mov	x2, x1
   82950:	52800041 	mov	w1, #0x2                   	// #2
   82954:	72a00021 	movk	w1, #0x1, lsl #16
   82958:	9400187a 	bl	88b40 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   8295c:	12001c00 	and	w0, w0, #0xff
   82960:	52000000 	eor	w0, w0, #0x1
   82964:	12001c00 	and	w0, w0, #0xff
   82968:	7100001f 	cmp	w0, #0x0
   8296c:	54000060 	b.eq	82978 <CMachineInfo::CMachineInfo()+0x190>  // b.none
   82970:	52800013 	mov	w19, #0x0                   	// #0
   82974:	1400009c 	b	82be4 <CMachineInfo::CMachineInfo()+0x3fc>
   82978:	b94047a1 	ldr	w1, [x29, #68]
   8297c:	f94017a0 	ldr	x0, [x29, #40]
   82980:	b9000001 	str	w1, [x0]
   82984:	f94017a0 	ldr	x0, [x29, #40]
   82988:	b9400000 	ldr	w0, [x0]
   8298c:	12090000 	and	w0, w0, #0x800000
   82990:	7100001f 	cmp	w0, #0x0
   82994:	54000bc0 	b.eq	82b0c <CMachineInfo::CMachineInfo()+0x324>  // b.none
   82998:	f94017a0 	ldr	x0, [x29, #40]
   8299c:	b9400000 	ldr	w0, [x0]
   829a0:	53047c00 	lsr	w0, w0, #4
   829a4:	12001c00 	and	w0, w0, #0xff
   829a8:	b90067a0 	str	w0, [x29, #100]
   829ac:	b9006fbf 	str	wzr, [x29, #108]
   829b0:	b9406fa0 	ldr	w0, [x29, #108]
   829b4:	7100301f 	cmp	w0, #0xc
   829b8:	54000208 	b.hi	829f8 <CMachineInfo::CMachineInfo()+0x210>  // b.pmore
   829bc:	b0000060 	adrp	x0, 8f000 <vtable for CDevice+0x720>
   829c0:	9108a001 	add	x1, x0, #0x228
   829c4:	b9406fa2 	ldr	w2, [x29, #108]
   829c8:	d2800180 	mov	x0, #0xc                   	// #12
   829cc:	9b007c40 	mul	x0, x2, x0
   829d0:	8b000020 	add	x0, x1, x0
   829d4:	b9400000 	ldr	w0, [x0]
   829d8:	b94067a1 	ldr	w1, [x29, #100]
   829dc:	6b00003f 	cmp	w1, w0
   829e0:	540000a0 	b.eq	829f4 <CMachineInfo::CMachineInfo()+0x20c>  // b.none
   829e4:	b9406fa0 	ldr	w0, [x29, #108]
   829e8:	11000400 	add	w0, w0, #0x1
   829ec:	b9006fa0 	str	w0, [x29, #108]
   829f0:	17fffff0 	b	829b0 <CMachineInfo::CMachineInfo()+0x1c8>
   829f4:	d503201f 	nop
   829f8:	b9406fa0 	ldr	w0, [x29, #108]
   829fc:	7100301f 	cmp	w0, #0xc
   82a00:	54000069 	b.ls	82a0c <CMachineInfo::CMachineInfo()+0x224>  // b.plast
   82a04:	52800013 	mov	w19, #0x0                   	// #0
   82a08:	14000077 	b	82be4 <CMachineInfo::CMachineInfo()+0x3fc>
   82a0c:	b0000060 	adrp	x0, 8f000 <vtable for CDevice+0x720>
   82a10:	9108a001 	add	x1, x0, #0x228
   82a14:	b9406fa2 	ldr	w2, [x29, #108]
   82a18:	d2800180 	mov	x0, #0xc                   	// #12
   82a1c:	9b007c40 	mul	x0, x2, x0
   82a20:	8b000020 	add	x0, x1, x0
   82a24:	b9400401 	ldr	w1, [x0, #4]
   82a28:	f94017a0 	ldr	x0, [x29, #40]
   82a2c:	b9000401 	str	w1, [x0, #4]
   82a30:	b0000060 	adrp	x0, 8f000 <vtable for CDevice+0x720>
   82a34:	9108a001 	add	x1, x0, #0x228
   82a38:	b9406fa2 	ldr	w2, [x29, #108]
   82a3c:	d2800180 	mov	x0, #0xc                   	// #12
   82a40:	9b007c40 	mul	x0, x2, x0
   82a44:	8b000020 	add	x0, x1, x0
   82a48:	b9400801 	ldr	w1, [x0, #8]
   82a4c:	f94017a0 	ldr	x0, [x29, #40]
   82a50:	b9000801 	str	w1, [x0, #8]
   82a54:	f94017a0 	ldr	x0, [x29, #40]
   82a58:	b9400000 	ldr	w0, [x0]
   82a5c:	12000c00 	and	w0, w0, #0xf
   82a60:	11000401 	add	w1, w0, #0x1
   82a64:	f94017a0 	ldr	x0, [x29, #40]
   82a68:	b9000c01 	str	w1, [x0, #12]
   82a6c:	f94017a0 	ldr	x0, [x29, #40]
   82a70:	b9400000 	ldr	w0, [x0]
   82a74:	530c7c00 	lsr	w0, w0, #12
   82a78:	12000c01 	and	w1, w0, #0xf
   82a7c:	f94017a0 	ldr	x0, [x29, #40]
   82a80:	b9001001 	str	w1, [x0, #16]
   82a84:	f94017a0 	ldr	x0, [x29, #40]
   82a88:	b9400000 	ldr	w0, [x0]
   82a8c:	53147c00 	lsr	w0, w0, #20
   82a90:	12000800 	and	w0, w0, #0x7
   82a94:	52802001 	mov	w1, #0x100                 	// #256
   82a98:	1ac02020 	lsl	w0, w1, w0
   82a9c:	2a0003e1 	mov	w1, w0
   82aa0:	f94017a0 	ldr	x0, [x29, #40]
   82aa4:	b9001401 	str	w1, [x0, #20]
   82aa8:	f94017a0 	ldr	x0, [x29, #40]
   82aac:	b9401000 	ldr	w0, [x0, #16]
   82ab0:	7100081f 	cmp	w0, #0x2
   82ab4:	5400008d 	b.le	82ac4 <CMachineInfo::CMachineInfo()+0x2dc>
   82ab8:	f94017a0 	ldr	x0, [x29, #40]
   82abc:	52800061 	mov	w1, #0x3                   	// #3
   82ac0:	b9001001 	str	w1, [x0, #16]
   82ac4:	f94017a0 	ldr	x0, [x29, #40]
   82ac8:	b9400400 	ldr	w0, [x0, #4]
   82acc:	71000c1f 	cmp	w0, #0x3
   82ad0:	54000881 	b.ne	82be0 <CMachineInfo::CMachineInfo()+0x3f8>  // b.any
   82ad4:	f94017a0 	ldr	x0, [x29, #40]
   82ad8:	b9401400 	ldr	w0, [x0, #20]
   82adc:	7104001f 	cmp	w0, #0x100
   82ae0:	54000801 	b.ne	82be0 <CMachineInfo::CMachineInfo()+0x3f8>  // b.any
   82ae4:	f94017a0 	ldr	x0, [x29, #40]
   82ae8:	b9400c00 	ldr	w0, [x0, #12]
   82aec:	7100041f 	cmp	w0, #0x1
   82af0:	54000061 	b.ne	82afc <CMachineInfo::CMachineInfo()+0x314>  // b.any
   82af4:	52800020 	mov	w0, #0x1                   	// #1
   82af8:	14000002 	b	82b00 <CMachineInfo::CMachineInfo()+0x318>
   82afc:	52800040 	mov	w0, #0x2                   	// #2
   82b00:	f94017a1 	ldr	x1, [x29, #40]
   82b04:	b9000420 	str	w0, [x1, #4]
   82b08:	14000036 	b	82be0 <CMachineInfo::CMachineInfo()+0x3f8>
   82b0c:	b9006bbf 	str	wzr, [x29, #104]
   82b10:	b9406ba0 	ldr	w0, [x29, #104]
   82b14:	7100401f 	cmp	w0, #0x10
   82b18:	54000208 	b.hi	82b58 <CMachineInfo::CMachineInfo()+0x370>  // b.pmore
   82b1c:	b0000060 	adrp	x0, 8f000 <vtable for CDevice+0x720>
   82b20:	91046001 	add	x1, x0, #0x118
   82b24:	b9406ba0 	ldr	w0, [x29, #104]
   82b28:	d37cec00 	lsl	x0, x0, #4
   82b2c:	8b000020 	add	x0, x1, x0
   82b30:	b9400001 	ldr	w1, [x0]
   82b34:	f94017a0 	ldr	x0, [x29, #40]
   82b38:	b9400000 	ldr	w0, [x0]
   82b3c:	6b00003f 	cmp	w1, w0
   82b40:	540000a0 	b.eq	82b54 <CMachineInfo::CMachineInfo()+0x36c>  // b.none
   82b44:	b9406ba0 	ldr	w0, [x29, #104]
   82b48:	11000400 	add	w0, w0, #0x1
   82b4c:	b9006ba0 	str	w0, [x29, #104]
   82b50:	17fffff0 	b	82b10 <CMachineInfo::CMachineInfo()+0x328>
   82b54:	d503201f 	nop
   82b58:	b9406ba0 	ldr	w0, [x29, #104]
   82b5c:	7100401f 	cmp	w0, #0x10
   82b60:	54000069 	b.ls	82b6c <CMachineInfo::CMachineInfo()+0x384>  // b.plast
   82b64:	52800013 	mov	w19, #0x0                   	// #0
   82b68:	1400001f 	b	82be4 <CMachineInfo::CMachineInfo()+0x3fc>
   82b6c:	b0000060 	adrp	x0, 8f000 <vtable for CDevice+0x720>
   82b70:	91046001 	add	x1, x0, #0x118
   82b74:	b9406ba0 	ldr	w0, [x29, #104]
   82b78:	d37cec00 	lsl	x0, x0, #4
   82b7c:	8b000020 	add	x0, x1, x0
   82b80:	b9400401 	ldr	w1, [x0, #4]
   82b84:	f94017a0 	ldr	x0, [x29, #40]
   82b88:	b9000401 	str	w1, [x0, #4]
   82b8c:	f94017a0 	ldr	x0, [x29, #40]
   82b90:	52800021 	mov	w1, #0x1                   	// #1
   82b94:	b9000801 	str	w1, [x0, #8]
   82b98:	b0000060 	adrp	x0, 8f000 <vtable for CDevice+0x720>
   82b9c:	91046001 	add	x1, x0, #0x118
   82ba0:	b9406ba0 	ldr	w0, [x29, #104]
   82ba4:	d37cec00 	lsl	x0, x0, #4
   82ba8:	8b000020 	add	x0, x1, x0
   82bac:	b9400801 	ldr	w1, [x0, #8]
   82bb0:	f94017a0 	ldr	x0, [x29, #40]
   82bb4:	b9000c01 	str	w1, [x0, #12]
   82bb8:	f94017a0 	ldr	x0, [x29, #40]
   82bbc:	b900101f 	str	wzr, [x0, #16]
   82bc0:	b0000060 	adrp	x0, 8f000 <vtable for CDevice+0x720>
   82bc4:	91046001 	add	x1, x0, #0x118
   82bc8:	b9406ba0 	ldr	w0, [x29, #104]
   82bcc:	d37cec00 	lsl	x0, x0, #4
   82bd0:	8b000020 	add	x0, x1, x0
   82bd4:	b9400c01 	ldr	w1, [x0, #12]
   82bd8:	f94017a0 	ldr	x0, [x29, #40]
   82bdc:	b9001401 	str	w1, [x0, #20]
   82be0:	52800033 	mov	w19, #0x1                   	// #1
   82be4:	910163a0 	add	x0, x29, #0x58
   82be8:	940017d2 	bl	88b30 <CBcmPropertyTags::~CBcmPropertyTags()>
   82bec:	7100067f 	cmp	w19, #0x1
   82bf0:	d503201f 	nop
   82bf4:	f9400bf3 	ldr	x19, [sp, #16]
   82bf8:	a8c77bfd 	ldp	x29, x30, [sp], #112
   82bfc:	d65f03c0 	ret

0000000000082c00 <CMachineInfo::~CMachineInfo()>:
   82c00:	528001e3 	mov	w3, #0xf                   	// #15
   82c04:	b0000061 	adrp	x1, 8f000 <vtable for CDevice+0x720>
   82c08:	f942a422 	ldr	x2, [x1, #1352]
   82c0c:	b9000403 	str	w3, [x0, #4]
   82c10:	eb00005f 	cmp	x2, x0
   82c14:	54000040 	b.eq	82c1c <CMachineInfo::~CMachineInfo()+0x1c>  // b.none
   82c18:	d65f03c0 	ret
   82c1c:	f902a43f 	str	xzr, [x1, #1352]
   82c20:	d65f03c0 	ret

0000000000082c24 <CMachineInfo::GetMachineModel() const>:
   82c24:	b9400400 	ldr	w0, [x0, #4]
   82c28:	d65f03c0 	ret

0000000000082c2c <CMachineInfo::GetMachineName() const>:
   82c2c:	b9800400 	ldrsw	x0, [x0, #4]
   82c30:	b0000061 	adrp	x1, 8f000 <vtable for CDevice+0x720>
   82c34:	91046021 	add	x1, x1, #0x118
   82c38:	9106c021 	add	x1, x1, #0x1b0
   82c3c:	f8607820 	ldr	x0, [x1, x0, lsl #3]
   82c40:	d65f03c0 	ret

0000000000082c44 <CMachineInfo::GetModelMajor() const>:
   82c44:	b9400800 	ldr	w0, [x0, #8]
   82c48:	d65f03c0 	ret

0000000000082c4c <CMachineInfo::GetModelRevision() const>:
   82c4c:	b9400c00 	ldr	w0, [x0, #12]
   82c50:	d65f03c0 	ret

0000000000082c54 <CMachineInfo::GetSoCType() const>:
   82c54:	b9401000 	ldr	w0, [x0, #16]
   82c58:	d65f03c0 	ret

0000000000082c5c <CMachineInfo::GetRAMSize() const>:
   82c5c:	b9401400 	ldr	w0, [x0, #20]
   82c60:	d65f03c0 	ret

0000000000082c64 <CMachineInfo::GetSoCName() const>:
   82c64:	b9801000 	ldrsw	x0, [x0, #16]
   82c68:	b0000061 	adrp	x1, 8f000 <vtable for CDevice+0x720>
   82c6c:	91046021 	add	x1, x1, #0x118
   82c70:	9108c021 	add	x1, x1, #0x230
   82c74:	f8607820 	ldr	x0, [x1, x0, lsl #3]
   82c78:	d65f03c0 	ret

0000000000082c7c <CMachineInfo::GetRevisionRaw() const>:
   82c7c:	b9400000 	ldr	w0, [x0]
   82c80:	d65f03c0 	ret

0000000000082c84 <CMachineInfo::GetActLEDInfo() const>:
   82c84:	b9800400 	ldrsw	x0, [x0, #4]
   82c88:	b0000061 	adrp	x1, 8f000 <vtable for CDevice+0x720>
   82c8c:	91046021 	add	x1, x1, #0x118
   82c90:	91094021 	add	x1, x1, #0x250
   82c94:	b8607820 	ldr	w0, [x1, x0, lsl #2]
   82c98:	d65f03c0 	ret

0000000000082c9c <CMachineInfo::GetClockRate(unsigned int) const>:
   82c9c:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   82ca0:	910003fd 	mov	x29, sp
   82ca4:	a90153f3 	stp	x19, x20, [sp, #16]
   82ca8:	2a0103f3 	mov	w19, w1
   82cac:	aa0003f4 	mov	x20, x0
   82cb0:	52800001 	mov	w1, #0x0                   	// #0
   82cb4:	910083a0 	add	x0, x29, #0x20
   82cb8:	9400179a 	bl	88b20 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   82cbc:	52800084 	mov	w4, #0x4                   	// #4
   82cc0:	52800283 	mov	w3, #0x14                  	// #20
   82cc4:	9100a3a2 	add	x2, x29, #0x28
   82cc8:	52800041 	mov	w1, #0x2                   	// #2
   82ccc:	72a00061 	movk	w1, #0x3, lsl #16
   82cd0:	910083a0 	add	x0, x29, #0x20
   82cd4:	b90037b3 	str	w19, [x29, #52]
   82cd8:	9400179a 	bl	88b40 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   82cdc:	72001c1f 	tst	w0, #0xff
   82ce0:	54000281 	b.ne	82d30 <CMachineInfo::GetClockRate(unsigned int) const+0x94>  // b.any
   82ce4:	71000a7f 	cmp	w19, #0x2
   82ce8:	54000320 	b.eq	82d4c <CMachineInfo::GetClockRate(unsigned int) const+0xb0>  // b.none
   82cec:	7100127f 	cmp	w19, #0x4
   82cf0:	540004e0 	b.eq	82d8c <CMachineInfo::GetClockRate(unsigned int) const+0xf0>  // b.none
   82cf4:	7100067f 	cmp	w19, #0x1
   82cf8:	540003a0 	b.eq	82d6c <CMachineInfo::GetClockRate(unsigned int) const+0xd0>  // b.none
   82cfc:	f0000040 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   82d00:	91098000 	add	x0, x0, #0x260
   82d04:	9105a001 	add	x1, x0, #0x168
   82d08:	52802702 	mov	w2, #0x138                 	// #312
   82d0c:	9105e000 	add	x0, x0, #0x178
   82d10:	94001648 	bl	88630 <assertion_failed>
   82d14:	910083a0 	add	x0, x29, #0x20
   82d18:	52800013 	mov	w19, #0x0                   	// #0
   82d1c:	94001785 	bl	88b30 <CBcmPropertyTags::~CBcmPropertyTags()>
   82d20:	2a1303e0 	mov	w0, w19
   82d24:	a94153f3 	ldp	x19, x20, [sp, #16]
   82d28:	a8c47bfd 	ldp	x29, x30, [sp], #64
   82d2c:	d65f03c0 	ret
   82d30:	b9403bb3 	ldr	w19, [x29, #56]
   82d34:	910083a0 	add	x0, x29, #0x20
   82d38:	9400177e 	bl	88b30 <CBcmPropertyTags::~CBcmPropertyTags()>
   82d3c:	2a1303e0 	mov	w0, w19
   82d40:	a94153f3 	ldp	x19, x20, [sp, #16]
   82d44:	a8c47bfd 	ldp	x29, x30, [sp], #64
   82d48:	d65f03c0 	ret
   82d4c:	910083a0 	add	x0, x29, #0x20
   82d50:	528d8013 	mov	w19, #0x6c00                	// #27648
   82d54:	72a05b93 	movk	w19, #0x2dc, lsl #16
   82d58:	94001776 	bl	88b30 <CBcmPropertyTags::~CBcmPropertyTags()>
   82d5c:	2a1303e0 	mov	w0, w19
   82d60:	a94153f3 	ldp	x19, x20, [sp, #16]
   82d64:	a8c47bfd 	ldp	x29, x30, [sp], #64
   82d68:	d65f03c0 	ret
   82d6c:	910083a0 	add	x0, x29, #0x20
   82d70:	529c2013 	mov	w19, #0xe100                	// #57600
   82d74:	72a0beb3 	movk	w19, #0x5f5, lsl #16
   82d78:	9400176e 	bl	88b30 <CBcmPropertyTags::~CBcmPropertyTags()>
   82d7c:	2a1303e0 	mov	w0, w19
   82d80:	a94153f3 	ldp	x19, x20, [sp, #16]
   82d84:	a8c47bfd 	ldp	x29, x30, [sp], #64
   82d88:	d65f03c0 	ret
   82d8c:	b9400a81 	ldr	w1, [x20, #8]
   82d90:	52946000 	mov	w0, #0xa300                	// #41728
   82d94:	72a23c20 	movk	w0, #0x11e1, lsl #16
   82d98:	71000c3f 	cmp	w1, #0x3
   82d9c:	52965013 	mov	w19, #0xb280                	// #45696
   82da0:	72a1dcd3 	movk	w19, #0xee6, lsl #16
   82da4:	1a803273 	csel	w19, w19, w0, cc  // cc = lo, ul, last
   82da8:	910083a0 	add	x0, x29, #0x20
   82dac:	94001761 	bl	88b30 <CBcmPropertyTags::~CBcmPropertyTags()>
   82db0:	2a1303e0 	mov	w0, w19
   82db4:	a94153f3 	ldp	x19, x20, [sp, #16]
   82db8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   82dbc:	d65f03c0 	ret

0000000000082dc0 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
   82dc0:	7100d83f 	cmp	w1, #0x36
   82dc4:	540002c0 	b.eq	82e1c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x5c>  // b.none
   82dc8:	7100dc3f 	cmp	w1, #0x37
   82dcc:	54000101 	b.ne	82dec <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x2c>  // b.any
   82dd0:	b9400402 	ldr	w2, [x0, #4]
   82dd4:	52800501 	mov	w1, #0x28                  	// #40
   82dd8:	528005a0 	mov	w0, #0x2d                  	// #45
   82ddc:	71000c5f 	cmp	w2, #0x3
   82de0:	1a80c021 	csel	w1, w1, w0, gt
   82de4:	2a0103e0 	mov	w0, w1
   82de8:	d65f03c0 	ret
   82dec:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   82df0:	f0000040 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   82df4:	91098000 	add	x0, x0, #0x260
   82df8:	910003fd 	mov	x29, sp
   82dfc:	9105a001 	add	x1, x0, #0x168
   82e00:	52802e22 	mov	w2, #0x171                 	// #369
   82e04:	9105e000 	add	x0, x0, #0x178
   82e08:	9400160a 	bl	88630 <assertion_failed>
   82e0c:	52800001 	mov	w1, #0x0                   	// #0
   82e10:	2a0103e0 	mov	w0, w1
   82e14:	a8c17bfd 	ldp	x29, x30, [sp], #16
   82e18:	d65f03c0 	ret
   82e1c:	b9400402 	ldr	w2, [x0, #4]
   82e20:	52800501 	mov	w1, #0x28                  	// #40
   82e24:	71000c5f 	cmp	w2, #0x3
   82e28:	54fffded 	b.le	82de4 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
   82e2c:	b9400802 	ldr	w2, [x0, #8]
   82e30:	528005a1 	mov	w1, #0x2d                  	// #45
   82e34:	52800520 	mov	w0, #0x29                  	// #41
   82e38:	71000c5f 	cmp	w2, #0x3
   82e3c:	1a803021 	csel	w1, w1, w0, cc  // cc = lo, ul, last
   82e40:	2a0103e0 	mov	w0, w1
   82e44:	d65f03c0 	ret

0000000000082e48 <CMachineInfo::GetDevice(TDeviceId) const>:
   82e48:	350000a1 	cbnz	w1, 82e5c <CMachineInfo::GetDevice(TDeviceId) const+0x14>
   82e4c:	b9400400 	ldr	w0, [x0, #4]
   82e50:	7100041f 	cmp	w0, #0x1
   82e54:	1a9f07e0 	cset	w0, ne  // ne = any
   82e58:	d65f03c0 	ret
   82e5c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   82e60:	f0000040 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   82e64:	91098000 	add	x0, x0, #0x260
   82e68:	910003fd 	mov	x29, sp
   82e6c:	9105a001 	add	x1, x0, #0x168
   82e70:	52803142 	mov	w2, #0x18a                 	// #394
   82e74:	9105e000 	add	x0, x0, #0x178
   82e78:	940015ee 	bl	88630 <assertion_failed>
   82e7c:	52800000 	mov	w0, #0x0                   	// #0
   82e80:	a8c17bfd 	ldp	x29, x30, [sp], #16
   82e84:	d65f03c0 	ret

0000000000082e88 <CMachineInfo::AllocateDMAChannel(unsigned int)>:
   82e88:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   82e8c:	f0000043 	adrp	x3, 8d000 <vtable for CGPIOPin+0x158>
   82e90:	91098063 	add	x3, x3, #0x260
   82e94:	910003fd 	mov	x29, sp
   82e98:	a9025bf5 	stp	x21, x22, [sp, #32]
   82e9c:	b0000076 	adrp	x22, 8f000 <vtable for CDevice+0x720>
   82ea0:	f942a6c2 	ldr	x2, [x22, #1352]
   82ea4:	a90153f3 	stp	x19, x20, [sp, #16]
   82ea8:	2a0103f5 	mov	w21, w1
   82eac:	f9001bf7 	str	x23, [sp, #48]
   82eb0:	aa0003f3 	mov	x19, x0
   82eb4:	91060074 	add	x20, x3, #0x180
   82eb8:	9105a077 	add	x23, x3, #0x168
   82ebc:	b40000a2 	cbz	x2, 82ed0 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x48>
   82ec0:	eb02027f 	cmp	x19, x2
   82ec4:	54000140 	b.eq	82eec <CMachineInfo::AllocateDMAChannel(unsigned int)+0x64>  // b.none
   82ec8:	aa0203f3 	mov	x19, x2
   82ecc:	b5ffffa2 	cbnz	x2, 82ec0 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x38>
   82ed0:	52803262 	mov	w2, #0x193                 	// #403
   82ed4:	aa1703e1 	mov	x1, x23
   82ed8:	aa1403e0 	mov	x0, x20
   82edc:	940015d5 	bl	88630 <assertion_failed>
   82ee0:	f942a6c2 	ldr	x2, [x22, #1352]
   82ee4:	eb02027f 	cmp	x19, x2
   82ee8:	54ffff01 	b.ne	82ec8 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x40>  // b.any
   82eec:	721c6ebf 	tst	w21, #0xfffffff0
   82ef0:	54000201 	b.ne	82f30 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xa8>  // b.any
   82ef4:	710032bf 	cmp	w21, #0xc
   82ef8:	54000508 	b.hi	82f98 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x110>  // b.pmore
   82efc:	79403262 	ldrh	w2, [x19, #24]
   82f00:	1ad52840 	asr	w0, w2, w21
   82f04:	360002a0 	tbz	w0, #0, 82f58 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xd0>
   82f08:	52800021 	mov	w1, #0x1                   	// #1
   82f0c:	2a1503e0 	mov	w0, w21
   82f10:	1ad52035 	lsl	w21, w1, w21
   82f14:	0a350055 	bic	w21, w2, w21
   82f18:	79003275 	strh	w21, [x19, #24]
   82f1c:	a94153f3 	ldp	x19, x20, [sp, #16]
   82f20:	a9425bf5 	ldp	x21, x22, [sp, #32]
   82f24:	f9401bf7 	ldr	x23, [sp, #48]
   82f28:	a8c47bfd 	ldp	x29, x30, [sp], #64
   82f2c:	d65f03c0 	ret
   82f30:	710206bf 	cmp	w21, #0x81
   82f34:	79403262 	ldrh	w2, [x19, #24]
   82f38:	52800181 	mov	w1, #0xc                   	// #12
   82f3c:	528000c0 	mov	w0, #0x6                   	// #6
   82f40:	1a801021 	csel	w1, w1, w0, ne  // ne = any
   82f44:	1ac12840 	asr	w0, w2, w1
   82f48:	37000140 	tbnz	w0, #0, 82f70 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xe8>
   82f4c:	51000421 	sub	w1, w1, #0x1
   82f50:	3100043f 	cmn	w1, #0x1
   82f54:	54ffff81 	b.ne	82f44 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xbc>  // b.any
   82f58:	52801000 	mov	w0, #0x80                  	// #128
   82f5c:	f9401bf7 	ldr	x23, [sp, #48]
   82f60:	a94153f3 	ldp	x19, x20, [sp, #16]
   82f64:	a9425bf5 	ldp	x21, x22, [sp, #32]
   82f68:	a8c47bfd 	ldp	x29, x30, [sp], #64
   82f6c:	d65f03c0 	ret
   82f70:	52800023 	mov	w3, #0x1                   	// #1
   82f74:	2a0103e0 	mov	w0, w1
   82f78:	1ac12061 	lsl	w1, w3, w1
   82f7c:	0a210042 	bic	w2, w2, w1
   82f80:	79003262 	strh	w2, [x19, #24]
   82f84:	a94153f3 	ldp	x19, x20, [sp, #16]
   82f88:	a9425bf5 	ldp	x21, x22, [sp, #32]
   82f8c:	f9401bf7 	ldr	x23, [sp, #48]
   82f90:	a8c47bfd 	ldp	x29, x30, [sp], #64
   82f94:	d65f03c0 	ret
   82f98:	f0000040 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   82f9c:	91098000 	add	x0, x0, #0x260
   82fa0:	52803382 	mov	w2, #0x19c                 	// #412
   82fa4:	9105a001 	add	x1, x0, #0x168
   82fa8:	91064000 	add	x0, x0, #0x190
   82fac:	940015a1 	bl	88630 <assertion_failed>
   82fb0:	79403262 	ldrh	w2, [x19, #24]
   82fb4:	1ad52840 	asr	w0, w2, w21
   82fb8:	3707fa80 	tbnz	w0, #0, 82f08 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x80>
   82fbc:	17ffffe7 	b	82f58 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xd0>

0000000000082fc0 <CMachineInfo::FreeDMAChannel(unsigned int)>:
   82fc0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   82fc4:	f0000043 	adrp	x3, 8d000 <vtable for CGPIOPin+0x158>
   82fc8:	91098063 	add	x3, x3, #0x260
   82fcc:	910003fd 	mov	x29, sp
   82fd0:	a9025bf5 	stp	x21, x22, [sp, #32]
   82fd4:	b0000076 	adrp	x22, 8f000 <vtable for CDevice+0x720>
   82fd8:	f942a6c2 	ldr	x2, [x22, #1352]
   82fdc:	a90153f3 	stp	x19, x20, [sp, #16]
   82fe0:	2a0103f5 	mov	w21, w1
   82fe4:	f9001bf7 	str	x23, [sp, #48]
   82fe8:	aa0003f3 	mov	x19, x0
   82fec:	91060074 	add	x20, x3, #0x180
   82ff0:	9105a077 	add	x23, x3, #0x168
   82ff4:	b40000a2 	cbz	x2, 83008 <CMachineInfo::FreeDMAChannel(unsigned int)+0x48>
   82ff8:	eb02027f 	cmp	x19, x2
   82ffc:	54000140 	b.eq	83024 <CMachineInfo::FreeDMAChannel(unsigned int)+0x64>  // b.none
   83000:	aa0203f3 	mov	x19, x2
   83004:	b5ffffa2 	cbnz	x2, 82ff8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x38>
   83008:	52803702 	mov	w2, #0x1b8                 	// #440
   8300c:	aa1703e1 	mov	x1, x23
   83010:	aa1403e0 	mov	x0, x20
   83014:	94001587 	bl	88630 <assertion_failed>
   83018:	f942a6c2 	ldr	x2, [x22, #1352]
   8301c:	eb02027f 	cmp	x19, x2
   83020:	54ffff01 	b.ne	83000 <CMachineInfo::FreeDMAChannel(unsigned int)+0x40>  // b.any
   83024:	710032bf 	cmp	w21, #0xc
   83028:	54000288 	b.hi	83078 <CMachineInfo::FreeDMAChannel(unsigned int)+0xb8>  // b.pmore
   8302c:	79403261 	ldrh	w1, [x19, #24]
   83030:	1ad52820 	asr	w0, w1, w21
   83034:	36000100 	tbz	w0, #0, 83054 <CMachineInfo::FreeDMAChannel(unsigned int)+0x94>
   83038:	d0000040 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   8303c:	91098000 	add	x0, x0, #0x260
   83040:	9105a001 	add	x1, x0, #0x168
   83044:	52803822 	mov	w2, #0x1c1                 	// #449
   83048:	9106c000 	add	x0, x0, #0x1b0
   8304c:	94001579 	bl	88630 <assertion_failed>
   83050:	79403261 	ldrh	w1, [x19, #24]
   83054:	52800020 	mov	w0, #0x1                   	// #1
   83058:	f9401bf7 	ldr	x23, [sp, #48]
   8305c:	1ad52000 	lsl	w0, w0, w21
   83060:	2a010000 	orr	w0, w0, w1
   83064:	79003260 	strh	w0, [x19, #24]
   83068:	a94153f3 	ldp	x19, x20, [sp, #16]
   8306c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   83070:	a8c47bfd 	ldp	x29, x30, [sp], #64
   83074:	d65f03c0 	ret
   83078:	d0000040 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   8307c:	91098000 	add	x0, x0, #0x260
   83080:	9105a001 	add	x1, x0, #0x168
   83084:	52803802 	mov	w2, #0x1c0                 	// #448
   83088:	91064000 	add	x0, x0, #0x190
   8308c:	94001569 	bl	88630 <assertion_failed>
   83090:	17ffffe7 	b	8302c <CMachineInfo::FreeDMAChannel(unsigned int)+0x6c>

0000000000083094 <CMachineInfo::Get()>:
   83094:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   83098:	910003fd 	mov	x29, sp
   8309c:	f9000bf3 	str	x19, [sp, #16]
   830a0:	90000073 	adrp	x19, 8f000 <vtable for CDevice+0x720>
   830a4:	f942a660 	ldr	x0, [x19, #1352]
   830a8:	b4000080 	cbz	x0, 830b8 <CMachineInfo::Get()+0x24>
   830ac:	f9400bf3 	ldr	x19, [sp, #16]
   830b0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   830b4:	d65f03c0 	ret
   830b8:	d0000040 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   830bc:	91098000 	add	x0, x0, #0x260
   830c0:	9105a001 	add	x1, x0, #0x168
   830c4:	528038e2 	mov	w2, #0x1c7                 	// #455
   830c8:	91060000 	add	x0, x0, #0x180
   830cc:	94001559 	bl	88630 <assertion_failed>
   830d0:	f942a660 	ldr	x0, [x19, #1352]
   830d4:	f9400bf3 	ldr	x19, [sp, #16]
   830d8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   830dc:	d65f03c0 	ret

00000000000830e0 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool)>:
   830e0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   830e4:	910003fd 	mov	x29, sp
   830e8:	a90153f3 	stp	x19, x20, [sp, #16]
   830ec:	aa0003f3 	mov	x19, x0
   830f0:	a9025bf5 	stp	x21, x22, [sp, #32]
   830f4:	12001c74 	and	w20, w3, #0xff
   830f8:	2a0103f6 	mov	w22, w1
   830fc:	2a0203f5 	mov	w21, w2
   83100:	940017d4 	bl	89050 <CDevice::CDevice()>
   83104:	29015676 	stp	w22, w21, [x19, #8]
   83108:	39004274 	strb	w20, [x19, #16]
   8310c:	d0000040 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   83110:	91112000 	add	x0, x0, #0x448
   83114:	f9000260 	str	x0, [x19]
   83118:	f9000e7f 	str	xzr, [x19, #24]
   8311c:	91008260 	add	x0, x19, #0x20
   83120:	94001704 	bl	88d30 <CCharGenerator::CCharGenerator()>
   83124:	f900167f 	str	xzr, [x19, #40]
   83128:	52800021 	mov	w1, #0x1                   	// #1
   8312c:	12800400 	mov	w0, #0xffffffdf            	// #-33
   83130:	f804427f 	stur	xzr, [x19, #68]
   83134:	d2800002 	mov	x2, #0x0                   	// #0
   83138:	f9002a7f 	str	xzr, [x19, #80]
   8313c:	39016261 	strb	w1, [x19, #88]
   83140:	52801021 	mov	w1, #0x81                  	// #129
   83144:	7900b660 	strh	w0, [x19, #90]
   83148:	9101c260 	add	x0, x19, #0x70
   8314c:	3901727f 	strb	wzr, [x19, #92]
   83150:	3901a27f 	strb	wzr, [x19, #104]
   83154:	940017c3 	bl	89060 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)>
   83158:	52800020 	mov	w0, #0x1                   	// #1
   8315c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   83160:	b900c260 	str	w0, [x19, #192]
   83164:	a94153f3 	ldp	x19, x20, [sp, #16]
   83168:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8316c:	d65f03c0 	ret

0000000000083170 <CScreenDevice::~CScreenDevice()>:
   83170:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   83174:	910003fd 	mov	x29, sp
   83178:	a90153f3 	stp	x19, x20, [sp, #16]
   8317c:	aa0003f3 	mov	x19, x0
   83180:	d0000040 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   83184:	91112000 	add	x0, x0, #0x448
   83188:	39404261 	ldrb	w1, [x19, #16]
   8318c:	f9000260 	str	x0, [x19]
   83190:	34000081 	cbz	w1, 831a0 <CScreenDevice::~CScreenDevice()+0x30>
   83194:	f9401660 	ldr	x0, [x19, #40]
   83198:	b4000040 	cbz	x0, 831a0 <CScreenDevice::~CScreenDevice()+0x30>
   8319c:	9400138d 	bl	87fd0 <operator delete[](void*)>
   831a0:	f9400e74 	ldr	x20, [x19, #24]
   831a4:	f900167f 	str	xzr, [x19, #40]
   831a8:	b40000d4 	cbz	x20, 831c0 <CScreenDevice::~CScreenDevice()+0x50>
   831ac:	aa1403e0 	mov	x0, x20
   831b0:	940015b0 	bl	88870 <CBcmFrameBuffer::~CBcmFrameBuffer()>
   831b4:	d2801301 	mov	x1, #0x98                  	// #152
   831b8:	aa1403e0 	mov	x0, x20
   831bc:	94001389 	bl	87fe0 <operator delete(void*, unsigned long)>
   831c0:	f9000e7f 	str	xzr, [x19, #24]
   831c4:	9101c260 	add	x0, x19, #0x70
   831c8:	940017ea 	bl	89170 <CDMAChannel::~CDMAChannel()>
   831cc:	91008260 	add	x0, x19, #0x20
   831d0:	940016dc 	bl	88d40 <CCharGenerator::~CCharGenerator()>
   831d4:	aa1303e0 	mov	x0, x19
   831d8:	a94153f3 	ldp	x19, x20, [sp, #16]
   831dc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   831e0:	1400178c 	b	89010 <CDevice::~CDevice()>
   831e4:	d503201f 	nop
   831e8:	d503201f 	nop
   831ec:	d503201f 	nop

00000000000831f0 <CScreenDevice::~CScreenDevice()>:
   831f0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   831f4:	910003fd 	mov	x29, sp
   831f8:	f9000bf3 	str	x19, [sp, #16]
   831fc:	aa0003f3 	mov	x19, x0
   83200:	97ffffdc 	bl	83170 <CScreenDevice::~CScreenDevice()>
   83204:	aa1303e0 	mov	x0, x19
   83208:	f9400bf3 	ldr	x19, [sp, #16]
   8320c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   83210:	d2801901 	mov	x1, #0xc8                  	// #200
   83214:	14001373 	b	87fe0 <operator delete(void*, unsigned long)>
   83218:	d503201f 	nop
   8321c:	d503201f 	nop

0000000000083220 <CScreenDevice::Initialize()>:
   83220:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   83224:	910003fd 	mov	x29, sp
   83228:	f90013f5 	str	x21, [sp, #32]
   8322c:	39404015 	ldrb	w21, [x0, #16]
   83230:	a90153f3 	stp	x19, x20, [sp, #16]
   83234:	aa0003f3 	mov	x19, x0
   83238:	35000275 	cbnz	w21, 83284 <CScreenDevice::Initialize()+0x64>
   8323c:	d2801300 	mov	x0, #0x98                  	// #152
   83240:	94001358 	bl	87fa0 <operator new(unsigned long)>
   83244:	29410a61 	ldp	w1, w2, [x19, #8]
   83248:	aa0003f4 	mov	x20, x0
   8324c:	52800005 	mov	w5, #0x0                   	// #0
   83250:	52800004 	mov	w4, #0x0                   	// #0
   83254:	52800203 	mov	w3, #0x10                  	// #16
   83258:	9400153e 	bl	88750 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   8325c:	f9000e74 	str	x20, [x19, #24]
   83260:	aa1403e0 	mov	x0, x20
   83264:	9400159f 	bl	888e0 <CBcmFrameBuffer::Initialize()>
   83268:	72001c1f 	tst	w0, #0xff
   8326c:	54000561 	b.ne	83318 <CScreenDevice::Initialize()+0xf8>  // b.any
   83270:	2a1503e0 	mov	w0, w21
   83274:	f94013f5 	ldr	x21, [sp, #32]
   83278:	a94153f3 	ldp	x19, x20, [sp, #16]
   8327c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   83280:	d65f03c0 	ret
   83284:	29410400 	ldp	w0, w1, [x0, #8]
   83288:	29068260 	stp	w0, w0, [x19, #52]
   8328c:	b9003e61 	str	w1, [x19, #60]
   83290:	1b017c00 	mul	w0, w0, w1
   83294:	0b000001 	add	w1, w0, w0
   83298:	b9003261 	str	w1, [x19, #48]
   8329c:	d37f7c00 	ubfiz	x0, x0, #1, #32
   832a0:	94001344 	bl	87fb0 <operator new[](unsigned long)>
   832a4:	b9403e74 	ldr	w20, [x19, #60]
   832a8:	f9001660 	str	x0, [x19, #40]
   832ac:	91008275 	add	x21, x19, #0x20
   832b0:	aa1503e0 	mov	x0, x21
   832b4:	940016ab 	bl	88d60 <CCharGenerator::GetCharHeight() const>
   832b8:	1ac00a94 	udiv	w20, w20, w0
   832bc:	aa1503e0 	mov	x0, x21
   832c0:	940016a8 	bl	88d60 <CCharGenerator::GetCharHeight() const>
   832c4:	b9404a61 	ldr	w1, [x19, #72]
   832c8:	b9005661 	str	w1, [x19, #84]
   832cc:	1b007e94 	mul	w20, w20, w0
   832d0:	aa1303e0 	mov	x0, x19
   832d4:	b9004274 	str	w20, [x19, #64]
   832d8:	2909fe74 	stp	w20, wzr, [x19, #76]
   832dc:	940001c9 	bl	83a00 <CScreenDevice::ClearDisplayEnd()>
   832e0:	39416260 	ldrb	w0, [x19, #88]
   832e4:	35000500 	cbnz	w0, 83384 <CScreenDevice::Initialize()+0x164>
   832e8:	97fff77a 	bl	810d0 <CDeviceNameService::Get()>
   832ec:	52800035 	mov	w21, #0x1                   	// #1
   832f0:	d0000041 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   832f4:	52800003 	mov	w3, #0x0                   	// #0
   832f8:	aa1303e2 	mov	x2, x19
   832fc:	91074021 	add	x1, x1, #0x1d0
   83300:	97fff68c 	bl	80d30 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   83304:	2a1503e0 	mov	w0, w21
   83308:	f94013f5 	ldr	x21, [sp, #32]
   8330c:	a94153f3 	ldp	x19, x20, [sp, #16]
   83310:	a8c37bfd 	ldp	x29, x30, [sp], #48
   83314:	d65f03c0 	ret
   83318:	f9400e60 	ldr	x0, [x19, #24]
   8331c:	940015b1 	bl	889e0 <CBcmFrameBuffer::GetDepth() const>
   83320:	7100401f 	cmp	w0, #0x10
   83324:	54fffa61 	b.ne	83270 <CScreenDevice::Initialize()+0x50>  // b.any
   83328:	f9400e60 	ldr	x0, [x19, #24]
   8332c:	940015b1 	bl	889f0 <CBcmFrameBuffer::GetBuffer() const>
   83330:	2a0003e1 	mov	w1, w0
   83334:	f9400e60 	ldr	x0, [x19, #24]
   83338:	f9001661 	str	x1, [x19, #40]
   8333c:	940015b1 	bl	88a00 <CBcmFrameBuffer::GetSize() const>
   83340:	b9003260 	str	w0, [x19, #48]
   83344:	f9400e60 	ldr	x0, [x19, #24]
   83348:	940015a2 	bl	889d0 <CBcmFrameBuffer::GetPitch() const>
   8334c:	b9003660 	str	w0, [x19, #52]
   83350:	f9400e60 	ldr	x0, [x19, #24]
   83354:	9400158f 	bl	88990 <CBcmFrameBuffer::GetWidth() const>
   83358:	b9003a60 	str	w0, [x19, #56]
   8335c:	f9400e60 	ldr	x0, [x19, #24]
   83360:	94001590 	bl	889a0 <CBcmFrameBuffer::GetHeight() const>
   83364:	2a0003f4 	mov	w20, w0
   83368:	b9403660 	ldr	w0, [x19, #52]
   8336c:	b9003e74 	str	w20, [x19, #60]
   83370:	f240041f 	tst	x0, #0x3
   83374:	54fff7e1 	b.ne	83270 <CScreenDevice::Initialize()+0x50>  // b.any
   83378:	53017c00 	lsr	w0, w0, #1
   8337c:	b9003660 	str	w0, [x19, #52]
   83380:	17ffffcb 	b	832ac <CScreenDevice::Initialize()+0x8c>
   83384:	aa1303e0 	mov	x0, x19
   83388:	940003f6 	bl	84360 <CScreenDevice::InvertCursor() [clone .part.6]>
   8338c:	52800035 	mov	w21, #0x1                   	// #1
   83390:	97fff750 	bl	810d0 <CDeviceNameService::Get()>
   83394:	52800003 	mov	w3, #0x0                   	// #0
   83398:	d0000041 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   8339c:	aa1303e2 	mov	x2, x19
   833a0:	91074021 	add	x1, x1, #0x1d0
   833a4:	97fff663 	bl	80d30 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   833a8:	17ffffd7 	b	83304 <CScreenDevice::Initialize()+0xe4>
   833ac:	d503201f 	nop

00000000000833b0 <CScreenDevice::GetWidth() const>:
   833b0:	b9403800 	ldr	w0, [x0, #56]
   833b4:	d65f03c0 	ret
   833b8:	d503201f 	nop
   833bc:	d503201f 	nop

00000000000833c0 <CScreenDevice::GetHeight() const>:
   833c0:	b9403c00 	ldr	w0, [x0, #60]
   833c4:	d65f03c0 	ret
   833c8:	d503201f 	nop
   833cc:	d503201f 	nop

00000000000833d0 <CScreenDevice::GetColumns() const>:
   833d0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   833d4:	aa0003e1 	mov	x1, x0
   833d8:	91008000 	add	x0, x0, #0x20
   833dc:	910003fd 	mov	x29, sp
   833e0:	f9000bf3 	str	x19, [sp, #16]
   833e4:	b9403833 	ldr	w19, [x1, #56]
   833e8:	9400165a 	bl	88d50 <CCharGenerator::GetCharWidth() const>
   833ec:	1ac00a60 	udiv	w0, w19, w0
   833f0:	f9400bf3 	ldr	x19, [sp, #16]
   833f4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   833f8:	d65f03c0 	ret
   833fc:	d503201f 	nop

0000000000083400 <CScreenDevice::GetRows() const>:
   83400:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   83404:	aa0003e1 	mov	x1, x0
   83408:	91008000 	add	x0, x0, #0x20
   8340c:	910003fd 	mov	x29, sp
   83410:	f9000bf3 	str	x19, [sp, #16]
   83414:	b9404033 	ldr	w19, [x1, #64]
   83418:	94001652 	bl	88d60 <CCharGenerator::GetCharHeight() const>
   8341c:	1ac00a60 	udiv	w0, w19, w0
   83420:	f9400bf3 	ldr	x19, [sp, #16]
   83424:	a8c27bfd 	ldp	x29, x30, [sp], #32
   83428:	d65f03c0 	ret
   8342c:	d503201f 	nop

0000000000083430 <CScreenDevice::GetStatus()>:
   83430:	2948a80b 	ldp	w11, w10, [x0, #68]
   83434:	29499c09 	ldp	w9, w7, [x0, #76]
   83438:	2902250a 	stp	w10, w9, [x8, #16]
   8343c:	39416005 	ldrb	w5, [x0, #88]
   83440:	7940b404 	ldrh	w4, [x0, #90]
   83444:	39417003 	ldrb	w3, [x0, #92]
   83448:	b940300c 	ldr	w12, [x0, #48]
   8344c:	b9405406 	ldr	w6, [x0, #84]
   83450:	294c0402 	ldp	w2, w1, [x0, #96]
   83454:	29012d0c 	stp	w12, w11, [x8, #8]
   83458:	f940140d 	ldr	x13, [x0, #40]
   8345c:	3941a000 	ldrb	w0, [x0, #104]
   83460:	f900010d 	str	x13, [x8]
   83464:	29031907 	stp	w7, w6, [x8, #24]
   83468:	39008105 	strb	w5, [x8, #32]
   8346c:	79004504 	strh	w4, [x8, #34]
   83470:	39009103 	strb	w3, [x8, #36]
   83474:	29050502 	stp	w2, w1, [x8, #40]
   83478:	3900c100 	strb	w0, [x8, #48]
   8347c:	d65f03c0 	ret

0000000000083480 <CScreenDevice::SetStatus(TScreenStatus const&)>:
   83480:	b9403003 	ldr	w3, [x0, #48]
   83484:	b9400822 	ldr	w2, [x1, #8]
   83488:	6b02007f 	cmp	w3, w2
   8348c:	54000060 	b.eq	83498 <CScreenDevice::SetStatus(TScreenStatus const&)+0x18>  // b.none
   83490:	52800000 	mov	w0, #0x0                   	// #0
   83494:	d65f03c0 	ret
   83498:	29468803 	ldp	w3, w2, [x0, #52]
   8349c:	6b02007f 	cmp	w3, w2
   834a0:	54ffff81 	b.ne	83490 <CScreenDevice::SetStatus(TScreenStatus const&)+0x10>  // b.any
   834a4:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   834a8:	910003fd 	mov	x29, sp
   834ac:	a90153f3 	stp	x19, x20, [sp, #16]
   834b0:	aa0003f3 	mov	x19, x0
   834b4:	b940c000 	ldr	w0, [x0, #192]
   834b8:	aa0103f4 	mov	x20, x1
   834bc:	35000380 	cbnz	w0, 8352c <CScreenDevice::SetStatus(TScreenStatus const&)+0xac>
   834c0:	3941a260 	ldrb	w0, [x19, #104]
   834c4:	35000440 	cbnz	w0, 8354c <CScreenDevice::SetStatus(TScreenStatus const&)+0xcc>
   834c8:	3940c020 	ldrb	w0, [x1, #48]
   834cc:	35000400 	cbnz	w0, 8354c <CScreenDevice::SetStatus(TScreenStatus const&)+0xcc>
   834d0:	b9403262 	ldr	w2, [x19, #48]
   834d4:	f9400281 	ldr	x1, [x20]
   834d8:	f9401660 	ldr	x0, [x19, #40]
   834dc:	94000e9f 	bl	86f58 <memcpy>
   834e0:	b940c260 	ldr	w0, [x19, #192]
   834e4:	39408285 	ldrb	w5, [x20, #32]
   834e8:	79404684 	ldrh	w4, [x20, #34]
   834ec:	39409283 	ldrb	w3, [x20, #36]
   834f0:	2941a68a 	ldp	w10, w9, [x20, #12]
   834f4:	29429e88 	ldp	w8, w7, [x20, #20]
   834f8:	b9401e86 	ldr	w6, [x20, #28]
   834fc:	29450682 	ldp	w2, w1, [x20, #40]
   83500:	2908a66a 	stp	w10, w9, [x19, #68]
   83504:	29099e68 	stp	w8, w7, [x19, #76]
   83508:	b9005666 	str	w6, [x19, #84]
   8350c:	39016265 	strb	w5, [x19, #88]
   83510:	7900b664 	strh	w4, [x19, #90]
   83514:	39017263 	strb	w3, [x19, #92]
   83518:	290c0662 	stp	w2, w1, [x19, #96]
   8351c:	35000200 	cbnz	w0, 8355c <CScreenDevice::SetStatus(TScreenStatus const&)+0xdc>
   83520:	d5033fbf 	dmb	sy
   83524:	52800020 	mov	w0, #0x1                   	// #1
   83528:	1400000a 	b	83550 <CScreenDevice::SetStatus(TScreenStatus const&)+0xd0>
   8352c:	94001059 	bl	87690 <EnterCritical>
   83530:	3941a260 	ldrb	w0, [x19, #104]
   83534:	35000060 	cbnz	w0, 83540 <CScreenDevice::SetStatus(TScreenStatus const&)+0xc0>
   83538:	3940c280 	ldrb	w0, [x20, #48]
   8353c:	34fffca0 	cbz	w0, 834d0 <CScreenDevice::SetStatus(TScreenStatus const&)+0x50>
   83540:	b940c260 	ldr	w0, [x19, #192]
   83544:	34000040 	cbz	w0, 8354c <CScreenDevice::SetStatus(TScreenStatus const&)+0xcc>
   83548:	9400108a 	bl	87770 <LeaveCritical>
   8354c:	52800000 	mov	w0, #0x0                   	// #0
   83550:	a94153f3 	ldp	x19, x20, [sp, #16]
   83554:	a8c27bfd 	ldp	x29, x30, [sp], #32
   83558:	d65f03c0 	ret
   8355c:	94001085 	bl	87770 <LeaveCritical>
   83560:	17fffff0 	b	83520 <CScreenDevice::SetStatus(TScreenStatus const&)+0xa0>
   83564:	d503201f 	nop
   83568:	d503201f 	nop
   8356c:	d503201f 	nop

0000000000083570 <CScreenDevice::Write(void const*, unsigned long)>:
   83570:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   83574:	910003fd 	mov	x29, sp
   83578:	a90153f3 	stp	x19, x20, [sp, #16]
   8357c:	aa0003f4 	mov	x20, x0
   83580:	b940c000 	ldr	w0, [x0, #192]
   83584:	aa0103f3 	mov	x19, x1
   83588:	a9025bf5 	stp	x21, x22, [sp, #32]
   8358c:	aa0203f5 	mov	x21, x2
   83590:	35000440 	cbnz	w0, 83618 <CScreenDevice::Write(void const*, unsigned long)+0xa8>
   83594:	39416280 	ldrb	w0, [x20, #88]
   83598:	52800021 	mov	w1, #0x1                   	// #1
   8359c:	3901a281 	strb	w1, [x20, #104]
   835a0:	35000300 	cbnz	w0, 83600 <CScreenDevice::Write(void const*, unsigned long)+0x90>
   835a4:	d10006b6 	sub	x22, x21, #0x1
   835a8:	b40003d5 	cbz	x21, 83620 <CScreenDevice::Write(void const*, unsigned long)+0xb0>
   835ac:	8b150275 	add	x21, x19, x21
   835b0:	38401661 	ldrb	w1, [x19], #1
   835b4:	aa1403e0 	mov	x0, x20
   835b8:	9400001e 	bl	83630 <CScreenDevice::Write(char)>
   835bc:	eb15027f 	cmp	x19, x21
   835c0:	54ffff81 	b.ne	835b0 <CScreenDevice::Write(void const*, unsigned long)+0x40>  // b.any
   835c4:	110006d6 	add	w22, w22, #0x1
   835c8:	39416280 	ldrb	w0, [x20, #88]
   835cc:	34000060 	cbz	w0, 835d8 <CScreenDevice::Write(void const*, unsigned long)+0x68>
   835d0:	aa1403e0 	mov	x0, x20
   835d4:	94000363 	bl	84360 <CScreenDevice::InvertCursor() [clone .part.6]>
   835d8:	b940c280 	ldr	w0, [x20, #192]
   835dc:	3901a29f 	strb	wzr, [x20, #104]
   835e0:	34000040 	cbz	w0, 835e8 <CScreenDevice::Write(void const*, unsigned long)+0x78>
   835e4:	94001063 	bl	87770 <LeaveCritical>
   835e8:	d5033fbf 	dmb	sy
   835ec:	2a1603e0 	mov	w0, w22
   835f0:	a94153f3 	ldp	x19, x20, [sp, #16]
   835f4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   835f8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   835fc:	d65f03c0 	ret
   83600:	aa1403e0 	mov	x0, x20
   83604:	d10006b6 	sub	x22, x21, #0x1
   83608:	94000356 	bl	84360 <CScreenDevice::InvertCursor() [clone .part.6]>
   8360c:	b5fffd15 	cbnz	x21, 835ac <CScreenDevice::Write(void const*, unsigned long)+0x3c>
   83610:	52800016 	mov	w22, #0x0                   	// #0
   83614:	17ffffed 	b	835c8 <CScreenDevice::Write(void const*, unsigned long)+0x58>
   83618:	9400101e 	bl	87690 <EnterCritical>
   8361c:	17ffffde 	b	83594 <CScreenDevice::Write(void const*, unsigned long)+0x24>
   83620:	52800016 	mov	w22, #0x0                   	// #0
   83624:	17ffffed 	b	835d8 <CScreenDevice::Write(void const*, unsigned long)+0x68>
   83628:	d503201f 	nop
   8362c:	d503201f 	nop

0000000000083630 <CScreenDevice::Write(char)>:
   83630:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   83634:	13001c21 	sxtb	w1, w1
   83638:	910003fd 	mov	x29, sp
   8363c:	b9404402 	ldr	w2, [x0, #68]
   83640:	f9000bf3 	str	x19, [sp, #16]
   83644:	aa0003f3 	mov	x19, x0
   83648:	71000c5f 	cmp	w2, #0x3
   8364c:	54000b60 	b.eq	837b8 <CScreenDevice::Write(char)+0x188>  // b.none
   83650:	54000349 	b.ls	836b8 <CScreenDevice::Write(char)+0x88>  // b.plast
   83654:	7100145f 	cmp	w2, #0x5
   83658:	54000a00 	b.eq	83798 <CScreenDevice::Write(char)+0x168>  // b.none
   8365c:	540008e3 	b.cc	83778 <CScreenDevice::Write(char)+0x148>  // b.lo, b.ul, b.last
   83660:	7100185f 	cmp	w2, #0x6
   83664:	54000440 	b.eq	836ec <CScreenDevice::Write(char)+0xbc>  // b.none
   83668:	71001c5f 	cmp	w2, #0x7
   8366c:	540001e1 	b.ne	836a8 <CScreenDevice::Write(char)+0x78>  // b.any
   83670:	7101a03f 	cmp	w1, #0x68
   83674:	54000d60 	b.eq	83820 <CScreenDevice::Write(char)+0x1f0>  // b.none
   83678:	7101b03f 	cmp	w1, #0x6c
   8367c:	54000d20 	b.eq	83820 <CScreenDevice::Write(char)+0x1f0>  // b.none
   83680:	5100c021 	sub	w1, w1, #0x30
   83684:	12001c20 	and	w0, w1, #0xff
   83688:	7100241f 	cmp	w0, #0x9
   8368c:	540000e8 	b.hi	836a8 <CScreenDevice::Write(char)+0x78>  // b.pmore
   83690:	b9406260 	ldr	w0, [x19, #96]
   83694:	52800142 	mov	w2, #0xa                   	// #10
   83698:	1b020401 	madd	w1, w0, w2, w1
   8369c:	b9006261 	str	w1, [x19, #96]
   836a0:	71018c3f 	cmp	w1, #0x63
   836a4:	54000049 	b.ls	836ac <CScreenDevice::Write(char)+0x7c>  // b.plast
   836a8:	b900467f 	str	wzr, [x19, #68]
   836ac:	f9400bf3 	ldr	x19, [sp, #16]
   836b0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   836b4:	d65f03c0 	ret
   836b8:	7100045f 	cmp	w2, #0x1
   836bc:	54000a80 	b.eq	8380c <CScreenDevice::Write(char)+0x1dc>  // b.none
   836c0:	54000348 	b.hi	83728 <CScreenDevice::Write(char)+0xf8>  // b.pmore
   836c4:	7100283f 	cmp	w1, #0xa
   836c8:	540013e0 	b.eq	83944 <CScreenDevice::Write(char)+0x314>  // b.none
   836cc:	54000cec 	b.gt	83868 <CScreenDevice::Write(char)+0x238>
   836d0:	7100203f 	cmp	w1, #0x8
   836d4:	54001320 	b.eq	83938 <CScreenDevice::Write(char)+0x308>  // b.none
   836d8:	7100243f 	cmp	w1, #0x9
   836dc:	54001181 	b.ne	8390c <CScreenDevice::Write(char)+0x2dc>  // b.any
   836e0:	f9400bf3 	ldr	x19, [sp, #16]
   836e4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   836e8:	140001fa 	b	83ed0 <CScreenDevice::Tabulator()>
   836ec:	7101203f 	cmp	w1, #0x48
   836f0:	54000f80 	b.eq	838e0 <CScreenDevice::Write(char)+0x2b0>  // b.none
   836f4:	7101c83f 	cmp	w1, #0x72
   836f8:	54000d40 	b.eq	838a0 <CScreenDevice::Write(char)+0x270>  // b.none
   836fc:	5100c021 	sub	w1, w1, #0x30
   83700:	12001c20 	and	w0, w1, #0xff
   83704:	7100241f 	cmp	w0, #0x9
   83708:	54fffd08 	b.hi	836a8 <CScreenDevice::Write(char)+0x78>  // b.pmore
   8370c:	b9406660 	ldr	w0, [x19, #100]
   83710:	52800142 	mov	w2, #0xa                   	// #10
   83714:	1b020401 	madd	w1, w0, w2, w1
   83718:	b9006661 	str	w1, [x19, #100]
   8371c:	71031c3f 	cmp	w1, #0xc7
   83720:	54fffc48 	b.hi	836a8 <CScreenDevice::Write(char)+0x78>  // b.pmore
   83724:	17ffffe2 	b	836ac <CScreenDevice::Write(char)+0x7c>
   83728:	7101203f 	cmp	w1, #0x48
   8372c:	540013e0 	b.eq	839a8 <CScreenDevice::Write(char)+0x378>  // b.none
   83730:	5400086c 	b.gt	8383c <CScreenDevice::Write(char)+0x20c>
   83734:	7101083f 	cmp	w1, #0x42
   83738:	54000ce0 	b.eq	838d4 <CScreenDevice::Write(char)+0x2a4>  // b.none
   8373c:	54000dac 	b.gt	838f0 <CScreenDevice::Write(char)+0x2c0>
   83740:	7100fc3f 	cmp	w1, #0x3f
   83744:	54001400 	b.eq	839c4 <CScreenDevice::Write(char)+0x394>  // b.none
   83748:	7101043f 	cmp	w1, #0x41
   8374c:	54000b41 	b.ne	838b4 <CScreenDevice::Write(char)+0x284>  // b.any
   83750:	b9404800 	ldr	w0, [x0, #72]
   83754:	b9405661 	ldr	w1, [x19, #84]
   83758:	6b00003f 	cmp	w1, w0
   8375c:	54fffa69 	b.ls	836a8 <CScreenDevice::Write(char)+0x78>  // b.plast
   83760:	91008260 	add	x0, x19, #0x20
   83764:	9400157f 	bl	88d60 <CCharGenerator::GetCharHeight() const>
   83768:	b9405661 	ldr	w1, [x19, #84]
   8376c:	4b000020 	sub	w0, w1, w0
   83770:	b9005660 	str	w0, [x19, #84]
   83774:	17ffffcd 	b	836a8 <CScreenDevice::Write(char)+0x78>
   83778:	5100c021 	sub	w1, w1, #0x30
   8377c:	12001c20 	and	w0, w1, #0xff
   83780:	7100241f 	cmp	w0, #0x9
   83784:	54fff928 	b.hi	836a8 <CScreenDevice::Write(char)+0x78>  // b.pmore
   83788:	528000e0 	mov	w0, #0x7                   	// #7
   8378c:	b9004660 	str	w0, [x19, #68]
   83790:	b9006261 	str	w1, [x19, #96]
   83794:	17ffffc6 	b	836ac <CScreenDevice::Write(char)+0x7c>
   83798:	5100c021 	sub	w1, w1, #0x30
   8379c:	12001c20 	and	w0, w1, #0xff
   837a0:	7100241f 	cmp	w0, #0x9
   837a4:	54fff828 	b.hi	836a8 <CScreenDevice::Write(char)+0x78>  // b.pmore
   837a8:	528000c0 	mov	w0, #0x6                   	// #6
   837ac:	b9004660 	str	w0, [x19, #68]
   837b0:	b9006661 	str	w1, [x19, #100]
   837b4:	17ffffbe 	b	836ac <CScreenDevice::Write(char)+0x7c>
   837b8:	7101403f 	cmp	w1, #0x50
   837bc:	54fff760 	b.eq	836a8 <CScreenDevice::Write(char)+0x78>  // b.none
   837c0:	5400062d 	b.le	83884 <CScreenDevice::Write(char)+0x254>
   837c4:	7101a03f 	cmp	w1, #0x68
   837c8:	54000dc0 	b.eq	83980 <CScreenDevice::Write(char)+0x350>  // b.none
   837cc:	54000c8d 	b.le	8395c <CScreenDevice::Write(char)+0x32c>
   837d0:	7101b03f 	cmp	w1, #0x6c
   837d4:	54000d60 	b.eq	83980 <CScreenDevice::Write(char)+0x350>  // b.none
   837d8:	7101b43f 	cmp	w1, #0x6d
   837dc:	54fff521 	b.ne	83680 <CScreenDevice::Write(char)+0x50>  // b.any
   837e0:	b9406000 	ldr	w0, [x0, #96]
   837e4:	7100041f 	cmp	w0, #0x1
   837e8:	54000f40 	b.eq	839d0 <CScreenDevice::Write(char)+0x3a0>  // b.none
   837ec:	340000a0 	cbz	w0, 83800 <CScreenDevice::Write(char)+0x1d0>
   837f0:	7100081f 	cmp	w0, #0x2
   837f4:	54000f40 	b.eq	839dc <CScreenDevice::Write(char)+0x3ac>  // b.none
   837f8:	71006c1f 	cmp	w0, #0x1b
   837fc:	54fff561 	b.ne	836a8 <CScreenDevice::Write(char)+0x78>  // b.any
   83800:	12800400 	mov	w0, #0xffffffdf            	// #-33
   83804:	7900b660 	strh	w0, [x19, #90]
   83808:	17ffffa8 	b	836a8 <CScreenDevice::Write(char)+0x78>
   8380c:	71016c3f 	cmp	w1, #0x5b
   83810:	54fff4c1 	b.ne	836a8 <CScreenDevice::Write(char)+0x78>  // b.any
   83814:	52800040 	mov	w0, #0x2                   	// #2
   83818:	b9004660 	str	w0, [x19, #68]
   8381c:	17ffffa4 	b	836ac <CScreenDevice::Write(char)+0x7c>
   83820:	b9406260 	ldr	w0, [x19, #96]
   83824:	7100641f 	cmp	w0, #0x19
   83828:	54fff401 	b.ne	836a8 <CScreenDevice::Write(char)+0x78>  // b.any
   8382c:	7101a03f 	cmp	w1, #0x68
   83830:	1a9f17e0 	cset	w0, eq  // eq = none
   83834:	39016260 	strb	w0, [x19, #88]
   83838:	17ffff9c 	b	836a8 <CScreenDevice::Write(char)+0x78>
   8383c:	7101343f 	cmp	w1, #0x4d
   83840:	5400036c 	b.gt	838ac <CScreenDevice::Write(char)+0x27c>
   83844:	7101303f 	cmp	w1, #0x4c
   83848:	54fff30a 	b.ge	836a8 <CScreenDevice::Write(char)+0x78>  // b.tcont
   8384c:	7101283f 	cmp	w1, #0x4a
   83850:	54000a60 	b.eq	8399c <CScreenDevice::Write(char)+0x36c>  // b.none
   83854:	71012c3f 	cmp	w1, #0x4b
   83858:	540002e1 	b.ne	838b4 <CScreenDevice::Write(char)+0x284>  // b.any
   8385c:	94000095 	bl	83ab0 <CScreenDevice::ClearLineEnd()>
   83860:	b900467f 	str	wzr, [x19, #68]
   83864:	17ffff92 	b	836ac <CScreenDevice::Write(char)+0x7c>
   83868:	7100343f 	cmp	w1, #0xd
   8386c:	54000740 	b.eq	83954 <CScreenDevice::Write(char)+0x324>  // b.none
   83870:	71006c3f 	cmp	w1, #0x1b
   83874:	540004c1 	b.ne	8390c <CScreenDevice::Write(char)+0x2dc>  // b.any
   83878:	52800020 	mov	w0, #0x1                   	// #1
   8387c:	b9004660 	str	w0, [x19, #68]
   83880:	17ffff8b 	b	836ac <CScreenDevice::Write(char)+0x7c>
   83884:	7100ec3f 	cmp	w1, #0x3b
   83888:	54000760 	b.eq	83974 <CScreenDevice::Write(char)+0x344>  // b.none
   8388c:	54ffefab 	b.lt	83680 <CScreenDevice::Write(char)+0x50>  // b.tstop
   83890:	51013020 	sub	w0, w1, #0x4c
   83894:	7100041f 	cmp	w0, #0x1
   83898:	54fff089 	b.ls	836a8 <CScreenDevice::Write(char)+0x78>  // b.plast
   8389c:	17ffff79 	b	83680 <CScreenDevice::Write(char)+0x50>
   838a0:	294c0801 	ldp	w1, w2, [x0, #96]
   838a4:	94000157 	bl	83e00 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>
   838a8:	17ffff80 	b	836a8 <CScreenDevice::Write(char)+0x78>
   838ac:	7101403f 	cmp	w1, #0x50
   838b0:	54ffefc0 	b.eq	836a8 <CScreenDevice::Write(char)+0x78>  // b.none
   838b4:	5100c021 	sub	w1, w1, #0x30
   838b8:	12001c20 	and	w0, w1, #0xff
   838bc:	7100241f 	cmp	w0, #0x9
   838c0:	54ffef48 	b.hi	836a8 <CScreenDevice::Write(char)+0x78>  // b.pmore
   838c4:	52800060 	mov	w0, #0x3                   	// #3
   838c8:	b9004660 	str	w0, [x19, #68]
   838cc:	b9006261 	str	w1, [x19, #96]
   838d0:	17ffff77 	b	836ac <CScreenDevice::Write(char)+0x7c>
   838d4:	9400008f 	bl	83b10 <CScreenDevice::CursorDown()>
   838d8:	b900467f 	str	wzr, [x19, #68]
   838dc:	17ffff74 	b	836ac <CScreenDevice::Write(char)+0x7c>
   838e0:	294c0801 	ldp	w1, w2, [x0, #96]
   838e4:	940000cf 	bl	83c20 <CScreenDevice::CursorMove(unsigned int, unsigned int)>
   838e8:	b900467f 	str	wzr, [x19, #68]
   838ec:	17ffff70 	b	836ac <CScreenDevice::Write(char)+0x7c>
   838f0:	71010c3f 	cmp	w1, #0x43
   838f4:	54000620 	b.eq	839b8 <CScreenDevice::Write(char)+0x388>  // b.none
   838f8:	7101103f 	cmp	w1, #0x44
   838fc:	54fffdc1 	b.ne	838b4 <CScreenDevice::Write(char)+0x284>  // b.any
   83900:	940000a0 	bl	83b80 <CScreenDevice::CursorLeft()>
   83904:	b900467f 	str	wzr, [x19, #68]
   83908:	17ffff69 	b	836ac <CScreenDevice::Write(char)+0x7c>
   8390c:	12001c20 	and	w0, w1, #0xff
   83910:	71007c1f 	cmp	w0, #0x1f
   83914:	54ffecc9 	b.ls	836ac <CScreenDevice::Write(char)+0x7c>  // b.plast
   83918:	7940b664 	ldrh	w4, [x19, #90]
   8391c:	aa1303e0 	mov	x0, x19
   83920:	294a0e62 	ldp	w2, w3, [x19, #80]
   83924:	940001bf 	bl	84020 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
   83928:	aa1303e0 	mov	x0, x19
   8392c:	f9400bf3 	ldr	x19, [sp, #16]
   83930:	a8c27bfd 	ldp	x29, x30, [sp], #32
   83934:	140000db 	b	83ca0 <CScreenDevice::CursorRight()>
   83938:	f9400bf3 	ldr	x19, [sp, #16]
   8393c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   83940:	14000090 	b	83b80 <CScreenDevice::CursorLeft()>
   83944:	b900501f 	str	wzr, [x0, #80]
   83948:	f9400bf3 	ldr	x19, [sp, #16]
   8394c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   83950:	14000070 	b	83b10 <CScreenDevice::CursorDown()>
   83954:	b900501f 	str	wzr, [x0, #80]
   83958:	17ffff55 	b	836ac <CScreenDevice::Write(char)+0x7c>
   8395c:	7101603f 	cmp	w1, #0x58
   83960:	54ffe901 	b.ne	83680 <CScreenDevice::Write(char)+0x50>  // b.any
   83964:	b9406001 	ldr	w1, [x0, #96]
   83968:	34ffea01 	cbz	w1, 836a8 <CScreenDevice::Write(char)+0x78>
   8396c:	9400025d 	bl	842e0 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>
   83970:	17ffff4e 	b	836a8 <CScreenDevice::Write(char)+0x78>
   83974:	528000a0 	mov	w0, #0x5                   	// #5
   83978:	b9004660 	str	w0, [x19, #68]
   8397c:	17ffff4c 	b	836ac <CScreenDevice::Write(char)+0x7c>
   83980:	b9406260 	ldr	w0, [x19, #96]
   83984:	7100101f 	cmp	w0, #0x4
   83988:	54ffe901 	b.ne	836a8 <CScreenDevice::Write(char)+0x78>  // b.any
   8398c:	7101a03f 	cmp	w1, #0x68
   83990:	1a9f17e0 	cset	w0, eq  // eq = none
   83994:	39017260 	strb	w0, [x19, #92]
   83998:	17ffff44 	b	836a8 <CScreenDevice::Write(char)+0x78>
   8399c:	94000019 	bl	83a00 <CScreenDevice::ClearDisplayEnd()>
   839a0:	b900467f 	str	wzr, [x19, #68]
   839a4:	17ffff42 	b	836ac <CScreenDevice::Write(char)+0x7c>
   839a8:	b9404800 	ldr	w0, [x0, #72]
   839ac:	b900467f 	str	wzr, [x19, #68]
   839b0:	290a027f 	stp	wzr, w0, [x19, #80]
   839b4:	17ffff3e 	b	836ac <CScreenDevice::Write(char)+0x7c>
   839b8:	940000ba 	bl	83ca0 <CScreenDevice::CursorRight()>
   839bc:	b900467f 	str	wzr, [x19, #68]
   839c0:	17ffff3b 	b	836ac <CScreenDevice::Write(char)+0x7c>
   839c4:	52800080 	mov	w0, #0x4                   	// #4
   839c8:	b9004660 	str	w0, [x19, #68]
   839cc:	17ffff38 	b	836ac <CScreenDevice::Write(char)+0x7c>
   839d0:	1280ffe0 	mov	w0, #0xfffff800            	// #-2048
   839d4:	7900b660 	strh	w0, [x19, #90]
   839d8:	17ffff34 	b	836a8 <CScreenDevice::Write(char)+0x78>
   839dc:	528003e0 	mov	w0, #0x1f                  	// #31
   839e0:	7900b660 	strh	w0, [x19, #90]
   839e4:	17ffff31 	b	836a8 <CScreenDevice::Write(char)+0x78>
   839e8:	d503201f 	nop
   839ec:	d503201f 	nop

00000000000839f0 <CScreenDevice::CarriageReturn()>:
   839f0:	b900501f 	str	wzr, [x0, #80]
   839f4:	d65f03c0 	ret
   839f8:	d503201f 	nop
   839fc:	d503201f 	nop

0000000000083a00 <CScreenDevice::ClearDisplayEnd()>:
   83a00:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   83a04:	910003fd 	mov	x29, sp
   83a08:	a90153f3 	stp	x19, x20, [sp, #16]
   83a0c:	aa0003f3 	mov	x19, x0
   83a10:	b9405014 	ldr	w20, [x0, #80]
   83a14:	f90013f5 	str	x21, [sp, #32]
   83a18:	91008015 	add	x21, x0, #0x20
   83a1c:	b9403800 	ldr	w0, [x0, #56]
   83a20:	6b00029f 	cmp	w20, w0
   83a24:	54000162 	b.cs	83a50 <CScreenDevice::ClearDisplayEnd()+0x50>  // b.hs, b.nlast
   83a28:	b9405662 	ldr	w2, [x19, #84]
   83a2c:	2a1403e1 	mov	w1, w20
   83a30:	aa1303e0 	mov	x0, x19
   83a34:	940001b7 	bl	84110 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   83a38:	aa1503e0 	mov	x0, x21
   83a3c:	940014c5 	bl	88d50 <CCharGenerator::GetCharWidth() const>
   83a40:	b9403a61 	ldr	w1, [x19, #56]
   83a44:	0b000294 	add	w20, w20, w0
   83a48:	6b14003f 	cmp	w1, w20
   83a4c:	54fffee8 	b.hi	83a28 <CScreenDevice::ClearDisplayEnd()+0x28>  // b.pmore
   83a50:	b9405674 	ldr	w20, [x19, #84]
   83a54:	aa1503e0 	mov	x0, x21
   83a58:	940014c2 	bl	88d60 <CCharGenerator::GetCharHeight() const>
   83a5c:	29460a61 	ldp	w1, w2, [x19, #48]
   83a60:	0b000280 	add	w0, w20, w0
   83a64:	f9401663 	ldr	x3, [x19, #40]
   83a68:	1b027c00 	mul	w0, w0, w2
   83a6c:	53017c21 	lsr	w1, w1, #1
   83a70:	6b000021 	subs	w1, w1, w0
   83a74:	54000140 	b.eq	83a9c <CScreenDevice::ClearDisplayEnd()+0x9c>  // b.none
   83a78:	a94153f3 	ldp	x19, x20, [sp, #16]
   83a7c:	51000422 	sub	w2, w1, #0x1
   83a80:	f94013f5 	ldr	x21, [sp, #32]
   83a84:	91000442 	add	x2, x2, #0x1
   83a88:	a8c37bfd 	ldp	x29, x30, [sp], #48
   83a8c:	52800001 	mov	w1, #0x0                   	// #0
   83a90:	8b204460 	add	x0, x3, w0, uxtw #1
   83a94:	d37ff842 	lsl	x2, x2, #1
   83a98:	14000b9e 	b	86910 <memset>
   83a9c:	a94153f3 	ldp	x19, x20, [sp, #16]
   83aa0:	f94013f5 	ldr	x21, [sp, #32]
   83aa4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   83aa8:	d65f03c0 	ret
   83aac:	d503201f 	nop

0000000000083ab0 <CScreenDevice::ClearLineEnd()>:
   83ab0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   83ab4:	910003fd 	mov	x29, sp
   83ab8:	b9403801 	ldr	w1, [x0, #56]
   83abc:	f9000bf3 	str	x19, [sp, #16]
   83ac0:	b9405013 	ldr	w19, [x0, #80]
   83ac4:	6b01027f 	cmp	w19, w1
   83ac8:	540001e2 	b.cs	83b04 <CScreenDevice::ClearLineEnd()+0x54>  // b.hs, b.nlast
   83acc:	a901d7b4 	stp	x20, x21, [x29, #24]
   83ad0:	aa0003f4 	mov	x20, x0
   83ad4:	91008015 	add	x21, x0, #0x20
   83ad8:	b9405682 	ldr	w2, [x20, #84]
   83adc:	2a1303e1 	mov	w1, w19
   83ae0:	aa1403e0 	mov	x0, x20
   83ae4:	9400018b 	bl	84110 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   83ae8:	aa1503e0 	mov	x0, x21
   83aec:	94001499 	bl	88d50 <CCharGenerator::GetCharWidth() const>
   83af0:	b9403a81 	ldr	w1, [x20, #56]
   83af4:	0b000273 	add	w19, w19, w0
   83af8:	6b13003f 	cmp	w1, w19
   83afc:	54fffee8 	b.hi	83ad8 <CScreenDevice::ClearLineEnd()+0x28>  // b.pmore
   83b00:	a941d7b4 	ldp	x20, x21, [x29, #24]
   83b04:	f9400bf3 	ldr	x19, [sp, #16]
   83b08:	a8c37bfd 	ldp	x29, x30, [sp], #48
   83b0c:	d65f03c0 	ret

0000000000083b10 <CScreenDevice::CursorDown()>:
   83b10:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   83b14:	910003fd 	mov	x29, sp
   83b18:	a90153f3 	stp	x19, x20, [sp, #16]
   83b1c:	aa0003f3 	mov	x19, x0
   83b20:	91008014 	add	x20, x0, #0x20
   83b24:	aa1403e0 	mov	x0, x20
   83b28:	9400148e 	bl	88d60 <CCharGenerator::GetCharHeight() const>
   83b2c:	b9405661 	ldr	w1, [x19, #84]
   83b30:	b9404e62 	ldr	w2, [x19, #76]
   83b34:	0b010000 	add	w0, w0, w1
   83b38:	b9005660 	str	w0, [x19, #84]
   83b3c:	6b02001f 	cmp	w0, w2
   83b40:	54000103 	b.cc	83b60 <CScreenDevice::CursorDown()+0x50>  // b.lo, b.ul, b.last
   83b44:	aa1303e0 	mov	x0, x19
   83b48:	940000fa 	bl	83f30 <CScreenDevice::Scroll()>
   83b4c:	aa1403e0 	mov	x0, x20
   83b50:	94001484 	bl	88d60 <CCharGenerator::GetCharHeight() const>
   83b54:	b9405661 	ldr	w1, [x19, #84]
   83b58:	4b000020 	sub	w0, w1, w0
   83b5c:	b9005660 	str	w0, [x19, #84]
   83b60:	a94153f3 	ldp	x19, x20, [sp, #16]
   83b64:	a8c27bfd 	ldp	x29, x30, [sp], #32
   83b68:	d65f03c0 	ret
   83b6c:	d503201f 	nop

0000000000083b70 <CScreenDevice::CursorHome()>:
   83b70:	b9404801 	ldr	w1, [x0, #72]
   83b74:	290a041f 	stp	wzr, w1, [x0, #80]
   83b78:	d65f03c0 	ret
   83b7c:	d503201f 	nop

0000000000083b80 <CScreenDevice::CursorLeft()>:
   83b80:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   83b84:	910003fd 	mov	x29, sp
   83b88:	f9000bf3 	str	x19, [sp, #16]
   83b8c:	aa0003f3 	mov	x19, x0
   83b90:	b9405000 	ldr	w0, [x0, #80]
   83b94:	35000300 	cbnz	w0, 83bf4 <CScreenDevice::CursorLeft()+0x74>
   83b98:	b9404a60 	ldr	w0, [x19, #72]
   83b9c:	b9405661 	ldr	w1, [x19, #84]
   83ba0:	6b00003f 	cmp	w1, w0
   83ba4:	54000088 	b.hi	83bb4 <CScreenDevice::CursorLeft()+0x34>  // b.pmore
   83ba8:	f9400bf3 	ldr	x19, [sp, #16]
   83bac:	a8c37bfd 	ldp	x29, x30, [sp], #48
   83bb0:	d65f03c0 	ret
   83bb4:	a901d7b4 	stp	x20, x21, [x29, #24]
   83bb8:	91008275 	add	x21, x19, #0x20
   83bbc:	b9403a74 	ldr	w20, [x19, #56]
   83bc0:	aa1503e0 	mov	x0, x21
   83bc4:	94001463 	bl	88d50 <CCharGenerator::GetCharWidth() const>
   83bc8:	4b000280 	sub	w0, w20, w0
   83bcc:	b9005260 	str	w0, [x19, #80]
   83bd0:	aa1503e0 	mov	x0, x21
   83bd4:	94001463 	bl	88d60 <CCharGenerator::GetCharHeight() const>
   83bd8:	b9405661 	ldr	w1, [x19, #84]
   83bdc:	a941d7b4 	ldp	x20, x21, [x29, #24]
   83be0:	4b000020 	sub	w0, w1, w0
   83be4:	b9005660 	str	w0, [x19, #84]
   83be8:	f9400bf3 	ldr	x19, [sp, #16]
   83bec:	a8c37bfd 	ldp	x29, x30, [sp], #48
   83bf0:	d65f03c0 	ret
   83bf4:	91008260 	add	x0, x19, #0x20
   83bf8:	94001456 	bl	88d50 <CCharGenerator::GetCharWidth() const>
   83bfc:	b9405261 	ldr	w1, [x19, #80]
   83c00:	4b000020 	sub	w0, w1, w0
   83c04:	b9005260 	str	w0, [x19, #80]
   83c08:	f9400bf3 	ldr	x19, [sp, #16]
   83c0c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   83c10:	d65f03c0 	ret
   83c14:	d503201f 	nop
   83c18:	d503201f 	nop
   83c1c:	d503201f 	nop

0000000000083c20 <CScreenDevice::CursorMove(unsigned int, unsigned int)>:
   83c20:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   83c24:	910003fd 	mov	x29, sp
   83c28:	a90153f3 	stp	x19, x20, [sp, #16]
   83c2c:	2a0203f3 	mov	w19, w2
   83c30:	51000673 	sub	w19, w19, #0x1
   83c34:	a9025bf5 	stp	x21, x22, [sp, #32]
   83c38:	aa0003f5 	mov	x21, x0
   83c3c:	91008016 	add	x22, x0, #0x20
   83c40:	2a0103f4 	mov	w20, w1
   83c44:	aa1603e0 	mov	x0, x22
   83c48:	94001442 	bl	88d50 <CCharGenerator::GetCharWidth() const>
   83c4c:	1b007e73 	mul	w19, w19, w0
   83c50:	aa1603e0 	mov	x0, x22
   83c54:	94001443 	bl	88d60 <CCharGenerator::GetCharHeight() const>
   83c58:	b9403aa2 	ldr	w2, [x21, #56]
   83c5c:	6b13005f 	cmp	w2, w19
   83c60:	54000149 	b.ls	83c88 <CScreenDevice::CursorMove(unsigned int, unsigned int)+0x68>  // b.plast
   83c64:	51000694 	sub	w20, w20, #0x1
   83c68:	b9404aa1 	ldr	w1, [x21, #72]
   83c6c:	1b007e80 	mul	w0, w20, w0
   83c70:	6b00003f 	cmp	w1, w0
   83c74:	540000a8 	b.hi	83c88 <CScreenDevice::CursorMove(unsigned int, unsigned int)+0x68>  // b.pmore
   83c78:	b9404ea1 	ldr	w1, [x21, #76]
   83c7c:	6b00003f 	cmp	w1, w0
   83c80:	54000049 	b.ls	83c88 <CScreenDevice::CursorMove(unsigned int, unsigned int)+0x68>  // b.plast
   83c84:	290a02b3 	stp	w19, w0, [x21, #80]
   83c88:	a94153f3 	ldp	x19, x20, [sp, #16]
   83c8c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   83c90:	a8c37bfd 	ldp	x29, x30, [sp], #48
   83c94:	d65f03c0 	ret
   83c98:	d503201f 	nop
   83c9c:	d503201f 	nop

0000000000083ca0 <CScreenDevice::CursorRight()>:
   83ca0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   83ca4:	910003fd 	mov	x29, sp
   83ca8:	f9000bf3 	str	x19, [sp, #16]
   83cac:	aa0003f3 	mov	x19, x0
   83cb0:	91008000 	add	x0, x0, #0x20
   83cb4:	94001427 	bl	88d50 <CCharGenerator::GetCharWidth() const>
   83cb8:	b9405261 	ldr	w1, [x19, #80]
   83cbc:	b9403a62 	ldr	w2, [x19, #56]
   83cc0:	0b010000 	add	w0, w0, w1
   83cc4:	b9005260 	str	w0, [x19, #80]
   83cc8:	6b02001f 	cmp	w0, w2
   83ccc:	54000082 	b.cs	83cdc <CScreenDevice::CursorRight()+0x3c>  // b.hs, b.nlast
   83cd0:	f9400bf3 	ldr	x19, [sp, #16]
   83cd4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   83cd8:	d65f03c0 	ret
   83cdc:	b900527f 	str	wzr, [x19, #80]
   83ce0:	aa1303e0 	mov	x0, x19
   83ce4:	f9400bf3 	ldr	x19, [sp, #16]
   83ce8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   83cec:	17ffff89 	b	83b10 <CScreenDevice::CursorDown()>

0000000000083cf0 <CScreenDevice::CursorUp()>:
   83cf0:	b9404801 	ldr	w1, [x0, #72]
   83cf4:	b9405402 	ldr	w2, [x0, #84]
   83cf8:	6b01005f 	cmp	w2, w1
   83cfc:	54000048 	b.hi	83d04 <CScreenDevice::CursorUp()+0x14>  // b.pmore
   83d00:	d65f03c0 	ret
   83d04:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   83d08:	910003fd 	mov	x29, sp
   83d0c:	f9000bf3 	str	x19, [sp, #16]
   83d10:	aa0003f3 	mov	x19, x0
   83d14:	91008000 	add	x0, x0, #0x20
   83d18:	94001412 	bl	88d60 <CCharGenerator::GetCharHeight() const>
   83d1c:	b9405661 	ldr	w1, [x19, #84]
   83d20:	4b000020 	sub	w0, w1, w0
   83d24:	b9005660 	str	w0, [x19, #84]
   83d28:	f9400bf3 	ldr	x19, [sp, #16]
   83d2c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   83d30:	d65f03c0 	ret
   83d34:	d503201f 	nop
   83d38:	d503201f 	nop
   83d3c:	d503201f 	nop

0000000000083d40 <CScreenDevice::DeleteChars(unsigned int)>:
   83d40:	d65f03c0 	ret
   83d44:	d503201f 	nop
   83d48:	d503201f 	nop
   83d4c:	d503201f 	nop

0000000000083d50 <CScreenDevice::DeleteLines(unsigned int)>:
   83d50:	d65f03c0 	ret
   83d54:	d503201f 	nop
   83d58:	d503201f 	nop
   83d5c:	d503201f 	nop

0000000000083d60 <CScreenDevice::DisplayChar(char)>:
   83d60:	13001c21 	sxtb	w1, w1
   83d64:	12001c22 	and	w2, w1, #0xff
   83d68:	71007c5f 	cmp	w2, #0x1f
   83d6c:	54000048 	b.hi	83d74 <CScreenDevice::DisplayChar(char)+0x14>  // b.pmore
   83d70:	d65f03c0 	ret
   83d74:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   83d78:	910003fd 	mov	x29, sp
   83d7c:	7940b404 	ldrh	w4, [x0, #90]
   83d80:	294a0c02 	ldp	w2, w3, [x0, #80]
   83d84:	f9000bf3 	str	x19, [sp, #16]
   83d88:	aa0003f3 	mov	x19, x0
   83d8c:	940000a5 	bl	84020 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
   83d90:	aa1303e0 	mov	x0, x19
   83d94:	f9400bf3 	ldr	x19, [sp, #16]
   83d98:	a8c27bfd 	ldp	x29, x30, [sp], #32
   83d9c:	17ffffc1 	b	83ca0 <CScreenDevice::CursorRight()>

0000000000083da0 <CScreenDevice::EraseChars(unsigned int)>:
   83da0:	35000041 	cbnz	w1, 83da8 <CScreenDevice::EraseChars(unsigned int)+0x8>
   83da4:	d65f03c0 	ret
   83da8:	1400014e 	b	842e0 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>
   83dac:	d503201f 	nop

0000000000083db0 <CScreenDevice::InsertLines(unsigned int)>:
   83db0:	d65f03c0 	ret
   83db4:	d503201f 	nop
   83db8:	d503201f 	nop
   83dbc:	d503201f 	nop

0000000000083dc0 <CScreenDevice::InsertMode(bool)>:
   83dc0:	39017001 	strb	w1, [x0, #92]
   83dc4:	d65f03c0 	ret
   83dc8:	d503201f 	nop
   83dcc:	d503201f 	nop

0000000000083dd0 <CScreenDevice::NewLine()>:
   83dd0:	b900501f 	str	wzr, [x0, #80]
   83dd4:	17ffff4f 	b	83b10 <CScreenDevice::CursorDown()>
   83dd8:	d503201f 	nop
   83ddc:	d503201f 	nop

0000000000083de0 <CScreenDevice::ReverseScroll()>:
   83de0:	d65f03c0 	ret
   83de4:	d503201f 	nop
   83de8:	d503201f 	nop
   83dec:	d503201f 	nop

0000000000083df0 <CScreenDevice::SetCursorMode(bool)>:
   83df0:	39016001 	strb	w1, [x0, #88]
   83df4:	d65f03c0 	ret
   83df8:	d503201f 	nop
   83dfc:	d503201f 	nop

0000000000083e00 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>:
   83e00:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   83e04:	910003fd 	mov	x29, sp
   83e08:	a90153f3 	stp	x19, x20, [sp, #16]
   83e0c:	2a0103f3 	mov	w19, w1
   83e10:	a9025bf5 	stp	x21, x22, [sp, #32]
   83e14:	51000673 	sub	w19, w19, #0x1
   83e18:	2a0203f5 	mov	w21, w2
   83e1c:	aa0003f4 	mov	x20, x0
   83e20:	91008016 	add	x22, x0, #0x20
   83e24:	aa1603e0 	mov	x0, x22
   83e28:	940013ce 	bl	88d60 <CCharGenerator::GetCharHeight() const>
   83e2c:	1b007e73 	mul	w19, w19, w0
   83e30:	aa1603e0 	mov	x0, x22
   83e34:	940013cb 	bl	88d60 <CCharGenerator::GetCharHeight() const>
   83e38:	1b157c00 	mul	w0, w0, w21
   83e3c:	b9404281 	ldr	w1, [x20, #64]
   83e40:	7100001f 	cmp	w0, #0x0
   83e44:	7a531020 	ccmp	w1, w19, #0x0, ne  // ne = any
   83e48:	1a9f97e2 	cset	w2, hi  // hi = pmore
   83e4c:	6b00027f 	cmp	w19, w0
   83e50:	7a403020 	ccmp	w1, w0, #0x0, cc  // cc = lo, ul, last
   83e54:	1a9f37e1 	cset	w1, cs  // cs = hs, nlast
   83e58:	6a01005f 	tst	w2, w1
   83e5c:	540000e1 	b.ne	83e78 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)+0x78>  // b.any
   83e60:	b9404a93 	ldr	w19, [x20, #72]
   83e64:	a9425bf5 	ldp	x21, x22, [sp, #32]
   83e68:	290a4e9f 	stp	wzr, w19, [x20, #80]
   83e6c:	a94153f3 	ldp	x19, x20, [sp, #16]
   83e70:	a8c37bfd 	ldp	x29, x30, [sp], #48
   83e74:	d65f03c0 	ret
   83e78:	29090293 	stp	w19, w0, [x20, #72]
   83e7c:	17fffffa 	b	83e64 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)+0x64>

0000000000083e80 <CScreenDevice::SetStandoutMode(unsigned int)>:
   83e80:	7100043f 	cmp	w1, #0x1
   83e84:	540001a0 	b.eq	83eb8 <CScreenDevice::SetStandoutMode(unsigned int)+0x38>  // b.none
   83e88:	34000121 	cbz	w1, 83eac <CScreenDevice::SetStandoutMode(unsigned int)+0x2c>
   83e8c:	7100083f 	cmp	w1, #0x2
   83e90:	54000080 	b.eq	83ea0 <CScreenDevice::SetStandoutMode(unsigned int)+0x20>  // b.none
   83e94:	71006c3f 	cmp	w1, #0x1b
   83e98:	540000a0 	b.eq	83eac <CScreenDevice::SetStandoutMode(unsigned int)+0x2c>  // b.none
   83e9c:	d65f03c0 	ret
   83ea0:	528003e1 	mov	w1, #0x1f                  	// #31
   83ea4:	7900b401 	strh	w1, [x0, #90]
   83ea8:	d65f03c0 	ret
   83eac:	12800401 	mov	w1, #0xffffffdf            	// #-33
   83eb0:	7900b401 	strh	w1, [x0, #90]
   83eb4:	d65f03c0 	ret
   83eb8:	1280ffe1 	mov	w1, #0xfffff800            	// #-2048
   83ebc:	7900b401 	strh	w1, [x0, #90]
   83ec0:	d65f03c0 	ret
   83ec4:	d503201f 	nop
   83ec8:	d503201f 	nop
   83ecc:	d503201f 	nop

0000000000083ed0 <CScreenDevice::Tabulator()>:
   83ed0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   83ed4:	910003fd 	mov	x29, sp
   83ed8:	f9000bf3 	str	x19, [sp, #16]
   83edc:	aa0003f3 	mov	x19, x0
   83ee0:	91008000 	add	x0, x0, #0x20
   83ee4:	9400139b 	bl	88d50 <CCharGenerator::GetCharWidth() const>
   83ee8:	531d7001 	lsl	w1, w0, #3
   83eec:	b9405260 	ldr	w0, [x19, #80]
   83ef0:	b9403a62 	ldr	w2, [x19, #56]
   83ef4:	0b000020 	add	w0, w1, w0
   83ef8:	1ac10800 	udiv	w0, w0, w1
   83efc:	1b017c00 	mul	w0, w0, w1
   83f00:	b9005260 	str	w0, [x19, #80]
   83f04:	6b02001f 	cmp	w0, w2
   83f08:	54000082 	b.cs	83f18 <CScreenDevice::Tabulator()+0x48>  // b.hs, b.nlast
   83f0c:	f9400bf3 	ldr	x19, [sp, #16]
   83f10:	a8c27bfd 	ldp	x29, x30, [sp], #32
   83f14:	d65f03c0 	ret
   83f18:	b900527f 	str	wzr, [x19, #80]
   83f1c:	aa1303e0 	mov	x0, x19
   83f20:	f9400bf3 	ldr	x19, [sp, #16]
   83f24:	a8c27bfd 	ldp	x29, x30, [sp], #32
   83f28:	17fffefa 	b	83b10 <CScreenDevice::CursorDown()>
   83f2c:	d503201f 	nop

0000000000083f30 <CScreenDevice::Scroll()>:
   83f30:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   83f34:	910003fd 	mov	x29, sp
   83f38:	a9025bf5 	stp	x21, x22, [sp, #32]
   83f3c:	aa0003f5 	mov	x21, x0
   83f40:	f9000bf3 	str	x19, [sp, #16]
   83f44:	91008000 	add	x0, x0, #0x20
   83f48:	94001386 	bl	88d60 <CCharGenerator::GetCharHeight() const>
   83f4c:	2a0003f3 	mov	w19, w0
   83f50:	294906a0 	ldp	w0, w1, [x21, #72]
   83f54:	b94036a6 	ldr	w6, [x21, #52]
   83f58:	4b000021 	sub	w1, w1, w0
   83f5c:	f94016a2 	ldr	x2, [x21, #40]
   83f60:	4b130021 	sub	w1, w1, w19
   83f64:	0b0600c3 	add	w3, w6, w6
   83f68:	1b067c16 	mul	w22, w0, w6
   83f6c:	1b037c21 	mul	w1, w1, w3
   83f70:	8b160456 	add	x22, x2, x22, lsl #1
   83f74:	35000221 	cbnz	w1, 83fb8 <CScreenDevice::Scroll()+0x88>
   83f78:	1b067e73 	mul	w19, w19, w6
   83f7c:	d341fe73 	lsr	x19, x19, #1
   83f80:	b4000153 	cbz	x19, 83fa8 <CScreenDevice::Scroll()+0x78>
   83f84:	51000673 	sub	w19, w19, #0x1
   83f88:	aa1603e0 	mov	x0, x22
   83f8c:	91000662 	add	x2, x19, #0x1
   83f90:	f9400bf3 	ldr	x19, [sp, #16]
   83f94:	a9425bf5 	ldp	x21, x22, [sp, #32]
   83f98:	52800001 	mov	w1, #0x0                   	// #0
   83f9c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   83fa0:	d37ef442 	lsl	x2, x2, #2
   83fa4:	14000a5b 	b	86910 <memset>
   83fa8:	f9400bf3 	ldr	x19, [sp, #16]
   83fac:	a9425bf5 	ldp	x21, x22, [sp, #32]
   83fb0:	a8c47bfd 	ldp	x29, x30, [sp], #64
   83fb4:	d65f03c0 	ret
   83fb8:	0b130000 	add	w0, w0, w19
   83fbc:	f9000fb4 	str	x20, [x29, #24]
   83fc0:	2a0103f4 	mov	w20, w1
   83fc4:	aa1603e1 	mov	x1, x22
   83fc8:	aa1403e3 	mov	x3, x20
   83fcc:	f9001bb7 	str	x23, [x29, #48]
   83fd0:	1b067c06 	mul	w6, w0, w6
   83fd4:	9101c2b7 	add	x23, x21, #0x70
   83fd8:	52800005 	mov	w5, #0x0                   	// #0
   83fdc:	52800044 	mov	w4, #0x2                   	// #2
   83fe0:	aa1703e0 	mov	x0, x23
   83fe4:	8b060442 	add	x2, x2, x6, lsl #1
   83fe8:	940014a2 	bl	89270 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)>
   83fec:	aa1703e0 	mov	x0, x23
   83ff0:	94001688 	bl	89a10 <CDMAChannel::Start()>
   83ff4:	aa1703e0 	mov	x0, x23
   83ff8:	940016e2 	bl	89b80 <CDMAChannel::Wait()>
   83ffc:	927ef681 	and	x1, x20, #0xfffffffffffffffc
   84000:	b94036a6 	ldr	w6, [x21, #52]
   84004:	8b0102d6 	add	x22, x22, x1
   84008:	f9400fb4 	ldr	x20, [x29, #24]
   8400c:	f9401bb7 	ldr	x23, [x29, #48]
   84010:	17ffffda 	b	83f78 <CScreenDevice::Scroll()+0x48>
   84014:	d503201f 	nop
   84018:	d503201f 	nop
   8401c:	d503201f 	nop

0000000000084020 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>:
   84020:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   84024:	910003fd 	mov	x29, sp
   84028:	a90153f3 	stp	x19, x20, [sp, #16]
   8402c:	91008014 	add	x20, x0, #0x20
   84030:	a9025bf5 	stp	x21, x22, [sp, #32]
   84034:	aa0003f6 	mov	x22, x0
   84038:	a90363f7 	stp	x23, x24, [sp, #48]
   8403c:	aa1403e0 	mov	x0, x20
   84040:	a9046bf9 	stp	x25, x26, [sp, #64]
   84044:	2a0203f8 	mov	w24, w2
   84048:	f9002bfb 	str	x27, [sp, #80]
   8404c:	13001c39 	sxtb	w25, w1
   84050:	2a0303fa 	mov	w26, w3
   84054:	52800017 	mov	w23, #0x0                   	// #0
   84058:	12003c9b 	and	w27, w4, #0xffff
   8405c:	94001341 	bl	88d60 <CCharGenerator::GetCharHeight() const>
   84060:	6b17001f 	cmp	w0, w23
   84064:	54000449 	b.ls	840ec <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xcc>  // b.plast
   84068:	d2800013 	mov	x19, #0x0                   	// #0
   8406c:	d503201f 	nop
   84070:	aa1403e0 	mov	x0, x20
   84074:	94001337 	bl	88d50 <CCharGenerator::GetCharWidth() const>
   84078:	0b130315 	add	w21, w24, w19
   8407c:	6b13001f 	cmp	w0, w19
   84080:	2a1303e2 	mov	w2, w19
   84084:	2a1703e3 	mov	w3, w23
   84088:	2a1903e1 	mov	w1, w25
   8408c:	aa1403e0 	mov	x0, x20
   84090:	54000229 	b.ls	840d4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xb4>  // b.plast
   84094:	9400133b 	bl	88d80 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
   84098:	72001c1f 	tst	w0, #0xff
   8409c:	b9403ac1 	ldr	w1, [x22, #56]
   840a0:	1a9f1360 	csel	w0, w27, wzr, ne  // ne = any
   840a4:	91000673 	add	x19, x19, #0x1
   840a8:	6b15003f 	cmp	w1, w21
   840ac:	54fffe29 	b.ls	84070 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x50>  // b.plast
   840b0:	b9403ec1 	ldr	w1, [x22, #60]
   840b4:	6b1a003f 	cmp	w1, w26
   840b8:	54fffdc9 	b.ls	84070 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x50>  // b.plast
   840bc:	b94036c1 	ldr	w1, [x22, #52]
   840c0:	f94016c2 	ldr	x2, [x22, #40]
   840c4:	d503201f 	nop
   840c8:	1b015755 	madd	w21, w26, w1, w21
   840cc:	78357840 	strh	w0, [x2, x21, lsl #1]
   840d0:	17ffffe8 	b	84070 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x50>
   840d4:	110006f7 	add	w23, w23, #0x1
   840d8:	aa1403e0 	mov	x0, x20
   840dc:	1100075a 	add	w26, w26, #0x1
   840e0:	94001320 	bl	88d60 <CCharGenerator::GetCharHeight() const>
   840e4:	6b17001f 	cmp	w0, w23
   840e8:	54fffc08 	b.hi	84068 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x48>  // b.pmore
   840ec:	a94153f3 	ldp	x19, x20, [sp, #16]
   840f0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   840f4:	a94363f7 	ldp	x23, x24, [sp, #48]
   840f8:	a9446bf9 	ldp	x25, x26, [sp, #64]
   840fc:	f9402bfb 	ldr	x27, [sp, #80]
   84100:	a8c67bfd 	ldp	x29, x30, [sp], #96
   84104:	d65f03c0 	ret
   84108:	d503201f 	nop
   8410c:	d503201f 	nop

0000000000084110 <CScreenDevice::EraseChar(unsigned int, unsigned int)>:
   84110:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   84114:	910003fd 	mov	x29, sp
   84118:	a9025bf5 	stp	x21, x22, [sp, #32]
   8411c:	91008015 	add	x21, x0, #0x20
   84120:	a90153f3 	stp	x19, x20, [sp, #16]
   84124:	2a0103f6 	mov	w22, w1
   84128:	a90363f7 	stp	x23, x24, [sp, #48]
   8412c:	aa0003f4 	mov	x20, x0
   84130:	2a0203f7 	mov	w23, w2
   84134:	52800018 	mov	w24, #0x0                   	// #0
   84138:	aa1503e0 	mov	x0, x21
   8413c:	94001309 	bl	88d60 <CCharGenerator::GetCharHeight() const>
   84140:	6b18001f 	cmp	w0, w24
   84144:	540003e9 	b.ls	841c0 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0xb0>  // b.plast
   84148:	52800013 	mov	w19, #0x0                   	// #0
   8414c:	d503201f 	nop
   84150:	aa1503e0 	mov	x0, x21
   84154:	940012ff 	bl	88d50 <CCharGenerator::GetCharWidth() const>
   84158:	0b160261 	add	w1, w19, w22
   8415c:	6b13001f 	cmp	w0, w19
   84160:	54000249 	b.ls	841a8 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x98>  // b.plast
   84164:	b9403a80 	ldr	w0, [x20, #56]
   84168:	11000673 	add	w19, w19, #0x1
   8416c:	6b00003f 	cmp	w1, w0
   84170:	54ffff02 	b.cs	84150 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x40>  // b.hs, b.nlast
   84174:	b9403e80 	ldr	w0, [x20, #60]
   84178:	6b17001f 	cmp	w0, w23
   8417c:	54fffea9 	b.ls	84150 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x40>  // b.plast
   84180:	b9403680 	ldr	w0, [x20, #52]
   84184:	f9401682 	ldr	x2, [x20, #40]
   84188:	d503201f 	nop
   8418c:	1b0006e1 	madd	w1, w23, w0, w1
   84190:	aa1503e0 	mov	x0, x21
   84194:	7821785f 	strh	wzr, [x2, x1, lsl #1]
   84198:	940012ee 	bl	88d50 <CCharGenerator::GetCharWidth() const>
   8419c:	6b13001f 	cmp	w0, w19
   841a0:	0b160261 	add	w1, w19, w22
   841a4:	54fffe08 	b.hi	84164 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x54>  // b.pmore
   841a8:	11000718 	add	w24, w24, #0x1
   841ac:	aa1503e0 	mov	x0, x21
   841b0:	110006f7 	add	w23, w23, #0x1
   841b4:	940012eb 	bl	88d60 <CCharGenerator::GetCharHeight() const>
   841b8:	6b18001f 	cmp	w0, w24
   841bc:	54fffc68 	b.hi	84148 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x38>  // b.pmore
   841c0:	a94153f3 	ldp	x19, x20, [sp, #16]
   841c4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   841c8:	a94363f7 	ldp	x23, x24, [sp, #48]
   841cc:	a8c47bfd 	ldp	x29, x30, [sp], #64
   841d0:	d65f03c0 	ret
   841d4:	d503201f 	nop
   841d8:	d503201f 	nop
   841dc:	d503201f 	nop

00000000000841e0 <CScreenDevice::InvertCursor()>:
   841e0:	39416001 	ldrb	w1, [x0, #88]
   841e4:	35000041 	cbnz	w1, 841ec <CScreenDevice::InvertCursor()+0xc>
   841e8:	d65f03c0 	ret
   841ec:	1400005d 	b	84360 <CScreenDevice::InvertCursor() [clone .part.6]>

00000000000841f0 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>:
   841f0:	b9403804 	ldr	w4, [x0, #56]
   841f4:	12003c63 	and	w3, w3, #0xffff
   841f8:	6b01009f 	cmp	w4, w1
   841fc:	54000129 	b.ls	84220 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)+0x30>  // b.plast
   84200:	b9403c04 	ldr	w4, [x0, #60]
   84204:	6b02009f 	cmp	w4, w2
   84208:	540000c9 	b.ls	84220 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)+0x30>  // b.plast
   8420c:	b9403404 	ldr	w4, [x0, #52]
   84210:	f9401400 	ldr	x0, [x0, #40]
   84214:	d503201f 	nop
   84218:	1b040442 	madd	w2, w2, w4, w1
   8421c:	78227803 	strh	w3, [x0, x2, lsl #1]
   84220:	d65f03c0 	ret
   84224:	d503201f 	nop
   84228:	d503201f 	nop
   8422c:	d503201f 	nop

0000000000084230 <CScreenDevice::GetPixel(unsigned int, unsigned int)>:
   84230:	b9403803 	ldr	w3, [x0, #56]
   84234:	6b01007f 	cmp	w3, w1
   84238:	54000189 	b.ls	84268 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x38>  // b.plast
   8423c:	b9403c04 	ldr	w4, [x0, #60]
   84240:	52800003 	mov	w3, #0x0                   	// #0
   84244:	6b02009f 	cmp	w4, w2
   84248:	540000c9 	b.ls	84260 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>  // b.plast
   8424c:	b9403403 	ldr	w3, [x0, #52]
   84250:	f9401400 	ldr	x0, [x0, #40]
   84254:	d503201f 	nop
   84258:	1b030442 	madd	w2, w2, w3, w1
   8425c:	78627803 	ldrh	w3, [x0, x2, lsl #1]
   84260:	2a0303e0 	mov	w0, w3
   84264:	d65f03c0 	ret
   84268:	52800003 	mov	w3, #0x0                   	// #0
   8426c:	2a0303e0 	mov	w0, w3
   84270:	d65f03c0 	ret
   84274:	d503201f 	nop
   84278:	d503201f 	nop
   8427c:	d503201f 	nop

0000000000084280 <CScreenDevice::Rotor(unsigned int, unsigned int)>:
   84280:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   84284:	910003fd 	mov	x29, sp
   84288:	a9025bf5 	stp	x21, x22, [sp, #32]
   8428c:	aa0003f5 	mov	x21, x0
   84290:	a90153f3 	stp	x19, x20, [sp, #16]
   84294:	12000433 	and	w19, w1, #0x3
   84298:	2a0203f4 	mov	w20, w2
   8429c:	91008000 	add	x0, x0, #0x20
   842a0:	b9403ab6 	ldr	w22, [x21, #56]
   842a4:	940012ab 	bl	88d50 <CCharGenerator::GetCharWidth() const>
   842a8:	92400694 	and	x20, x20, #0x3
   842ac:	b0000041 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   842b0:	9111c021 	add	x1, x1, #0x470
   842b4:	1b000273 	madd	w19, w19, w0, w0
   842b8:	aa1503e0 	mov	x0, x21
   842bc:	1280ffe4 	mov	w4, #0xfffff800            	// #-2048
   842c0:	52800003 	mov	w3, #0x0                   	// #0
   842c4:	4b1302c2 	sub	w2, w22, w19
   842c8:	38616a81 	ldrb	w1, [x20, x1]
   842cc:	a94153f3 	ldp	x19, x20, [sp, #16]
   842d0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   842d4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   842d8:	17ffff52 	b	84020 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
   842dc:	d503201f 	nop

00000000000842e0 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>:
   842e0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   842e4:	910003fd 	mov	x29, sp
   842e8:	a90153f3 	stp	x19, x20, [sp, #16]
   842ec:	aa0003f4 	mov	x20, x0
   842f0:	a90363f7 	stp	x23, x24, [sp, #48]
   842f4:	2a0103f7 	mov	w23, w1
   842f8:	a9025bf5 	stp	x21, x22, [sp, #32]
   842fc:	91008016 	add	x22, x0, #0x20
   84300:	b9405298 	ldr	w24, [x20, #80]
   84304:	aa1603e0 	mov	x0, x22
   84308:	94001292 	bl	88d50 <CCharGenerator::GetCharWidth() const>
   8430c:	b9403a95 	ldr	w21, [x20, #56]
   84310:	b9405293 	ldr	w19, [x20, #80]
   84314:	1b176000 	madd	w0, w0, w23, w24
   84318:	6b0002bf 	cmp	w21, w0
   8431c:	1a8092b5 	csel	w21, w21, w0, ls  // ls = plast
   84320:	6b15027f 	cmp	w19, w21
   84324:	54000142 	b.cs	8434c <CScreenDevice::EraseChars(unsigned int) [clone .part.4]+0x6c>  // b.hs, b.nlast
   84328:	b9405682 	ldr	w2, [x20, #84]
   8432c:	2a1303e1 	mov	w1, w19
   84330:	aa1403e0 	mov	x0, x20
   84334:	97ffff77 	bl	84110 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   84338:	aa1603e0 	mov	x0, x22
   8433c:	94001285 	bl	88d50 <CCharGenerator::GetCharWidth() const>
   84340:	0b000273 	add	w19, w19, w0
   84344:	6b15027f 	cmp	w19, w21
   84348:	54ffff03 	b.cc	84328 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]+0x48>  // b.lo, b.ul, b.last
   8434c:	a94153f3 	ldp	x19, x20, [sp, #16]
   84350:	a9425bf5 	ldp	x21, x22, [sp, #32]
   84354:	a94363f7 	ldp	x23, x24, [sp, #48]
   84358:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8435c:	d65f03c0 	ret

0000000000084360 <CScreenDevice::InvertCursor() [clone .part.6]>:
   84360:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   84364:	910003fd 	mov	x29, sp
   84368:	a9025bf5 	stp	x21, x22, [sp, #32]
   8436c:	91008015 	add	x21, x0, #0x20
   84370:	a90153f3 	stp	x19, x20, [sp, #16]
   84374:	aa0003f4 	mov	x20, x0
   84378:	aa1503e0 	mov	x0, x21
   8437c:	9400127d 	bl	88d70 <CCharGenerator::GetUnderline() const>
   84380:	2a0003f6 	mov	w22, w0
   84384:	aa1503e0 	mov	x0, x21
   84388:	94001276 	bl	88d60 <CCharGenerator::GetCharHeight() const>
   8438c:	6b16001f 	cmp	w0, w22
   84390:	540004a9 	b.ls	84424 <CScreenDevice::InvertCursor() [clone .part.6]+0xc4>  // b.plast
   84394:	d503201f 	nop
   84398:	52800013 	mov	w19, #0x0                   	// #0
   8439c:	aa1503e0 	mov	x0, x21
   843a0:	9400126c 	bl	88d50 <CCharGenerator::GetCharWidth() const>
   843a4:	6b13001f 	cmp	w0, w19
   843a8:	54000349 	b.ls	84410 <CScreenDevice::InvertCursor() [clone .part.6]+0xb0>  // b.plast
   843ac:	d503201f 	nop
   843b0:	b9405280 	ldr	w0, [x20, #80]
   843b4:	b9403a81 	ldr	w1, [x20, #56]
   843b8:	0b000260 	add	w0, w19, w0
   843bc:	6b01001f 	cmp	w0, w1
   843c0:	540001e2 	b.cs	843fc <CScreenDevice::InvertCursor() [clone .part.6]+0x9c>  // b.hs, b.nlast
   843c4:	b9405681 	ldr	w1, [x20, #84]
   843c8:	b9403e82 	ldr	w2, [x20, #60]
   843cc:	0b0102c1 	add	w1, w22, w1
   843d0:	6b02003f 	cmp	w1, w2
   843d4:	54000142 	b.cs	843fc <CScreenDevice::InvertCursor() [clone .part.6]+0x9c>  // b.hs, b.nlast
   843d8:	b9403683 	ldr	w3, [x20, #52]
   843dc:	f9401682 	ldr	x2, [x20, #40]
   843e0:	d503201f 	nop
   843e4:	1b030020 	madd	w0, w1, w3, w0
   843e8:	8b000000 	add	x0, x0, x0
   843ec:	78606841 	ldrh	w1, [x2, x0]
   843f0:	35000221 	cbnz	w1, 84434 <CScreenDevice::InvertCursor() [clone .part.6]+0xd4>
   843f4:	7940b681 	ldrh	w1, [x20, #90]
   843f8:	78206841 	strh	w1, [x2, x0]
   843fc:	11000673 	add	w19, w19, #0x1
   84400:	aa1503e0 	mov	x0, x21
   84404:	94001253 	bl	88d50 <CCharGenerator::GetCharWidth() const>
   84408:	6b13001f 	cmp	w0, w19
   8440c:	54fffd28 	b.hi	843b0 <CScreenDevice::InvertCursor() [clone .part.6]+0x50>  // b.pmore
   84410:	110006d6 	add	w22, w22, #0x1
   84414:	aa1503e0 	mov	x0, x21
   84418:	94001252 	bl	88d60 <CCharGenerator::GetCharHeight() const>
   8441c:	6b16001f 	cmp	w0, w22
   84420:	54fffbc8 	b.hi	84398 <CScreenDevice::InvertCursor() [clone .part.6]+0x38>  // b.pmore
   84424:	a94153f3 	ldp	x19, x20, [sp, #16]
   84428:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8442c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   84430:	d65f03c0 	ret
   84434:	7820685f 	strh	wzr, [x2, x0]
   84438:	11000673 	add	w19, w19, #0x1
   8443c:	17fffff1 	b	84400 <CScreenDevice::InvertCursor() [clone .part.6]+0xa0>

0000000000084440 <CString::~CString()>:
   84440:	f9400402 	ldr	x2, [x0, #8]
   84444:	b0000041 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   84448:	91122021 	add	x1, x1, #0x488
   8444c:	f9000001 	str	x1, [x0]
   84450:	b4000062 	cbz	x2, 8445c <CString::~CString()+0x1c>
   84454:	aa0203e0 	mov	x0, x2
   84458:	14000ede 	b	87fd0 <operator delete[](void*)>
   8445c:	d65f03c0 	ret

0000000000084460 <CString::~CString()>:
   84460:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   84464:	b0000041 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   84468:	91122021 	add	x1, x1, #0x488
   8446c:	910003fd 	mov	x29, sp
   84470:	f9000bf3 	str	x19, [sp, #16]
   84474:	aa0003f3 	mov	x19, x0
   84478:	f9400400 	ldr	x0, [x0, #8]
   8447c:	f9000261 	str	x1, [x19]
   84480:	b4000040 	cbz	x0, 84488 <CString::~CString()+0x28>
   84484:	94000ed3 	bl	87fd0 <operator delete[](void*)>
   84488:	aa1303e0 	mov	x0, x19
   8448c:	f9400bf3 	ldr	x19, [sp, #16]
   84490:	a8c27bfd 	ldp	x29, x30, [sp], #32
   84494:	d2800401 	mov	x1, #0x20                  	// #32
   84498:	14000ed2 	b	87fe0 <operator delete(void*, unsigned long)>
   8449c:	d503201f 	nop

00000000000844a0 <CString::ReserveSpace(unsigned long) [clone .part.0]>:
   844a0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   844a4:	910003fd 	mov	x29, sp
   844a8:	f9400403 	ldr	x3, [x0, #8]
   844ac:	b9401002 	ldr	w2, [x0, #16]
   844b0:	f9000ff4 	str	x20, [sp, #24]
   844b4:	f9400c14 	ldr	x20, [x0, #24]
   844b8:	cb030294 	sub	x20, x20, x3
   844bc:	8b010281 	add	x1, x20, x1
   844c0:	91000423 	add	x3, x1, #0x1
   844c4:	eb02007f 	cmp	x3, x2
   844c8:	54000088 	b.hi	844d8 <CString::ReserveSpace(unsigned long) [clone .part.0]+0x38>  // b.pmore
   844cc:	f9400ff4 	ldr	x20, [sp, #24]
   844d0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   844d4:	d65f03c0 	ret
   844d8:	f9000bb3 	str	x19, [x29, #16]
   844dc:	aa0003f3 	mov	x19, x0
   844e0:	a9025bb5 	stp	x21, x22, [x29, #32]
   844e4:	91010435 	add	x21, x1, #0x41
   844e8:	aa1503e0 	mov	x0, x21
   844ec:	94000eb1 	bl	87fb0 <operator new[](unsigned long)>
   844f0:	f9400e61 	ldr	x1, [x19, #24]
   844f4:	aa0003f6 	mov	x22, x0
   844f8:	3900003f 	strb	wzr, [x1]
   844fc:	f9400661 	ldr	x1, [x19, #8]
   84500:	940009b4 	bl	86bd0 <strcpy>
   84504:	f9400660 	ldr	x0, [x19, #8]
   84508:	b4000040 	cbz	x0, 84510 <CString::ReserveSpace(unsigned long) [clone .part.0]+0x70>
   8450c:	94000eb1 	bl	87fd0 <operator delete[](void*)>
   84510:	f9000676 	str	x22, [x19, #8]
   84514:	8b1402d4 	add	x20, x22, x20
   84518:	b9001275 	str	w21, [x19, #16]
   8451c:	f9000e74 	str	x20, [x19, #24]
   84520:	f9400bb3 	ldr	x19, [x29, #16]
   84524:	a9425bb5 	ldp	x21, x22, [x29, #32]
   84528:	f9400ff4 	ldr	x20, [sp, #24]
   8452c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   84530:	d65f03c0 	ret
   84534:	d503201f 	nop
   84538:	d503201f 	nop
   8453c:	d503201f 	nop

0000000000084540 <CString::CString()>:
   84540:	b0000041 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   84544:	91122021 	add	x1, x1, #0x488
   84548:	a9007c01 	stp	x1, xzr, [x0]
   8454c:	b900101f 	str	wzr, [x0, #16]
   84550:	d65f03c0 	ret
   84554:	d503201f 	nop
   84558:	d503201f 	nop
   8455c:	d503201f 	nop

0000000000084560 <CString::CString(char const*)>:
   84560:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   84564:	910003fd 	mov	x29, sp
   84568:	a90153f3 	stp	x19, x20, [sp, #16]
   8456c:	aa0003f3 	mov	x19, x0
   84570:	b0000040 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   84574:	91122000 	add	x0, x0, #0x488
   84578:	aa0103f4 	mov	x20, x1
   8457c:	f9000260 	str	x0, [x19]
   84580:	aa0103e0 	mov	x0, x1
   84584:	94000927 	bl	86a20 <strlen>
   84588:	11000400 	add	w0, w0, #0x1
   8458c:	b9001260 	str	w0, [x19, #16]
   84590:	94000e88 	bl	87fb0 <operator new[](unsigned long)>
   84594:	f9000660 	str	x0, [x19, #8]
   84598:	aa1403e1 	mov	x1, x20
   8459c:	a94153f3 	ldp	x19, x20, [sp, #16]
   845a0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   845a4:	1400098b 	b	86bd0 <strcpy>
   845a8:	d503201f 	nop
   845ac:	d503201f 	nop

00000000000845b0 <CString::operator char const*() const>:
   845b0:	f9400401 	ldr	x1, [x0, #8]
   845b4:	b0000040 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   845b8:	9124a000 	add	x0, x0, #0x928
   845bc:	f100003f 	cmp	x1, #0x0
   845c0:	9a810000 	csel	x0, x0, x1, eq  // eq = none
   845c4:	d65f03c0 	ret
   845c8:	d503201f 	nop
   845cc:	d503201f 	nop

00000000000845d0 <CString::operator=(char const*)>:
   845d0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   845d4:	910003fd 	mov	x29, sp
   845d8:	a90153f3 	stp	x19, x20, [sp, #16]
   845dc:	aa0003f3 	mov	x19, x0
   845e0:	f9400400 	ldr	x0, [x0, #8]
   845e4:	aa0103f4 	mov	x20, x1
   845e8:	b4000040 	cbz	x0, 845f0 <CString::operator=(char const*)+0x20>
   845ec:	94000e79 	bl	87fd0 <operator delete[](void*)>
   845f0:	aa1403e0 	mov	x0, x20
   845f4:	9400090b 	bl	86a20 <strlen>
   845f8:	11000400 	add	w0, w0, #0x1
   845fc:	b9001260 	str	w0, [x19, #16]
   84600:	94000e6c 	bl	87fb0 <operator new[](unsigned long)>
   84604:	f9000660 	str	x0, [x19, #8]
   84608:	aa1403e1 	mov	x1, x20
   8460c:	94000971 	bl	86bd0 <strcpy>
   84610:	f9400660 	ldr	x0, [x19, #8]
   84614:	a94153f3 	ldp	x19, x20, [sp, #16]
   84618:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8461c:	d65f03c0 	ret

0000000000084620 <CString::operator=(CString const&)>:
   84620:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   84624:	910003fd 	mov	x29, sp
   84628:	a90153f3 	stp	x19, x20, [sp, #16]
   8462c:	aa0003f3 	mov	x19, x0
   84630:	f9400400 	ldr	x0, [x0, #8]
   84634:	f90013f5 	str	x21, [sp, #32]
   84638:	aa0103f5 	mov	x21, x1
   8463c:	b4000040 	cbz	x0, 84644 <CString::operator=(CString const&)+0x24>
   84640:	94000e64 	bl	87fd0 <operator delete[](void*)>
   84644:	f94006a0 	ldr	x0, [x21, #8]
   84648:	b0000054 	adrp	x20, 8d000 <vtable for CGPIOPin+0x158>
   8464c:	9124a294 	add	x20, x20, #0x928
   84650:	f100001f 	cmp	x0, #0x0
   84654:	9a800280 	csel	x0, x20, x0, eq  // eq = none
   84658:	940008f2 	bl	86a20 <strlen>
   8465c:	11000400 	add	w0, w0, #0x1
   84660:	b9001260 	str	w0, [x19, #16]
   84664:	94000e53 	bl	87fb0 <operator new[](unsigned long)>
   84668:	f9000660 	str	x0, [x19, #8]
   8466c:	f94006a1 	ldr	x1, [x21, #8]
   84670:	f100003f 	cmp	x1, #0x0
   84674:	9a810281 	csel	x1, x20, x1, eq  // eq = none
   84678:	94000956 	bl	86bd0 <strcpy>
   8467c:	f94013f5 	ldr	x21, [sp, #32]
   84680:	aa1303e0 	mov	x0, x19
   84684:	a94153f3 	ldp	x19, x20, [sp, #16]
   84688:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8468c:	d65f03c0 	ret

0000000000084690 <CString::GetLength() const>:
   84690:	f9400400 	ldr	x0, [x0, #8]
   84694:	b4000040 	cbz	x0, 8469c <CString::GetLength() const+0xc>
   84698:	140008e2 	b	86a20 <strlen>
   8469c:	d2800000 	mov	x0, #0x0                   	// #0
   846a0:	d65f03c0 	ret
   846a4:	d503201f 	nop
   846a8:	d503201f 	nop
   846ac:	d503201f 	nop

00000000000846b0 <CString::Append(char const*)>:
   846b0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   846b4:	52800022 	mov	w2, #0x1                   	// #1
   846b8:	910003fd 	mov	x29, sp
   846bc:	a90153f3 	stp	x19, x20, [sp, #16]
   846c0:	aa0003f3 	mov	x19, x0
   846c4:	f9400400 	ldr	x0, [x0, #8]
   846c8:	f90013f5 	str	x21, [sp, #32]
   846cc:	aa0103f5 	mov	x21, x1
   846d0:	b9001262 	str	w2, [x19, #16]
   846d4:	b40000a0 	cbz	x0, 846e8 <CString::Append(char const*)+0x38>
   846d8:	940008d2 	bl	86a20 <strlen>
   846dc:	b9401261 	ldr	w1, [x19, #16]
   846e0:	0b000020 	add	w0, w1, w0
   846e4:	b9001260 	str	w0, [x19, #16]
   846e8:	aa1503e0 	mov	x0, x21
   846ec:	940008cd 	bl	86a20 <strlen>
   846f0:	b9401261 	ldr	w1, [x19, #16]
   846f4:	0b000020 	add	w0, w1, w0
   846f8:	b9001260 	str	w0, [x19, #16]
   846fc:	94000e2d 	bl	87fb0 <operator new[](unsigned long)>
   84700:	aa0003f4 	mov	x20, x0
   84704:	f9400661 	ldr	x1, [x19, #8]
   84708:	b40001a1 	cbz	x1, 8473c <CString::Append(char const*)+0x8c>
   8470c:	94000931 	bl	86bd0 <strcpy>
   84710:	f9400660 	ldr	x0, [x19, #8]
   84714:	b4000040 	cbz	x0, 8471c <CString::Append(char const*)+0x6c>
   84718:	94000e2e 	bl	87fd0 <operator delete[](void*)>
   8471c:	aa1503e1 	mov	x1, x21
   84720:	aa1403e0 	mov	x0, x20
   84724:	94000947 	bl	86c40 <strcat>
   84728:	f94013f5 	ldr	x21, [sp, #32]
   8472c:	f9000674 	str	x20, [x19, #8]
   84730:	a94153f3 	ldp	x19, x20, [sp, #16]
   84734:	a8c37bfd 	ldp	x29, x30, [sp], #48
   84738:	d65f03c0 	ret
   8473c:	3900001f 	strb	wzr, [x0]
   84740:	aa1503e1 	mov	x1, x21
   84744:	aa1403e0 	mov	x0, x20
   84748:	9400093e 	bl	86c40 <strcat>
   8474c:	f94013f5 	ldr	x21, [sp, #32]
   84750:	f9000674 	str	x20, [x19, #8]
   84754:	a94153f3 	ldp	x19, x20, [sp, #16]
   84758:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8475c:	d65f03c0 	ret

0000000000084760 <CString::Compare(char const*) const>:
   84760:	f9400400 	ldr	x0, [x0, #8]
   84764:	140008bb 	b	86a50 <strcmp>
   84768:	d503201f 	nop
   8476c:	d503201f 	nop

0000000000084770 <CString::Find(char) const>:
   84770:	f9400403 	ldr	x3, [x0, #8]
   84774:	13001c21 	sxtb	w1, w1
   84778:	39c00060 	ldrsb	w0, [x3]
   8477c:	34000140 	cbz	w0, 847a4 <CString::Find(char) const+0x34>
   84780:	6b00003f 	cmp	w1, w0
   84784:	52800000 	mov	w0, #0x0                   	// #0
   84788:	54000061 	b.ne	84794 <CString::Find(char) const+0x24>  // b.any
   8478c:	14000007 	b	847a8 <CString::Find(char) const+0x38>
   84790:	540000c0 	b.eq	847a8 <CString::Find(char) const+0x38>  // b.none
   84794:	38c01c62 	ldrsb	w2, [x3, #1]!
   84798:	11000400 	add	w0, w0, #0x1
   8479c:	6b01005f 	cmp	w2, w1
   847a0:	35ffff82 	cbnz	w2, 84790 <CString::Find(char) const+0x20>
   847a4:	12800000 	mov	w0, #0xffffffff            	// #-1
   847a8:	d65f03c0 	ret
   847ac:	d503201f 	nop

00000000000847b0 <CString::PutChar(char, unsigned long)>:
   847b0:	b5000042 	cbnz	x2, 847b8 <CString::PutChar(char, unsigned long)+0x8>
   847b4:	d65f03c0 	ret
   847b8:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   847bc:	910003fd 	mov	x29, sp
   847c0:	a90153f3 	stp	x19, x20, [sp, #16]
   847c4:	aa0203f3 	mov	x19, x2
   847c8:	f90013f5 	str	x21, [sp, #32]
   847cc:	aa0003f4 	mov	x20, x0
   847d0:	13001c35 	sxtb	w21, w1
   847d4:	aa0203e1 	mov	x1, x2
   847d8:	97ffff32 	bl	844a0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   847dc:	d1000661 	sub	x1, x19, #0x1
   847e0:	f9400e82 	ldr	x2, [x20, #24]
   847e4:	d1000421 	sub	x1, x1, #0x1
   847e8:	b100043f 	cmn	x1, #0x1
   847ec:	91000440 	add	x0, x2, #0x1
   847f0:	f9000e80 	str	x0, [x20, #24]
   847f4:	39000055 	strb	w21, [x2]
   847f8:	54ffff41 	b.ne	847e0 <CString::PutChar(char, unsigned long)+0x30>  // b.any
   847fc:	a94153f3 	ldp	x19, x20, [sp, #16]
   84800:	f94013f5 	ldr	x21, [sp, #32]
   84804:	a8c37bfd 	ldp	x29, x30, [sp], #48
   84808:	d65f03c0 	ret
   8480c:	d503201f 	nop

0000000000084810 <CString::PutString(char const*)>:
   84810:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   84814:	910003fd 	mov	x29, sp
   84818:	a90153f3 	stp	x19, x20, [sp, #16]
   8481c:	aa0003f3 	mov	x19, x0
   84820:	f90013f5 	str	x21, [sp, #32]
   84824:	aa0103e0 	mov	x0, x1
   84828:	aa0103f5 	mov	x21, x1
   8482c:	9400087d 	bl	86a20 <strlen>
   84830:	aa0003f4 	mov	x20, x0
   84834:	b4000080 	cbz	x0, 84844 <CString::PutString(char const*)+0x34>
   84838:	aa0003e1 	mov	x1, x0
   8483c:	aa1303e0 	mov	x0, x19
   84840:	97ffff18 	bl	844a0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   84844:	f9400e60 	ldr	x0, [x19, #24]
   84848:	aa1503e1 	mov	x1, x21
   8484c:	940008e1 	bl	86bd0 <strcpy>
   84850:	f94013f5 	ldr	x21, [sp, #32]
   84854:	f9400e60 	ldr	x0, [x19, #24]
   84858:	8b140000 	add	x0, x0, x20
   8485c:	f9000e60 	str	x0, [x19, #24]
   84860:	a94153f3 	ldp	x19, x20, [sp, #16]
   84864:	a8c37bfd 	ldp	x29, x30, [sp], #48
   84868:	d65f03c0 	ret
   8486c:	d503201f 	nop

0000000000084870 <CString::Replace(char const*, char const*)>:
   84870:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
   84874:	910003fd 	mov	x29, sp
   84878:	f9001bf7 	str	x23, [sp, #48]
   8487c:	52800017 	mov	w23, #0x0                   	// #0
   84880:	39c00023 	ldrsb	w3, [x1]
   84884:	350000a3 	cbnz	w3, 84898 <CString::Replace(char const*, char const*)+0x28>
   84888:	2a1703e0 	mov	w0, w23
   8488c:	f9401bf7 	ldr	x23, [sp, #48]
   84890:	a8c77bfd 	ldp	x29, x30, [sp], #112
   84894:	d65f03c0 	ret
   84898:	a90153b3 	stp	x19, x20, [x29, #16]
   8489c:	aa0003f4 	mov	x20, x0
   848a0:	a9025bb5 	stp	x21, x22, [x29, #32]
   848a4:	aa0103f5 	mov	x21, x1
   848a8:	910143a0 	add	x0, x29, #0x50
   848ac:	a903e7b8 	stp	x24, x25, [x29, #56]
   848b0:	f9400681 	ldr	x1, [x20, #8]
   848b4:	aa0203f6 	mov	x22, x2
   848b8:	97ffff2a 	bl	84560 <CString::CString(char const*)>
   848bc:	f9400680 	ldr	x0, [x20, #8]
   848c0:	b4000040 	cbz	x0, 848c8 <CString::Replace(char const*, char const*)+0x58>
   848c4:	94000dc3 	bl	87fd0 <operator delete[](void*)>
   848c8:	52800800 	mov	w0, #0x40                  	// #64
   848cc:	b9001280 	str	w0, [x20, #16]
   848d0:	d2800800 	mov	x0, #0x40                  	// #64
   848d4:	52800017 	mov	w23, #0x0                   	// #0
   848d8:	94000db6 	bl	87fb0 <operator new[](unsigned long)>
   848dc:	f9402fb3 	ldr	x19, [x29, #88]
   848e0:	f9000680 	str	x0, [x20, #8]
   848e4:	f9000e80 	str	x0, [x20, #24]
   848e8:	39c002a1 	ldrsb	w1, [x21]
   848ec:	aa1303e0 	mov	x0, x19
   848f0:	940008e4 	bl	86c80 <strchr>
   848f4:	aa0003f8 	mov	x24, x0
   848f8:	b40004c0 	cbz	x0, 84990 <CString::Replace(char const*, char const*)+0x120>
   848fc:	eb00027f 	cmp	x19, x0
   84900:	54000802 	b.cs	84a00 <CString::Replace(char const*, char const*)+0x190>  // b.hs, b.nlast
   84904:	d503201f 	nop
   84908:	38c01679 	ldrsb	w25, [x19], #1
   8490c:	d2800021 	mov	x1, #0x1                   	// #1
   84910:	aa1403e0 	mov	x0, x20
   84914:	97fffee3 	bl	844a0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   84918:	f9400e80 	ldr	x0, [x20, #24]
   8491c:	eb13031f 	cmp	x24, x19
   84920:	91000401 	add	x1, x0, #0x1
   84924:	f9000e81 	str	x1, [x20, #24]
   84928:	39000019 	strb	w25, [x0]
   8492c:	54fffee1 	b.ne	84908 <CString::Replace(char const*, char const*)+0x98>  // b.any
   84930:	91000713 	add	x19, x24, #0x1
   84934:	aa1803e2 	mov	x2, x24
   84938:	39c006a0 	ldrsb	w0, [x21, #1]
   8493c:	910006a3 	add	x3, x21, #0x1
   84940:	34000160 	cbz	w0, 8496c <CString::Replace(char const*, char const*)+0xfc>
   84944:	39c00701 	ldrsb	w1, [x24, #1]
   84948:	6b00003f 	cmp	w1, w0
   8494c:	540000a0 	b.eq	84960 <CString::Replace(char const*, char const*)+0xf0>  // b.none
   84950:	14000022 	b	849d8 <CString::Replace(char const*, char const*)+0x168>
   84954:	39c00261 	ldrsb	w1, [x19]
   84958:	6b00003f 	cmp	w1, w0
   8495c:	540003e1 	b.ne	849d8 <CString::Replace(char const*, char const*)+0x168>  // b.any
   84960:	38c01c60 	ldrsb	w0, [x3, #1]!
   84964:	91000673 	add	x19, x19, #0x1
   84968:	35ffff60 	cbnz	w0, 84954 <CString::Replace(char const*, char const*)+0xe4>
   8496c:	aa1603e1 	mov	x1, x22
   84970:	aa1403e0 	mov	x0, x20
   84974:	97ffffa7 	bl	84810 <CString::PutString(char const*)>
   84978:	110006f7 	add	w23, w23, #0x1
   8497c:	39c002a1 	ldrsb	w1, [x21]
   84980:	aa1303e0 	mov	x0, x19
   84984:	940008bf 	bl	86c80 <strchr>
   84988:	aa0003f8 	mov	x24, x0
   8498c:	b5fffb80 	cbnz	x0, 848fc <CString::Replace(char const*, char const*)+0x8c>
   84990:	aa1303e1 	mov	x1, x19
   84994:	aa1403e0 	mov	x0, x20
   84998:	97ffff9e 	bl	84810 <CString::PutString(char const*)>
   8499c:	f9400e81 	ldr	x1, [x20, #24]
   849a0:	b0000040 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   849a4:	91122000 	add	x0, x0, #0x488
   849a8:	3900003f 	strb	wzr, [x1]
   849ac:	f9002ba0 	str	x0, [x29, #80]
   849b0:	f9402fa0 	ldr	x0, [x29, #88]
   849b4:	b40002c0 	cbz	x0, 84a0c <CString::Replace(char const*, char const*)+0x19c>
   849b8:	94000d86 	bl	87fd0 <operator delete[](void*)>
   849bc:	2a1703e0 	mov	w0, w23
   849c0:	f9401bf7 	ldr	x23, [sp, #48]
   849c4:	a94153b3 	ldp	x19, x20, [x29, #16]
   849c8:	a9425bb5 	ldp	x21, x22, [x29, #32]
   849cc:	a943e7b8 	ldp	x24, x25, [x29, #56]
   849d0:	a8c77bfd 	ldp	x29, x30, [sp], #112
   849d4:	d65f03c0 	ret
   849d8:	39c00058 	ldrsb	w24, [x2]
   849dc:	d2800021 	mov	x1, #0x1                   	// #1
   849e0:	aa1403e0 	mov	x0, x20
   849e4:	91000453 	add	x19, x2, #0x1
   849e8:	97fffeae 	bl	844a0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   849ec:	f9400e80 	ldr	x0, [x20, #24]
   849f0:	91000401 	add	x1, x0, #0x1
   849f4:	f9000e81 	str	x1, [x20, #24]
   849f8:	39000018 	strb	w24, [x0]
   849fc:	17ffffbb 	b	848e8 <CString::Replace(char const*, char const*)+0x78>
   84a00:	aa1303e2 	mov	x2, x19
   84a04:	91000413 	add	x19, x0, #0x1
   84a08:	17ffffcc 	b	84938 <CString::Replace(char const*, char const*)+0xc8>
   84a0c:	a94153b3 	ldp	x19, x20, [x29, #16]
   84a10:	2a1703e0 	mov	w0, w23
   84a14:	a9425bb5 	ldp	x21, x22, [x29, #32]
   84a18:	a943e7b8 	ldp	x24, x25, [x29, #56]
   84a1c:	f9401bf7 	ldr	x23, [sp, #48]
   84a20:	a8c77bfd 	ldp	x29, x30, [sp], #112
   84a24:	d65f03c0 	ret
   84a28:	d503201f 	nop
   84a2c:	d503201f 	nop

0000000000084a30 <CString::ReserveSpace(unsigned long)>:
   84a30:	b4000041 	cbz	x1, 84a38 <CString::ReserveSpace(unsigned long)+0x8>
   84a34:	17fffe9b 	b	844a0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   84a38:	d65f03c0 	ret
   84a3c:	d503201f 	nop

0000000000084a40 <CString::ntoa(char*, unsigned long, unsigned int, bool)>:
   84a40:	2a0203e2 	mov	w2, w2
   84a44:	12001c63 	and	w3, w3, #0xff
   84a48:	d2800024 	mov	x4, #0x1                   	// #1
   84a4c:	eb01005f 	cmp	x2, x1
   84a50:	540003e8 	b.hi	84acc <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x8c>  // b.pmore
   84a54:	d503201f 	nop
   84a58:	9b027c84 	mul	x4, x4, x2
   84a5c:	9ac40825 	udiv	x5, x1, x4
   84a60:	aa0503e8 	mov	x8, x5
   84a64:	eb05005f 	cmp	x2, x5
   84a68:	54ffff89 	b.ls	84a58 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x18>  // b.plast
   84a6c:	7100007f 	cmp	w3, #0x0
   84a70:	5280040a 	mov	w10, #0x20                  	// #32
   84a74:	1a8a13ea 	csel	w10, wzr, w10, ne  // ne = any
   84a78:	aa0003e9 	mov	x9, x0
   84a7c:	12001d4a 	and	w10, w10, #0xff
   84a80:	1100dd4a 	add	w10, w10, #0x37
   84a84:	14000004 	b	84a94 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x54>
   84a88:	9ac40825 	udiv	x5, x1, x4
   84a8c:	aa0703e9 	mov	x9, x7
   84a90:	aa0503e8 	mov	x8, x5
   84a94:	12001d03 	and	w3, w8, #0xff
   84a98:	aa0903e7 	mov	x7, x9
   84a9c:	1100c066 	add	w6, w3, #0x30
   84aa0:	0b0a0063 	add	w3, w3, w10
   84aa4:	9b0484a1 	msub	x1, x5, x4, x1
   84aa8:	f100251f 	cmp	x8, #0x9
   84aac:	9ac20884 	udiv	x4, x4, x2
   84ab0:	13001cc5 	sxtb	w5, w6
   84ab4:	13001c63 	sxtb	w3, w3
   84ab8:	1a858063 	csel	w3, w3, w5, hi  // hi = pmore
   84abc:	380014e3 	strb	w3, [x7], #1
   84ac0:	b5fffe44 	cbnz	x4, 84a88 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x48>
   84ac4:	3900053f 	strb	wzr, [x9, #1]
   84ac8:	d65f03c0 	ret
   84acc:	aa0103e8 	mov	x8, x1
   84ad0:	aa0103e5 	mov	x5, x1
   84ad4:	17ffffe6 	b	84a6c <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x2c>
   84ad8:	d503201f 	nop
   84adc:	d503201f 	nop

0000000000084ae0 <CString::ftoa(char*, double, unsigned int)>:
   84ae0:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
   84ae4:	1e602018 	fcmpe	d0, #0.0
   84ae8:	910003fd 	mov	x29, sp
   84aec:	f9000bf3 	str	x19, [sp, #16]
   84af0:	aa0003f3 	mov	x19, x0
   84af4:	a902dff6 	stp	x22, x23, [sp, #40]
   84af8:	2a0103f7 	mov	w23, w1
   84afc:	54001084 	b.mi	84d0c <CString::ftoa(char*, double, unsigned int)+0x22c>  // b.first
   84b00:	aa0003f6 	mov	x22, x0
   84b04:	d2e87e00 	mov	x0, #0x43f0000000000000    	// #4895412794951729152
   84b08:	9e670001 	fmov	d1, x0
   84b0c:	1e612010 	fcmpe	d0, d1
   84b10:	540010ec 	b.gt	84d2c <CString::ftoa(char*, double, unsigned int)+0x24c>
   84b14:	f9000fb4 	str	x20, [x29, #24]
   84b18:	9e790014 	fcvtzu	x20, d0
   84b1c:	d2800020 	mov	x0, #0x1                   	// #1
   84b20:	f100269f 	cmp	x20, #0x9
   84b24:	54001169 	b.ls	84d50 <CString::ftoa(char*, double, unsigned int)+0x270>  // b.plast
   84b28:	8b000800 	add	x0, x0, x0, lsl #2
   84b2c:	8b000000 	add	x0, x0, x0
   84b30:	9ac00a83 	udiv	x3, x20, x0
   84b34:	f100247f 	cmp	x3, #0x9
   84b38:	54ffff88 	b.hi	84b28 <CString::ftoa(char*, double, unsigned int)+0x48>  // b.pmore
   84b3c:	b202e7ea 	mov	x10, #0xcccccccccccccccc    	// #-3689348814741910324
   84b40:	aa1603e8 	mov	x8, x22
   84b44:	aa1403e6 	mov	x6, x20
   84b48:	f29999aa 	movk	x10, #0xcccd
   84b4c:	9ac00a87 	udiv	x7, x20, x0
   84b50:	14000004 	b	84b60 <CString::ftoa(char*, double, unsigned int)+0x80>
   84b54:	9ac008c7 	udiv	x7, x6, x0
   84b58:	aa0503e8 	mov	x8, x5
   84b5c:	aa0703e3 	mov	x3, x7
   84b60:	12001c62 	and	w2, w3, #0xff
   84b64:	aa0803e5 	mov	x5, x8
   84b68:	1100c044 	add	w4, w2, #0x30
   84b6c:	11015c42 	add	w2, w2, #0x57
   84b70:	f100247f 	cmp	x3, #0x9
   84b74:	9bca7c09 	umulh	x9, x0, x10
   84b78:	13001c83 	sxtb	w3, w4
   84b7c:	13001c42 	sxtb	w2, w2
   84b80:	1a838042 	csel	w2, w2, w3, hi  // hi = pmore
   84b84:	380014a2 	strb	w2, [x5], #1
   84b88:	d503201f 	nop
   84b8c:	9b0098e6 	msub	x6, x7, x0, x6
   84b90:	d343fd20 	lsr	x0, x9, #3
   84b94:	b5fffe00 	cbnz	x0, 84b54 <CString::ftoa(char*, double, unsigned int)+0x74>
   84b98:	3900051f 	strb	wzr, [x8, #1]
   84b9c:	350000f7 	cbnz	w23, 84bb8 <CString::ftoa(char*, double, unsigned int)+0xd8>
   84ba0:	f9400fb4 	ldr	x20, [x29, #24]
   84ba4:	aa1303e0 	mov	x0, x19
   84ba8:	f9400bf3 	ldr	x19, [sp, #16]
   84bac:	a942dff6 	ldp	x22, x23, [sp, #40]
   84bb0:	a8c77bfd 	ldp	x29, x30, [sp], #112
   84bb4:	d65f03c0 	ret
   84bb8:	aa1603e0 	mov	x0, x22
   84bbc:	f90013b5 	str	x21, [x29, #32]
   84bc0:	f9001fb8 	str	x24, [x29, #56]
   84bc4:	52800275 	mov	w21, #0x13                  	// #19
   84bc8:	fd0027a0 	str	d0, [x29, #72]
   84bcc:	94000795 	bl	86a20 <strlen>
   84bd0:	528005c1 	mov	w1, #0x2e                  	// #46
   84bd4:	38206ac1 	strb	w1, [x22, x0]
   84bd8:	71004eff 	cmp	w23, #0x13
   84bdc:	8b0002d8 	add	x24, x22, x0
   84be0:	1a9592f5 	csel	w21, w23, w21, ls  // ls = plast
   84be4:	91000716 	add	x22, x24, #0x1
   84be8:	710006ff 	cmp	w23, #0x1
   84bec:	fd4027a0 	ldr	d0, [x29, #72]
   84bf0:	54000b89 	b.ls	84d60 <CString::ftoa(char*, double, unsigned int)+0x280>  // b.plast
   84bf4:	52800041 	mov	w1, #0x2                   	// #2
   84bf8:	d2800140 	mov	x0, #0xa                   	// #10
   84bfc:	d503201f 	nop
   84c00:	8b000800 	add	x0, x0, x0, lsl #2
   84c04:	11000421 	add	w1, w1, #0x1
   84c08:	8b000000 	add	x0, x0, x0
   84c0c:	6b15003f 	cmp	w1, w21
   84c10:	54ffff89 	b.ls	84c00 <CString::ftoa(char*, double, unsigned int)+0x120>  // b.plast
   84c14:	9e630001 	ucvtf	d1, x0
   84c18:	9e630282 	ucvtf	d2, x20
   84c1c:	d2800020 	mov	x0, #0x1                   	// #1
   84c20:	1e623800 	fsub	d0, d0, d2
   84c24:	1e610800 	fmul	d0, d0, d1
   84c28:	9e790002 	fcvtzu	x2, d0
   84c2c:	f100245f 	cmp	x2, #0x9
   84c30:	54000949 	b.ls	84d58 <CString::ftoa(char*, double, unsigned int)+0x278>  // b.plast
   84c34:	d503201f 	nop
   84c38:	8b000800 	add	x0, x0, x0, lsl #2
   84c3c:	8b000000 	add	x0, x0, x0
   84c40:	9ac00843 	udiv	x3, x2, x0
   84c44:	f100247f 	cmp	x3, #0x9
   84c48:	54ffff88 	b.hi	84c38 <CString::ftoa(char*, double, unsigned int)+0x158>  // b.pmore
   84c4c:	b202e7e9 	mov	x9, #0xcccccccccccccccc    	// #-3689348814741910324
   84c50:	910163a7 	add	x7, x29, #0x58
   84c54:	9ac00846 	udiv	x6, x2, x0
   84c58:	f29999a9 	movk	x9, #0xcccd
   84c5c:	14000004 	b	84c6c <CString::ftoa(char*, double, unsigned int)+0x18c>
   84c60:	9ac00846 	udiv	x6, x2, x0
   84c64:	aa0503e7 	mov	x7, x5
   84c68:	aa0603e3 	mov	x3, x6
   84c6c:	12001c61 	and	w1, w3, #0xff
   84c70:	aa0703e5 	mov	x5, x7
   84c74:	1100c024 	add	w4, w1, #0x30
   84c78:	11015c21 	add	w1, w1, #0x57
   84c7c:	f100247f 	cmp	x3, #0x9
   84c80:	9bc97c08 	umulh	x8, x0, x9
   84c84:	13001c83 	sxtb	w3, w4
   84c88:	13001c21 	sxtb	w1, w1
   84c8c:	1a838021 	csel	w1, w1, w3, hi  // hi = pmore
   84c90:	380014a1 	strb	w1, [x5], #1
   84c94:	d503201f 	nop
   84c98:	9b0088c2 	msub	x2, x6, x0, x2
   84c9c:	d343fd00 	lsr	x0, x8, #3
   84ca0:	b5fffe00 	cbnz	x0, 84c60 <CString::ftoa(char*, double, unsigned int)+0x180>
   84ca4:	390004ff 	strb	wzr, [x7, #1]
   84ca8:	910163a0 	add	x0, x29, #0x58
   84cac:	9400075d 	bl	86a20 <strlen>
   84cb0:	4b0002a0 	sub	w0, w21, w0
   84cb4:	51000402 	sub	w2, w0, #0x1
   84cb8:	34000160 	cbz	w0, 84ce4 <CString::ftoa(char*, double, unsigned int)+0x204>
   84cbc:	91000843 	add	x3, x2, #0x2
   84cc0:	aa1603e0 	mov	x0, x22
   84cc4:	8b030318 	add	x24, x24, x3
   84cc8:	52800601 	mov	w1, #0x30                  	// #48
   84ccc:	d503201f 	nop
   84cd0:	38001401 	strb	w1, [x0], #1
   84cd4:	eb18001f 	cmp	x0, x24
   84cd8:	54ffffc1 	b.ne	84cd0 <CString::ftoa(char*, double, unsigned int)+0x1f0>  // b.any
   84cdc:	91000442 	add	x2, x2, #0x1
   84ce0:	8b0202d6 	add	x22, x22, x2
   84ce4:	910163a1 	add	x1, x29, #0x58
   84ce8:	aa1603e0 	mov	x0, x22
   84cec:	940007b9 	bl	86bd0 <strcpy>
   84cf0:	f9401fb8 	ldr	x24, [x29, #56]
   84cf4:	a941d7b4 	ldp	x20, x21, [x29, #24]
   84cf8:	aa1303e0 	mov	x0, x19
   84cfc:	f9400bf3 	ldr	x19, [sp, #16]
   84d00:	a942dff6 	ldp	x22, x23, [sp, #40]
   84d04:	a8c77bfd 	ldp	x29, x30, [sp], #112
   84d08:	d65f03c0 	ret
   84d0c:	1e614000 	fneg	d0, d0
   84d10:	528005a0 	mov	w0, #0x2d                  	// #45
   84d14:	39000260 	strb	w0, [x19]
   84d18:	d2e87e00 	mov	x0, #0x43f0000000000000    	// #4895412794951729152
   84d1c:	9e670001 	fmov	d1, x0
   84d20:	91000676 	add	x22, x19, #0x1
   84d24:	1e612010 	fcmpe	d0, d1
   84d28:	54ffef6d 	b.le	84b14 <CString::ftoa(char*, double, unsigned int)+0x34>
   84d2c:	aa1603e0 	mov	x0, x22
   84d30:	b0000041 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   84d34:	91126021 	add	x1, x1, #0x498
   84d38:	940007a6 	bl	86bd0 <strcpy>
   84d3c:	aa1303e0 	mov	x0, x19
   84d40:	f9400bf3 	ldr	x19, [sp, #16]
   84d44:	a942dff6 	ldp	x22, x23, [sp, #40]
   84d48:	a8c77bfd 	ldp	x29, x30, [sp], #112
   84d4c:	d65f03c0 	ret
   84d50:	aa1403e3 	mov	x3, x20
   84d54:	17ffff7a 	b	84b3c <CString::ftoa(char*, double, unsigned int)+0x5c>
   84d58:	aa0203e3 	mov	x3, x2
   84d5c:	17ffffbc 	b	84c4c <CString::ftoa(char*, double, unsigned int)+0x16c>
   84d60:	1e649001 	fmov	d1, #1.000000000000000000e+001
   84d64:	17ffffad 	b	84c18 <CString::ftoa(char*, double, unsigned int)+0x138>
   84d68:	d503201f 	nop
   84d6c:	d503201f 	nop

0000000000084d70 <CString::FormatV(char const*, std::__va_list)>:
   84d70:	a9b57bfd 	stp	x29, x30, [sp, #-176]!
   84d74:	910003fd 	mov	x29, sp
   84d78:	a90363f7 	stp	x23, x24, [sp, #48]
   84d7c:	aa0103f8 	mov	x24, x1
   84d80:	f9400041 	ldr	x1, [x2]
   84d84:	f9003ba1 	str	x1, [x29, #112]
   84d88:	f9400441 	ldr	x1, [x2, #8]
   84d8c:	a9046bf9 	stp	x25, x26, [sp, #64]
   84d90:	aa0003f9 	mov	x25, x0
   84d94:	f90037a1 	str	x1, [x29, #104]
   84d98:	f9400400 	ldr	x0, [x0, #8]
   84d9c:	b9401841 	ldr	w1, [x2, #24]
   84da0:	b9007fa1 	str	w1, [x29, #124]
   84da4:	b9401c41 	ldr	w1, [x2, #28]
   84da8:	a90153f3 	stp	x19, x20, [sp, #16]
   84dac:	aa0203f4 	mov	x20, x2
   84db0:	a9025bf5 	stp	x21, x22, [sp, #32]
   84db4:	a90573fb 	stp	x27, x28, [sp, #80]
   84db8:	b9007ba1 	str	w1, [x29, #120]
   84dbc:	b4000040 	cbz	x0, 84dc4 <CString::FormatV(char const*, std::__va_list)+0x54>
   84dc0:	94000c84 	bl	87fd0 <operator delete[](void*)>
   84dc4:	52800800 	mov	w0, #0x40                  	// #64
   84dc8:	b9001320 	str	w0, [x25, #16]
   84dcc:	b202e7f5 	mov	x21, #0xcccccccccccccccc    	// #-3689348814741910324
   84dd0:	d2800800 	mov	x0, #0x40                  	// #64
   84dd4:	f29999b5 	movk	x21, #0xcccd
   84dd8:	94000c76 	bl	87fb0 <operator new[](unsigned long)>
   84ddc:	f9000720 	str	x0, [x25, #8]
   84de0:	f9000f20 	str	x0, [x25, #24]
   84de4:	39c00313 	ldrsb	w19, [x24]
   84de8:	34001093 	cbz	w19, 84ff8 <CString::FormatV(char const*, std::__va_list)+0x288>
   84dec:	9100071a 	add	x26, x24, #0x1
   84df0:	7100967f 	cmp	w19, #0x25
   84df4:	54000ee1 	b.ne	84fd0 <CString::FormatV(char const*, std::__va_list)+0x260>  // b.any
   84df8:	39c0071b 	ldrsb	w27, [x24, #1]
   84dfc:	7100977f 	cmp	w27, #0x25
   84e00:	54002440 	b.eq	85288 <CString::FormatV(char const*, std::__va_list)+0x518>  // b.none
   84e04:	52800016 	mov	w22, #0x0                   	// #0
   84e08:	7100b77f 	cmp	w27, #0x2d
   84e0c:	54000081 	b.ne	84e1c <CString::FormatV(char const*, std::__va_list)+0xac>  // b.any
   84e10:	39c00b1b 	ldrsb	w27, [x24, #2]
   84e14:	91000b1a 	add	x26, x24, #0x2
   84e18:	52800036 	mov	w22, #0x1                   	// #1
   84e1c:	91000758 	add	x24, x26, #0x1
   84e20:	52800017 	mov	w23, #0x0                   	// #0
   84e24:	7100c37f 	cmp	w27, #0x30
   84e28:	540000c1 	b.ne	84e40 <CString::FormatV(char const*, std::__va_list)+0xd0>  // b.any
   84e2c:	91000b40 	add	x0, x26, #0x2
   84e30:	39c0075b 	ldrsb	w27, [x26, #1]
   84e34:	aa1803fa 	mov	x26, x24
   84e38:	aa0003f8 	mov	x24, x0
   84e3c:	52800037 	mov	w23, #0x1                   	// #1
   84e40:	5100c360 	sub	w0, w27, #0x30
   84e44:	12001c01 	and	w1, w0, #0xff
   84e48:	7100243f 	cmp	w1, #0x9
   84e4c:	540016c8 	b.hi	85124 <CString::FormatV(char const*, std::__va_list)+0x3b4>  // b.pmore
   84e50:	d2800013 	mov	x19, #0x0                   	// #0
   84e54:	14000002 	b	84e5c <CString::FormatV(char const*, std::__va_list)+0xec>
   84e58:	aa1c03fa 	mov	x26, x28
   84e5c:	39c0075b 	ldrsb	w27, [x26, #1]
   84e60:	93407c02 	sxtw	x2, w0
   84e64:	8b130a73 	add	x19, x19, x19, lsl #2
   84e68:	9100075c 	add	x28, x26, #0x1
   84e6c:	5100c360 	sub	w0, w27, #0x30
   84e70:	12001c01 	and	w1, w0, #0xff
   84e74:	8b130453 	add	x19, x2, x19, lsl #1
   84e78:	7100243f 	cmp	w1, #0x9
   84e7c:	54fffee9 	b.ls	84e58 <CString::FormatV(char const*, std::__va_list)+0xe8>  // b.plast
   84e80:	91000b58 	add	x24, x26, #0x2
   84e84:	7100bb7f 	cmp	w27, #0x2e
   84e88:	54001000 	b.eq	85088 <CString::FormatV(char const*, std::__va_list)+0x318>  // b.none
   84e8c:	39c00380 	ldrsb	w0, [x28]
   84e90:	528000c1 	mov	w1, #0x6                   	// #6
   84e94:	52800003 	mov	w3, #0x0                   	// #0
   84e98:	7101b01f 	cmp	w0, #0x6c
   84e9c:	540000a1 	b.ne	84eb0 <CString::FormatV(char const*, std::__va_list)+0x140>  // b.any
   84ea0:	39c00780 	ldrsb	w0, [x28, #1]
   84ea4:	aa1803fc 	mov	x28, x24
   84ea8:	91000718 	add	x24, x24, #0x1
   84eac:	52800023 	mov	w3, #0x1                   	// #1
   84eb0:	7101a41f 	cmp	w0, #0x69
   84eb4:	54001640 	b.eq	8517c <CString::FormatV(char const*, std::__va_list)+0x40c>  // b.none
   84eb8:	54000b2d 	b.le	8501c <CString::FormatV(char const*, std::__va_list)+0x2ac>
   84ebc:	7101cc1f 	cmp	w0, #0x73
   84ec0:	540032a0 	b.eq	85514 <CString::FormatV(char const*, std::__va_list)+0x7a4>  // b.none
   84ec4:	5400108c 	b.gt	850d4 <CString::FormatV(char const*, std::__va_list)+0x364>
   84ec8:	d280010b 	mov	x11, #0x8                   	// #8
   84ecc:	7101bc1f 	cmp	w0, #0x6f
   84ed0:	54001301 	b.ne	85130 <CString::FormatV(char const*, std::__va_list)+0x3c0>  // b.any
   84ed4:	b9407fa1 	ldr	w1, [x29, #124]
   84ed8:	340010e3 	cbz	w3, 850f4 <CString::FormatV(char const*, std::__va_list)+0x384>
   84edc:	37f84421 	tbnz	w1, #31, 85760 <CString::FormatV(char const*, std::__va_list)+0x9f0>
   84ee0:	f9403ba1 	ldr	x1, [x29, #112]
   84ee4:	91003c23 	add	x3, x1, #0xf
   84ee8:	927df062 	and	x2, x3, #0xfffffffffffffff8
   84eec:	f9003ba2 	str	x2, [x29, #112]
   84ef0:	f9400026 	ldr	x6, [x1]
   84ef4:	d2800021 	mov	x1, #0x1                   	// #1
   84ef8:	eb0b00df 	cmp	x6, x11
   84efc:	540010e3 	b.cc	85118 <CString::FormatV(char const*, std::__va_list)+0x3a8>  // b.lo, b.ul, b.last
   84f00:	9b0b7c21 	mul	x1, x1, x11
   84f04:	9ac108c3 	udiv	x3, x6, x1
   84f08:	aa0303ea 	mov	x10, x3
   84f0c:	eb0b007f 	cmp	x3, x11
   84f10:	54ffff82 	b.cs	84f00 <CString::FormatV(char const*, std::__va_list)+0x190>  // b.hs, b.nlast
   84f14:	7101601f 	cmp	w0, #0x58
   84f18:	5280040d 	mov	w13, #0x20                  	// #32
   84f1c:	1a8d03ed 	csel	w13, wzr, w13, eq  // eq = none
   84f20:	910203ac 	add	x12, x29, #0x80
   84f24:	12001dad 	and	w13, w13, #0xff
   84f28:	1100ddad 	add	w13, w13, #0x37
   84f2c:	14000004 	b	84f3c <CString::FormatV(char const*, std::__va_list)+0x1cc>
   84f30:	9ac108c3 	udiv	x3, x6, x1
   84f34:	aa0903ec 	mov	x12, x9
   84f38:	aa0303ea 	mov	x10, x3
   84f3c:	12001d40 	and	w0, w10, #0xff
   84f40:	aa0c03e9 	mov	x9, x12
   84f44:	1100c008 	add	w8, w0, #0x30
   84f48:	0b0d0000 	add	w0, w0, w13
   84f4c:	9b019866 	msub	x6, x3, x1, x6
   84f50:	f100255f 	cmp	x10, #0x9
   84f54:	9acb0821 	udiv	x1, x1, x11
   84f58:	13001d03 	sxtb	w3, w8
   84f5c:	13001c00 	sxtb	w0, w0
   84f60:	1a838000 	csel	w0, w0, w3, hi  // hi = pmore
   84f64:	38001520 	strb	w0, [x9], #1
   84f68:	b5fffe41 	cbnz	x1, 84f30 <CString::FormatV(char const*, std::__va_list)+0x1c0>
   84f6c:	3900059f 	strb	wzr, [x12, #1]
   84f70:	910203a0 	add	x0, x29, #0x80
   84f74:	940006ab 	bl	86a20 <strlen>
   84f78:	aa0003fa 	mov	x26, x0
   84f7c:	35001ff6 	cbnz	w22, 85378 <CString::FormatV(char const*, std::__va_list)+0x608>
   84f80:	eb13001f 	cmp	x0, x19
   84f84:	540007a2 	b.cs	85078 <CString::FormatV(char const*, std::__va_list)+0x308>  // b.hs, b.nlast
   84f88:	710002ff 	cmp	w23, #0x0
   84f8c:	cb000273 	sub	x19, x19, x0
   84f90:	52800400 	mov	w0, #0x20                  	// #32
   84f94:	5280061a 	mov	w26, #0x30                  	// #48
   84f98:	aa1303e1 	mov	x1, x19
   84f9c:	1a80135a 	csel	w26, w26, w0, ne  // ne = any
   84fa0:	aa1903e0 	mov	x0, x25
   84fa4:	97fffd3f 	bl	844a0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   84fa8:	d1000660 	sub	x0, x19, #0x1
   84fac:	d503201f 	nop
   84fb0:	f9400f21 	ldr	x1, [x25, #24]
   84fb4:	d1000400 	sub	x0, x0, #0x1
   84fb8:	b100041f 	cmn	x0, #0x1
   84fbc:	91000423 	add	x3, x1, #0x1
   84fc0:	f9000f23 	str	x3, [x25, #24]
   84fc4:	3900003a 	strb	w26, [x1]
   84fc8:	54ffff41 	b.ne	84fb0 <CString::FormatV(char const*, std::__va_list)+0x240>  // b.any
   84fcc:	1400002b 	b	85078 <CString::FormatV(char const*, std::__va_list)+0x308>
   84fd0:	d2800021 	mov	x1, #0x1                   	// #1
   84fd4:	aa1903e0 	mov	x0, x25
   84fd8:	97fffd32 	bl	844a0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   84fdc:	aa1a03f8 	mov	x24, x26
   84fe0:	f9400f20 	ldr	x0, [x25, #24]
   84fe4:	91000401 	add	x1, x0, #0x1
   84fe8:	f9000f21 	str	x1, [x25, #24]
   84fec:	39000013 	strb	w19, [x0]
   84ff0:	39c00313 	ldrsb	w19, [x24]
   84ff4:	35ffefd3 	cbnz	w19, 84dec <CString::FormatV(char const*, std::__va_list)+0x7c>
   84ff8:	f9400f20 	ldr	x0, [x25, #24]
   84ffc:	3900001f 	strb	wzr, [x0]
   85000:	a94153f3 	ldp	x19, x20, [sp, #16]
   85004:	a9425bf5 	ldp	x21, x22, [sp, #32]
   85008:	a94363f7 	ldp	x23, x24, [sp, #48]
   8500c:	a9446bf9 	ldp	x25, x26, [sp, #64]
   85010:	a94573fb 	ldp	x27, x28, [sp, #80]
   85014:	a8cb7bfd 	ldp	x29, x30, [sp], #176
   85018:	d65f03c0 	ret
   8501c:	71018c1f 	cmp	w0, #0x63
   85020:	540030a0 	b.eq	85634 <CString::FormatV(char const*, std::__va_list)+0x8c4>  // b.none
   85024:	5400144d 	b.le	852ac <CString::FormatV(char const*, std::__va_list)+0x53c>
   85028:	7101901f 	cmp	w0, #0x64
   8502c:	54000a80 	b.eq	8517c <CString::FormatV(char const*, std::__va_list)+0x40c>  // b.none
   85030:	7101981f 	cmp	w0, #0x66
   85034:	54000821 	b.ne	85138 <CString::FormatV(char const*, std::__va_list)+0x3c8>  // b.any
   85038:	b9407ba0 	ldr	w0, [x29, #120]
   8503c:	37f818a0 	tbnz	w0, #31, 85350 <CString::FormatV(char const*, std::__va_list)+0x5e0>
   85040:	f9403ba0 	ldr	x0, [x29, #112]
   85044:	91003c03 	add	x3, x0, #0xf
   85048:	927df062 	and	x2, x3, #0xfffffffffffffff8
   8504c:	f9003ba2 	str	x2, [x29, #112]
   85050:	fd400000 	ldr	d0, [x0]
   85054:	910203a0 	add	x0, x29, #0x80
   85058:	97fffea2 	bl	84ae0 <CString::ftoa(char*, double, unsigned int)>
   8505c:	910203a0 	add	x0, x29, #0x80
   85060:	94000670 	bl	86a20 <strlen>
   85064:	aa0003fa 	mov	x26, x0
   85068:	35001336 	cbnz	w22, 852cc <CString::FormatV(char const*, std::__va_list)+0x55c>
   8506c:	eb13001f 	cmp	x0, x19
   85070:	54001543 	b.cc	85318 <CString::FormatV(char const*, std::__va_list)+0x5a8>  // b.lo, b.ul, b.last
   85074:	d503201f 	nop
   85078:	910203a1 	add	x1, x29, #0x80
   8507c:	aa1903e0 	mov	x0, x25
   85080:	97fffde4 	bl	84810 <CString::PutString(char const*)>
   85084:	17ffff58 	b	84de4 <CString::FormatV(char const*, std::__va_list)+0x74>
   85088:	39c00780 	ldrsb	w0, [x28, #1]
   8508c:	5100c001 	sub	w1, w0, #0x30
   85090:	12001c21 	and	w1, w1, #0xff
   85094:	7100243f 	cmp	w1, #0x9
   85098:	54001128 	b.hi	852bc <CString::FormatV(char const*, std::__va_list)+0x54c>  // b.pmore
   8509c:	52800001 	mov	w1, #0x0                   	// #0
   850a0:	52800146 	mov	w6, #0xa                   	// #10
   850a4:	14000002 	b	850ac <CString::FormatV(char const*, std::__va_list)+0x33c>
   850a8:	aa1c03f8 	mov	x24, x28
   850ac:	1b060021 	madd	w1, w1, w6, w0
   850b0:	39c00700 	ldrsb	w0, [x24, #1]
   850b4:	9100071c 	add	x28, x24, #0x1
   850b8:	5100c003 	sub	w3, w0, #0x30
   850bc:	5100c021 	sub	w1, w1, #0x30
   850c0:	12001c63 	and	w3, w3, #0xff
   850c4:	7100247f 	cmp	w3, #0x9
   850c8:	54ffff09 	b.ls	850a8 <CString::FormatV(char const*, std::__va_list)+0x338>  // b.plast
   850cc:	91000b18 	add	x24, x24, #0x2
   850d0:	17ffff71 	b	84e94 <CString::FormatV(char const*, std::__va_list)+0x124>
   850d4:	d280014b 	mov	x11, #0xa                   	// #10
   850d8:	7101d41f 	cmp	w0, #0x75
   850dc:	54ffefc0 	b.eq	84ed4 <CString::FormatV(char const*, std::__va_list)+0x164>  // b.none
   850e0:	7101e01f 	cmp	w0, #0x78
   850e4:	540002a1 	b.ne	85138 <CString::FormatV(char const*, std::__va_list)+0x3c8>  // b.any
   850e8:	d280020b 	mov	x11, #0x10                  	// #16
   850ec:	b9407fa1 	ldr	w1, [x29, #124]
   850f0:	35ffef63 	cbnz	w3, 84edc <CString::FormatV(char const*, std::__va_list)+0x16c>
   850f4:	37f834a1 	tbnz	w1, #31, 85788 <CString::FormatV(char const*, std::__va_list)+0xa18>
   850f8:	f9403ba1 	ldr	x1, [x29, #112]
   850fc:	91002c23 	add	x3, x1, #0xb
   85100:	b9400026 	ldr	w6, [x1]
   85104:	927df062 	and	x2, x3, #0xfffffffffffffff8
   85108:	f9003ba2 	str	x2, [x29, #112]
   8510c:	d2800021 	mov	x1, #0x1                   	// #1
   85110:	eb0b00df 	cmp	x6, x11
   85114:	54ffef62 	b.cs	84f00 <CString::FormatV(char const*, std::__va_list)+0x190>  // b.hs, b.nlast
   85118:	aa0603ea 	mov	x10, x6
   8511c:	aa0603e3 	mov	x3, x6
   85120:	17ffff7d 	b	84f14 <CString::FormatV(char const*, std::__va_list)+0x1a4>
   85124:	aa1a03fc 	mov	x28, x26
   85128:	d2800013 	mov	x19, #0x0                   	// #0
   8512c:	17ffff56 	b	84e84 <CString::FormatV(char const*, std::__va_list)+0x114>
   85130:	7101c01f 	cmp	w0, #0x70
   85134:	54fffda0 	b.eq	850e8 <CString::FormatV(char const*, std::__va_list)+0x378>  // b.none
   85138:	d2800021 	mov	x1, #0x1                   	// #1
   8513c:	aa1903e0 	mov	x0, x25
   85140:	97fffcd8 	bl	844a0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   85144:	f9400f20 	ldr	x0, [x25, #24]
   85148:	d2800021 	mov	x1, #0x1                   	// #1
   8514c:	528004a3 	mov	w3, #0x25                  	// #37
   85150:	8b010005 	add	x5, x0, x1
   85154:	f9000f25 	str	x5, [x25, #24]
   85158:	39000003 	strb	w3, [x0]
   8515c:	aa1903e0 	mov	x0, x25
   85160:	39c00393 	ldrsb	w19, [x28]
   85164:	97fffccf 	bl	844a0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   85168:	f9400f20 	ldr	x0, [x25, #24]
   8516c:	91000401 	add	x1, x0, #0x1
   85170:	f9000f21 	str	x1, [x25, #24]
   85174:	39000013 	strb	w19, [x0]
   85178:	17ffff1b 	b	84de4 <CString::FormatV(char const*, std::__va_list)+0x74>
   8517c:	b9407fa0 	ldr	w0, [x29, #124]
   85180:	34001a63 	cbz	w3, 854cc <CString::FormatV(char const*, std::__va_list)+0x75c>
   85184:	37f832e0 	tbnz	w0, #31, 857e0 <CString::FormatV(char const*, std::__va_list)+0xa70>
   85188:	f9403ba0 	ldr	x0, [x29, #112]
   8518c:	91003c01 	add	x1, x0, #0xf
   85190:	927df021 	and	x1, x1, #0xfffffffffffffff8
   85194:	f9003ba1 	str	x1, [x29, #112]
   85198:	f9400006 	ldr	x6, [x0]
   8519c:	5280001a 	mov	w26, #0x0                   	// #0
   851a0:	b6f80066 	tbz	x6, #63, 851ac <CString::FormatV(char const*, std::__va_list)+0x43c>
   851a4:	cb0603e6 	neg	x6, x6
   851a8:	5280003a 	mov	w26, #0x1                   	// #1
   851ac:	aa0603ea 	mov	x10, x6
   851b0:	d2800020 	mov	x0, #0x1                   	// #1
   851b4:	f10024df 	cmp	x6, #0x9
   851b8:	5400140d 	b.le	85438 <CString::FormatV(char const*, std::__va_list)+0x6c8>
   851bc:	d503201f 	nop
   851c0:	8b000800 	add	x0, x0, x0, lsl #2
   851c4:	8b000000 	add	x0, x0, x0
   851c8:	9ac008c3 	udiv	x3, x6, x0
   851cc:	f100247f 	cmp	x3, #0x9
   851d0:	54ffff88 	b.hi	851c0 <CString::FormatV(char const*, std::__va_list)+0x450>  // b.pmore
   851d4:	9ac008c6 	udiv	x6, x6, x0
   851d8:	910203ab 	add	x11, x29, #0x80
   851dc:	14000004 	b	851ec <CString::FormatV(char const*, std::__va_list)+0x47c>
   851e0:	9ac00946 	udiv	x6, x10, x0
   851e4:	aa0903eb 	mov	x11, x9
   851e8:	aa0603e3 	mov	x3, x6
   851ec:	12001c61 	and	w1, w3, #0xff
   851f0:	aa0b03e9 	mov	x9, x11
   851f4:	1100c028 	add	w8, w1, #0x30
   851f8:	11015c21 	add	w1, w1, #0x57
   851fc:	f100247f 	cmp	x3, #0x9
   85200:	9bd57c0c 	umulh	x12, x0, x21
   85204:	13001d03 	sxtb	w3, w8
   85208:	13001c21 	sxtb	w1, w1
   8520c:	1a838021 	csel	w1, w1, w3, hi  // hi = pmore
   85210:	38001521 	strb	w1, [x9], #1
   85214:	d503201f 	nop
   85218:	9b00a8ca 	msub	x10, x6, x0, x10
   8521c:	d343fd80 	lsr	x0, x12, #3
   85220:	b5fffe00 	cbnz	x0, 851e0 <CString::FormatV(char const*, std::__va_list)+0x470>
   85224:	3900057f 	strb	wzr, [x11, #1]
   85228:	910203a0 	add	x0, x29, #0x80
   8522c:	940005fd 	bl	86a20 <strlen>
   85230:	aa0003fb 	mov	x27, x0
   85234:	35000cba 	cbnz	w26, 853c8 <CString::FormatV(char const*, std::__va_list)+0x658>
   85238:	34001176 	cbz	w22, 85464 <CString::FormatV(char const*, std::__va_list)+0x6f4>
   8523c:	910203a1 	add	x1, x29, #0x80
   85240:	aa1903e0 	mov	x0, x25
   85244:	97fffd73 	bl	84810 <CString::PutString(char const*)>
   85248:	eb1b027f 	cmp	x19, x27
   8524c:	54ffdcc9 	b.ls	84de4 <CString::FormatV(char const*, std::__va_list)+0x74>  // b.plast
   85250:	cb1b0273 	sub	x19, x19, x27
   85254:	aa1903e0 	mov	x0, x25
   85258:	aa1303e1 	mov	x1, x19
   8525c:	97fffc91 	bl	844a0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   85260:	d1000660 	sub	x0, x19, #0x1
   85264:	52800405 	mov	w5, #0x20                  	// #32
   85268:	f9400f21 	ldr	x1, [x25, #24]
   8526c:	d1000400 	sub	x0, x0, #0x1
   85270:	b100041f 	cmn	x0, #0x1
   85274:	91000423 	add	x3, x1, #0x1
   85278:	f9000f23 	str	x3, [x25, #24]
   8527c:	39000025 	strb	w5, [x1]
   85280:	54ffff41 	b.ne	85268 <CString::FormatV(char const*, std::__va_list)+0x4f8>  // b.any
   85284:	17fffed8 	b	84de4 <CString::FormatV(char const*, std::__va_list)+0x74>
   85288:	d2800021 	mov	x1, #0x1                   	// #1
   8528c:	aa1903e0 	mov	x0, x25
   85290:	97fffc84 	bl	844a0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   85294:	91000b18 	add	x24, x24, #0x2
   85298:	f9400f20 	ldr	x0, [x25, #24]
   8529c:	91000401 	add	x1, x0, #0x1
   852a0:	f9000f21 	str	x1, [x25, #24]
   852a4:	3900001b 	strb	w27, [x0]
   852a8:	17fffecf 	b	84de4 <CString::FormatV(char const*, std::__va_list)+0x74>
   852ac:	7101601f 	cmp	w0, #0x58
   852b0:	54fff441 	b.ne	85138 <CString::FormatV(char const*, std::__va_list)+0x3c8>  // b.any
   852b4:	d280020b 	mov	x11, #0x10                  	// #16
   852b8:	17ffff8d 	b	850ec <CString::FormatV(char const*, std::__va_list)+0x37c>
   852bc:	aa1803fc 	mov	x28, x24
   852c0:	52800001 	mov	w1, #0x0                   	// #0
   852c4:	91000718 	add	x24, x24, #0x1
   852c8:	17fffef3 	b	84e94 <CString::FormatV(char const*, std::__va_list)+0x124>
   852cc:	910203a1 	add	x1, x29, #0x80
   852d0:	aa1903e0 	mov	x0, x25
   852d4:	97fffd4f 	bl	84810 <CString::PutString(char const*)>
   852d8:	eb13035f 	cmp	x26, x19
   852dc:	54ffd842 	b.cs	84de4 <CString::FormatV(char const*, std::__va_list)+0x74>  // b.hs, b.nlast
   852e0:	cb1a0273 	sub	x19, x19, x26
   852e4:	aa1903e0 	mov	x0, x25
   852e8:	aa1303e1 	mov	x1, x19
   852ec:	97fffc6d 	bl	844a0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   852f0:	d1000660 	sub	x0, x19, #0x1
   852f4:	52800405 	mov	w5, #0x20                  	// #32
   852f8:	f9400f21 	ldr	x1, [x25, #24]
   852fc:	d1000400 	sub	x0, x0, #0x1
   85300:	b100041f 	cmn	x0, #0x1
   85304:	91000423 	add	x3, x1, #0x1
   85308:	f9000f23 	str	x3, [x25, #24]
   8530c:	39000025 	strb	w5, [x1]
   85310:	54ffff41 	b.ne	852f8 <CString::FormatV(char const*, std::__va_list)+0x588>  // b.any
   85314:	17fffeb4 	b	84de4 <CString::FormatV(char const*, std::__va_list)+0x74>
   85318:	cb000273 	sub	x19, x19, x0
   8531c:	aa1903e0 	mov	x0, x25
   85320:	aa1303e1 	mov	x1, x19
   85324:	97fffc5f 	bl	844a0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   85328:	d1000660 	sub	x0, x19, #0x1
   8532c:	52800405 	mov	w5, #0x20                  	// #32
   85330:	f9400f21 	ldr	x1, [x25, #24]
   85334:	d1000400 	sub	x0, x0, #0x1
   85338:	b100041f 	cmn	x0, #0x1
   8533c:	91000423 	add	x3, x1, #0x1
   85340:	f9000f23 	str	x3, [x25, #24]
   85344:	39000025 	strb	w5, [x1]
   85348:	54ffff41 	b.ne	85330 <CString::FormatV(char const*, std::__va_list)+0x5c0>  // b.any
   8534c:	17ffff4b 	b	85078 <CString::FormatV(char const*, std::__va_list)+0x308>
   85350:	b9407ba0 	ldr	w0, [x29, #120]
   85354:	11004003 	add	w3, w0, #0x10
   85358:	7100007f 	cmp	w3, #0x0
   8535c:	54001eed 	b.le	85738 <CString::FormatV(char const*, std::__va_list)+0x9c8>
   85360:	f9403ba0 	ldr	x0, [x29, #112]
   85364:	b9007ba3 	str	w3, [x29, #120]
   85368:	91003c06 	add	x6, x0, #0xf
   8536c:	927df0c2 	and	x2, x6, #0xfffffffffffffff8
   85370:	f9003ba2 	str	x2, [x29, #112]
   85374:	17ffff37 	b	85050 <CString::FormatV(char const*, std::__va_list)+0x2e0>
   85378:	910203a1 	add	x1, x29, #0x80
   8537c:	aa1903e0 	mov	x0, x25
   85380:	97fffd24 	bl	84810 <CString::PutString(char const*)>
   85384:	eb13035f 	cmp	x26, x19
   85388:	54ffd2e2 	b.cs	84de4 <CString::FormatV(char const*, std::__va_list)+0x74>  // b.hs, b.nlast
   8538c:	cb1a0273 	sub	x19, x19, x26
   85390:	aa1903e0 	mov	x0, x25
   85394:	aa1303e1 	mov	x1, x19
   85398:	97fffc42 	bl	844a0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   8539c:	d1000660 	sub	x0, x19, #0x1
   853a0:	52800405 	mov	w5, #0x20                  	// #32
   853a4:	d503201f 	nop
   853a8:	f9400f21 	ldr	x1, [x25, #24]
   853ac:	d1000400 	sub	x0, x0, #0x1
   853b0:	b100041f 	cmn	x0, #0x1
   853b4:	91000423 	add	x3, x1, #0x1
   853b8:	f9000f23 	str	x3, [x25, #24]
   853bc:	39000025 	strb	w5, [x1]
   853c0:	54ffff41 	b.ne	853a8 <CString::FormatV(char const*, std::__va_list)+0x638>  // b.any
   853c4:	17fffe88 	b	84de4 <CString::FormatV(char const*, std::__va_list)+0x74>
   853c8:	9100041b 	add	x27, x0, #0x1
   853cc:	350003b6 	cbnz	w22, 85440 <CString::FormatV(char const*, std::__va_list)+0x6d0>
   853d0:	350006d7 	cbnz	w23, 854a8 <CString::FormatV(char const*, std::__va_list)+0x738>
   853d4:	eb13037f 	cmp	x27, x19
   853d8:	540001e2 	b.cs	85414 <CString::FormatV(char const*, std::__va_list)+0x6a4>  // b.hs, b.nlast
   853dc:	cb1b0273 	sub	x19, x19, x27
   853e0:	aa1903e0 	mov	x0, x25
   853e4:	aa1303e1 	mov	x1, x19
   853e8:	97fffc2e 	bl	844a0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   853ec:	d1000660 	sub	x0, x19, #0x1
   853f0:	52800405 	mov	w5, #0x20                  	// #32
   853f4:	f9400f21 	ldr	x1, [x25, #24]
   853f8:	d1000400 	sub	x0, x0, #0x1
   853fc:	b100041f 	cmn	x0, #0x1
   85400:	91000423 	add	x3, x1, #0x1
   85404:	f9000f23 	str	x3, [x25, #24]
   85408:	39000025 	strb	w5, [x1]
   8540c:	54ffff41 	b.ne	853f4 <CString::FormatV(char const*, std::__va_list)+0x684>  // b.any
   85410:	34ffe35a 	cbz	w26, 85078 <CString::FormatV(char const*, std::__va_list)+0x308>
   85414:	d2800021 	mov	x1, #0x1                   	// #1
   85418:	aa1903e0 	mov	x0, x25
   8541c:	97fffc21 	bl	844a0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   85420:	f9400f20 	ldr	x0, [x25, #24]
   85424:	528005a1 	mov	w1, #0x2d                  	// #45
   85428:	91000403 	add	x3, x0, #0x1
   8542c:	f9000f23 	str	x3, [x25, #24]
   85430:	39000001 	strb	w1, [x0]
   85434:	17ffff11 	b	85078 <CString::FormatV(char const*, std::__va_list)+0x308>
   85438:	aa0603e3 	mov	x3, x6
   8543c:	17ffff66 	b	851d4 <CString::FormatV(char const*, std::__va_list)+0x464>
   85440:	d2800021 	mov	x1, #0x1                   	// #1
   85444:	aa1903e0 	mov	x0, x25
   85448:	97fffc16 	bl	844a0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   8544c:	f9400f20 	ldr	x0, [x25, #24]
   85450:	528005a1 	mov	w1, #0x2d                  	// #45
   85454:	91000403 	add	x3, x0, #0x1
   85458:	f9000f23 	str	x3, [x25, #24]
   8545c:	39000001 	strb	w1, [x0]
   85460:	17ffff77 	b	8523c <CString::FormatV(char const*, std::__va_list)+0x4cc>
   85464:	34001d37 	cbz	w23, 85808 <CString::FormatV(char const*, std::__va_list)+0xa98>
   85468:	eb1b027f 	cmp	x19, x27
   8546c:	54ffe069 	b.ls	85078 <CString::FormatV(char const*, std::__va_list)+0x308>  // b.plast
   85470:	cb1b0273 	sub	x19, x19, x27
   85474:	aa1903e0 	mov	x0, x25
   85478:	aa1303e1 	mov	x1, x19
   8547c:	97fffc09 	bl	844a0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   85480:	d1000660 	sub	x0, x19, #0x1
   85484:	52800605 	mov	w5, #0x30                  	// #48
   85488:	f9400f21 	ldr	x1, [x25, #24]
   8548c:	d1000400 	sub	x0, x0, #0x1
   85490:	b100041f 	cmn	x0, #0x1
   85494:	91000423 	add	x3, x1, #0x1
   85498:	f9000f23 	str	x3, [x25, #24]
   8549c:	39000025 	strb	w5, [x1]
   854a0:	54ffff41 	b.ne	85488 <CString::FormatV(char const*, std::__va_list)+0x718>  // b.any
   854a4:	17fffef5 	b	85078 <CString::FormatV(char const*, std::__va_list)+0x308>
   854a8:	d2800021 	mov	x1, #0x1                   	// #1
   854ac:	aa1903e0 	mov	x0, x25
   854b0:	97fffbfc 	bl	844a0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   854b4:	f9400f20 	ldr	x0, [x25, #24]
   854b8:	528005a1 	mov	w1, #0x2d                  	// #45
   854bc:	91000403 	add	x3, x0, #0x1
   854c0:	f9000f23 	str	x3, [x25, #24]
   854c4:	39000001 	strb	w1, [x0]
   854c8:	17ffffe8 	b	85468 <CString::FormatV(char const*, std::__va_list)+0x6f8>
   854cc:	37f800e0 	tbnz	w0, #31, 854e8 <CString::FormatV(char const*, std::__va_list)+0x778>
   854d0:	f9403ba0 	ldr	x0, [x29, #112]
   854d4:	91002c01 	add	x1, x0, #0xb
   854d8:	927df021 	and	x1, x1, #0xfffffffffffffff8
   854dc:	b9800006 	ldrsw	x6, [x0]
   854e0:	f9003ba1 	str	x1, [x29, #112]
   854e4:	17ffff2e 	b	8519c <CString::FormatV(char const*, std::__va_list)+0x42c>
   854e8:	b9407fa0 	ldr	w0, [x29, #124]
   854ec:	11002001 	add	w1, w0, #0x8
   854f0:	7100003f 	cmp	w1, #0x0
   854f4:	540008ad 	b.le	85608 <CString::FormatV(char const*, std::__va_list)+0x898>
   854f8:	f9403ba0 	ldr	x0, [x29, #112]
   854fc:	b9007fa1 	str	w1, [x29, #124]
   85500:	91002c03 	add	x3, x0, #0xb
   85504:	927df061 	and	x1, x3, #0xfffffffffffffff8
   85508:	b9800006 	ldrsw	x6, [x0]
   8550c:	f9003ba1 	str	x1, [x29, #112]
   85510:	17ffff23 	b	8519c <CString::FormatV(char const*, std::__va_list)+0x42c>
   85514:	b9407fa0 	ldr	w0, [x29, #124]
   85518:	37f80640 	tbnz	w0, #31, 855e0 <CString::FormatV(char const*, std::__va_list)+0x870>
   8551c:	f9403ba0 	ldr	x0, [x29, #112]
   85520:	91003c01 	add	x1, x0, #0xf
   85524:	927df021 	and	x1, x1, #0xfffffffffffffff8
   85528:	f9003ba1 	str	x1, [x29, #112]
   8552c:	f940001b 	ldr	x27, [x0]
   85530:	aa1b03e0 	mov	x0, x27
   85534:	9400053b 	bl	86a20 <strlen>
   85538:	aa0003fa 	mov	x26, x0
   8553c:	350000f6 	cbnz	w22, 85558 <CString::FormatV(char const*, std::__va_list)+0x7e8>
   85540:	eb13001f 	cmp	x0, x19
   85544:	54000303 	b.cc	855a4 <CString::FormatV(char const*, std::__va_list)+0x834>  // b.lo, b.ul, b.last
   85548:	aa1b03e1 	mov	x1, x27
   8554c:	aa1903e0 	mov	x0, x25
   85550:	97fffcb0 	bl	84810 <CString::PutString(char const*)>
   85554:	17fffe24 	b	84de4 <CString::FormatV(char const*, std::__va_list)+0x74>
   85558:	aa1b03e1 	mov	x1, x27
   8555c:	aa1903e0 	mov	x0, x25
   85560:	97fffcac 	bl	84810 <CString::PutString(char const*)>
   85564:	eb13035f 	cmp	x26, x19
   85568:	54ffc3e2 	b.cs	84de4 <CString::FormatV(char const*, std::__va_list)+0x74>  // b.hs, b.nlast
   8556c:	cb1a0273 	sub	x19, x19, x26
   85570:	aa1903e0 	mov	x0, x25
   85574:	aa1303e1 	mov	x1, x19
   85578:	97fffbca 	bl	844a0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   8557c:	d1000660 	sub	x0, x19, #0x1
   85580:	52800405 	mov	w5, #0x20                  	// #32
   85584:	f9400f21 	ldr	x1, [x25, #24]
   85588:	d1000400 	sub	x0, x0, #0x1
   8558c:	b100041f 	cmn	x0, #0x1
   85590:	91000423 	add	x3, x1, #0x1
   85594:	f9000f23 	str	x3, [x25, #24]
   85598:	39000025 	strb	w5, [x1]
   8559c:	54ffff41 	b.ne	85584 <CString::FormatV(char const*, std::__va_list)+0x814>  // b.any
   855a0:	17fffe11 	b	84de4 <CString::FormatV(char const*, std::__va_list)+0x74>
   855a4:	cb000273 	sub	x19, x19, x0
   855a8:	aa1903e0 	mov	x0, x25
   855ac:	aa1303e1 	mov	x1, x19
   855b0:	97fffbbc 	bl	844a0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   855b4:	d1000660 	sub	x0, x19, #0x1
   855b8:	52800405 	mov	w5, #0x20                  	// #32
   855bc:	d503201f 	nop
   855c0:	f9400f21 	ldr	x1, [x25, #24]
   855c4:	d1000400 	sub	x0, x0, #0x1
   855c8:	b100041f 	cmn	x0, #0x1
   855cc:	91000423 	add	x3, x1, #0x1
   855d0:	f9000f23 	str	x3, [x25, #24]
   855d4:	39000025 	strb	w5, [x1]
   855d8:	54ffff41 	b.ne	855c0 <CString::FormatV(char const*, std::__va_list)+0x850>  // b.any
   855dc:	17ffffdb 	b	85548 <CString::FormatV(char const*, std::__va_list)+0x7d8>
   855e0:	b9407fa0 	ldr	w0, [x29, #124]
   855e4:	11002001 	add	w1, w0, #0x8
   855e8:	7100003f 	cmp	w1, #0x0
   855ec:	540001ad 	b.le	85620 <CString::FormatV(char const*, std::__va_list)+0x8b0>
   855f0:	f9403ba0 	ldr	x0, [x29, #112]
   855f4:	b9007fa1 	str	w1, [x29, #124]
   855f8:	91003c03 	add	x3, x0, #0xf
   855fc:	927df061 	and	x1, x3, #0xfffffffffffffff8
   85600:	f9003ba1 	str	x1, [x29, #112]
   85604:	17ffffca 	b	8552c <CString::FormatV(char const*, std::__va_list)+0x7bc>
   85608:	b9407fa0 	ldr	w0, [x29, #124]
   8560c:	f94037a2 	ldr	x2, [x29, #104]
   85610:	b9007fa1 	str	w1, [x29, #124]
   85614:	8b20c040 	add	x0, x2, w0, sxtw
   85618:	b9800006 	ldrsw	x6, [x0]
   8561c:	17fffee0 	b	8519c <CString::FormatV(char const*, std::__va_list)+0x42c>
   85620:	b9407fa0 	ldr	w0, [x29, #124]
   85624:	f94037a2 	ldr	x2, [x29, #104]
   85628:	b9007fa1 	str	w1, [x29, #124]
   8562c:	8b20c040 	add	x0, x2, w0, sxtw
   85630:	17ffffbf 	b	8552c <CString::FormatV(char const*, std::__va_list)+0x7bc>
   85634:	b9407fa0 	ldr	w0, [x29, #124]
   85638:	37f806c0 	tbnz	w0, #31, 85710 <CString::FormatV(char const*, std::__va_list)+0x9a0>
   8563c:	f9403ba0 	ldr	x0, [x29, #112]
   85640:	91002c01 	add	x1, x0, #0xb
   85644:	927df021 	and	x1, x1, #0xfffffffffffffff8
   85648:	f9003ba1 	str	x1, [x29, #112]
   8564c:	39c0001a 	ldrsb	w26, [x0]
   85650:	35000176 	cbnz	w22, 8567c <CString::FormatV(char const*, std::__va_list)+0x90c>
   85654:	f100067f 	cmp	x19, #0x1
   85658:	54000408 	b.hi	856d8 <CString::FormatV(char const*, std::__va_list)+0x968>  // b.pmore
   8565c:	d2800021 	mov	x1, #0x1                   	// #1
   85660:	aa1903e0 	mov	x0, x25
   85664:	97fffb8f 	bl	844a0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   85668:	f9400f20 	ldr	x0, [x25, #24]
   8566c:	91000401 	add	x1, x0, #0x1
   85670:	f9000f21 	str	x1, [x25, #24]
   85674:	3900001a 	strb	w26, [x0]
   85678:	17fffddb 	b	84de4 <CString::FormatV(char const*, std::__va_list)+0x74>
   8567c:	d2800021 	mov	x1, #0x1                   	// #1
   85680:	aa1903e0 	mov	x0, x25
   85684:	97fffb87 	bl	844a0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   85688:	f9400f20 	ldr	x0, [x25, #24]
   8568c:	f100067f 	cmp	x19, #0x1
   85690:	91000401 	add	x1, x0, #0x1
   85694:	f9000f21 	str	x1, [x25, #24]
   85698:	3900001a 	strb	w26, [x0]
   8569c:	54ffba49 	b.ls	84de4 <CString::FormatV(char const*, std::__va_list)+0x74>  // b.plast
   856a0:	d1000661 	sub	x1, x19, #0x1
   856a4:	aa1903e0 	mov	x0, x25
   856a8:	d1000a73 	sub	x19, x19, #0x2
   856ac:	97fffb7d 	bl	844a0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   856b0:	52800403 	mov	w3, #0x20                  	// #32
   856b4:	d503201f 	nop
   856b8:	f9400f20 	ldr	x0, [x25, #24]
   856bc:	d1000673 	sub	x19, x19, #0x1
   856c0:	b100067f 	cmn	x19, #0x1
   856c4:	91000401 	add	x1, x0, #0x1
   856c8:	f9000f21 	str	x1, [x25, #24]
   856cc:	39000003 	strb	w3, [x0]
   856d0:	54ffff41 	b.ne	856b8 <CString::FormatV(char const*, std::__va_list)+0x948>  // b.any
   856d4:	17fffdc4 	b	84de4 <CString::FormatV(char const*, std::__va_list)+0x74>
   856d8:	d1000661 	sub	x1, x19, #0x1
   856dc:	aa1903e0 	mov	x0, x25
   856e0:	d1000a73 	sub	x19, x19, #0x2
   856e4:	97fffb6f 	bl	844a0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   856e8:	52800403 	mov	w3, #0x20                  	// #32
   856ec:	d503201f 	nop
   856f0:	f9400f20 	ldr	x0, [x25, #24]
   856f4:	d1000673 	sub	x19, x19, #0x1
   856f8:	b100067f 	cmn	x19, #0x1
   856fc:	91000401 	add	x1, x0, #0x1
   85700:	f9000f21 	str	x1, [x25, #24]
   85704:	39000003 	strb	w3, [x0]
   85708:	54ffff41 	b.ne	856f0 <CString::FormatV(char const*, std::__va_list)+0x980>  // b.any
   8570c:	17ffffd4 	b	8565c <CString::FormatV(char const*, std::__va_list)+0x8ec>
   85710:	b9407fa0 	ldr	w0, [x29, #124]
   85714:	11002001 	add	w1, w0, #0x8
   85718:	7100003f 	cmp	w1, #0x0
   8571c:	5400018d 	b.le	8574c <CString::FormatV(char const*, std::__va_list)+0x9dc>
   85720:	f9403ba0 	ldr	x0, [x29, #112]
   85724:	b9007fa1 	str	w1, [x29, #124]
   85728:	91002c03 	add	x3, x0, #0xb
   8572c:	927df061 	and	x1, x3, #0xfffffffffffffff8
   85730:	f9003ba1 	str	x1, [x29, #112]
   85734:	17ffffc6 	b	8564c <CString::FormatV(char const*, std::__va_list)+0x8dc>
   85738:	b9407ba2 	ldr	w2, [x29, #120]
   8573c:	f9400a80 	ldr	x0, [x20, #16]
   85740:	b9007ba3 	str	w3, [x29, #120]
   85744:	8b22c000 	add	x0, x0, w2, sxtw
   85748:	17fffe42 	b	85050 <CString::FormatV(char const*, std::__va_list)+0x2e0>
   8574c:	b9407fa0 	ldr	w0, [x29, #124]
   85750:	f94037a2 	ldr	x2, [x29, #104]
   85754:	b9007fa1 	str	w1, [x29, #124]
   85758:	8b20c040 	add	x0, x2, w0, sxtw
   8575c:	17ffffbc 	b	8564c <CString::FormatV(char const*, std::__va_list)+0x8dc>
   85760:	b9407fa1 	ldr	w1, [x29, #124]
   85764:	11002023 	add	w3, w1, #0x8
   85768:	7100007f 	cmp	w3, #0x0
   8576c:	5400024d 	b.le	857b4 <CString::FormatV(char const*, std::__va_list)+0xa44>
   85770:	f9403ba1 	ldr	x1, [x29, #112]
   85774:	b9007fa3 	str	w3, [x29, #124]
   85778:	91003c26 	add	x6, x1, #0xf
   8577c:	927df0c2 	and	x2, x6, #0xfffffffffffffff8
   85780:	f9003ba2 	str	x2, [x29, #112]
   85784:	17fffddb 	b	84ef0 <CString::FormatV(char const*, std::__va_list)+0x180>
   85788:	b9407fa1 	ldr	w1, [x29, #124]
   8578c:	11002023 	add	w3, w1, #0x8
   85790:	7100007f 	cmp	w3, #0x0
   85794:	540001ad 	b.le	857c8 <CString::FormatV(char const*, std::__va_list)+0xa58>
   85798:	f9403ba1 	ldr	x1, [x29, #112]
   8579c:	b9007fa3 	str	w3, [x29, #124]
   857a0:	91002c26 	add	x6, x1, #0xb
   857a4:	927df0c2 	and	x2, x6, #0xfffffffffffffff8
   857a8:	b9400026 	ldr	w6, [x1]
   857ac:	f9003ba2 	str	x2, [x29, #112]
   857b0:	17fffe57 	b	8510c <CString::FormatV(char const*, std::__va_list)+0x39c>
   857b4:	b9407fa1 	ldr	w1, [x29, #124]
   857b8:	f94037a2 	ldr	x2, [x29, #104]
   857bc:	b9007fa3 	str	w3, [x29, #124]
   857c0:	8b21c041 	add	x1, x2, w1, sxtw
   857c4:	17fffdcb 	b	84ef0 <CString::FormatV(char const*, std::__va_list)+0x180>
   857c8:	b9407fa1 	ldr	w1, [x29, #124]
   857cc:	f94037a2 	ldr	x2, [x29, #104]
   857d0:	b9007fa3 	str	w3, [x29, #124]
   857d4:	8b21c041 	add	x1, x2, w1, sxtw
   857d8:	b9400026 	ldr	w6, [x1]
   857dc:	17fffe4c 	b	8510c <CString::FormatV(char const*, std::__va_list)+0x39c>
   857e0:	b9407fa0 	ldr	w0, [x29, #124]
   857e4:	11002001 	add	w1, w0, #0x8
   857e8:	7100003f 	cmp	w1, #0x0
   857ec:	5400014d 	b.le	85814 <CString::FormatV(char const*, std::__va_list)+0xaa4>
   857f0:	f9403ba0 	ldr	x0, [x29, #112]
   857f4:	b9007fa1 	str	w1, [x29, #124]
   857f8:	91003c03 	add	x3, x0, #0xf
   857fc:	927df061 	and	x1, x3, #0xfffffffffffffff8
   85800:	f9003ba1 	str	x1, [x29, #112]
   85804:	17fffe65 	b	85198 <CString::FormatV(char const*, std::__va_list)+0x428>
   85808:	eb13001f 	cmp	x0, x19
   8580c:	54ffc362 	b.cs	85078 <CString::FormatV(char const*, std::__va_list)+0x308>  // b.hs, b.nlast
   85810:	17fffef3 	b	853dc <CString::FormatV(char const*, std::__va_list)+0x66c>
   85814:	b9407fa0 	ldr	w0, [x29, #124]
   85818:	f94037a2 	ldr	x2, [x29, #104]
   8581c:	b9007fa1 	str	w1, [x29, #124]
   85820:	8b20c040 	add	x0, x2, w0, sxtw
   85824:	17fffe5d 	b	85198 <CString::FormatV(char const*, std::__va_list)+0x428>
   85828:	d503201f 	nop
   8582c:	d503201f 	nop

0000000000085830 <CString::Format(char const*, ...)>:
   85830:	a9b07bfd 	stp	x29, x30, [sp, #-256]!
   85834:	910003fd 	mov	x29, sp
   85838:	910403a8 	add	x8, x29, #0x100
   8583c:	910343a9 	add	x9, x29, #0xd0
   85840:	a90323a8 	stp	x8, x8, [x29, #48]
   85844:	128005e8 	mov	w8, #0xffffffd0            	// #-48
   85848:	f90023a9 	str	x9, [x29, #64]
   8584c:	b9004ba8 	str	w8, [x29, #72]
   85850:	12800fe8 	mov	w8, #0xffffff80            	// #-128
   85854:	b9004fa8 	str	w8, [x29, #76]
   85858:	a9432faa 	ldp	x10, x11, [x29, #48]
   8585c:	a9012faa 	stp	x10, x11, [x29, #16]
   85860:	a94427a8 	ldp	x8, x9, [x29, #64]
   85864:	a90227a8 	stp	x8, x9, [x29, #32]
   85868:	3d8017a0 	str	q0, [x29, #80]
   8586c:	3d801ba1 	str	q1, [x29, #96]
   85870:	3d801fa2 	str	q2, [x29, #112]
   85874:	3d8023a3 	str	q3, [x29, #128]
   85878:	3d8027a4 	str	q4, [x29, #144]
   8587c:	3d802ba5 	str	q5, [x29, #160]
   85880:	3d802fa6 	str	q6, [x29, #176]
   85884:	3d8033a7 	str	q7, [x29, #192]
   85888:	a90d0fa2 	stp	x2, x3, [x29, #208]
   8588c:	910043a2 	add	x2, x29, #0x10
   85890:	a90e17a4 	stp	x4, x5, [x29, #224]
   85894:	a90f1fa6 	stp	x6, x7, [x29, #240]
   85898:	97fffd36 	bl	84d70 <CString::FormatV(char const*, std::__va_list)>
   8589c:	a8d07bfd 	ldp	x29, x30, [sp], #256
   858a0:	d65f03c0 	ret
	...

00000000000858b0 <__aeabi_atexit>:
   858b0:	d65f03c0 	ret
   858b4:	d503201f 	nop
   858b8:	d503201f 	nop
   858bc:	d503201f 	nop

00000000000858c0 <__cxa_atexit>:
   858c0:	d65f03c0 	ret
   858c4:	d503201f 	nop
   858c8:	d503201f 	nop
   858cc:	d503201f 	nop

00000000000858d0 <__errno>:
   858d0:	d0000040 	adrp	x0, 8f000 <vtable for CDevice+0x720>
   858d4:	91154000 	add	x0, x0, #0x550
   858d8:	91002000 	add	x0, x0, #0x8
   858dc:	d65f03c0 	ret

00000000000858e0 <halt>:
   858e0:	d50342df 	msr	daifset, #0x2
   858e4:	d50341df 	msr	daifset, #0x1
   858e8:	d5033f9f 	dsb	sy
   858ec:	d503207f 	wfi
   858f0:	17fffffe 	b	858e8 <halt+0x8>
   858f4:	d503201f 	nop
   858f8:	d503201f 	nop
   858fc:	d503201f 	nop

0000000000085900 <reboot>:
   85900:	d2800482 	mov	x2, #0x24                  	// #36
   85904:	f2a7e202 	movk	x2, #0x3f10, lsl #16
   85908:	d2800380 	mov	x0, #0x1c                  	// #28
   8590c:	f2a7e200 	movk	x0, #0x3f10, lsl #16
   85910:	52800023 	mov	w3, #0x1                   	// #1
   85914:	72ab4003 	movk	w3, #0x5a00, lsl #16
   85918:	b9000043 	str	w3, [x2]
   8591c:	52800401 	mov	w1, #0x20                  	// #32
   85920:	72ab4001 	movk	w1, #0x5a00, lsl #16
   85924:	b9000001 	str	w1, [x0]
   85928:	14000000 	b	85928 <reboot+0x28>
   8592c:	d503201f 	nop

0000000000085930 <sysinit>:
   85930:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   85934:	910003fd 	mov	x29, sp
   85938:	a90153f3 	stp	x19, x20, [sp, #16]
   8593c:	d50341ff 	msr	daifclr, #0x1
   85940:	d0000040 	adrp	x0, 8f000 <vtable for CDevice+0x720>
   85944:	9114a000 	add	x0, x0, #0x528
   85948:	d0000041 	adrp	x1, 8f000 <vtable for CDevice+0x720>
   8594c:	91190021 	add	x1, x1, #0x640
   85950:	eb01001f 	cmp	x0, x1
   85954:	54000082 	b.cs	85964 <sysinit+0x34>  // b.hs, b.nlast
   85958:	3800141f 	strb	wzr, [x0], #1
   8595c:	eb01001f 	cmp	x0, x1
   85960:	54ffffc1 	b.ne	85958 <sysinit+0x28>  // b.any
   85964:	910083a0 	add	x0, x29, #0x20
   85968:	97fff3a0 	bl	827e8 <CMachineInfo::CMachineInfo()>
   8596c:	d0000053 	adrp	x19, 8f000 <vtable for CDevice+0x720>
   85970:	9103e273 	add	x19, x19, #0xf8
   85974:	d0000040 	adrp	x0, 8f000 <vtable for CDevice+0x720>
   85978:	91046000 	add	x0, x0, #0x118
   8597c:	eb00027f 	cmp	x19, x0
   85980:	54000182 	b.cs	859b0 <sysinit+0x80>  // b.hs, b.nlast
   85984:	91001c14 	add	x20, x0, #0x7
   85988:	d0000040 	adrp	x0, 8f000 <vtable for CDevice+0x720>
   8598c:	91040000 	add	x0, x0, #0x100
   85990:	cb000294 	sub	x20, x20, x0
   85994:	927df294 	and	x20, x20, #0xfffffffffffffff8
   85998:	8b000294 	add	x20, x20, x0
   8599c:	d503201f 	nop
   859a0:	f8408660 	ldr	x0, [x19], #8
   859a4:	d63f0000 	blr	x0
   859a8:	eb14027f 	cmp	x19, x20
   859ac:	54ffffa1 	b.ne	859a0 <sysinit+0x70>  // b.any
   859b0:	97ffeb94 	bl	80800 <main>
   859b4:	7100041f 	cmp	w0, #0x1
   859b8:	54000040 	b.eq	859c0 <sysinit+0x90>  // b.none
   859bc:	97ffffc9 	bl	858e0 <halt>
   859c0:	94000654 	bl	87310 <IsChainBootEnabled>
   859c4:	72001c1f 	tst	w0, #0xff
   859c8:	54000041 	b.ne	859d0 <sysinit+0xa0>  // b.any
   859cc:	97ffffcd 	bl	85900 <reboot>
   859d0:	d50341df 	msr	daifset, #0x1
   859d4:	94000657 	bl	87330 <DoChainBoot>
   859d8:	97ffffca 	bl	85900 <reboot>
   859dc:	00000000 	.inst	0x00000000 ; undefined

00000000000859e0 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>:
   859e0:	11000400 	add	w0, w0, #0x1
   859e4:	d5033fdf 	isb
   859e8:	d53be023 	mrs	x3, cntpct_el0
   859ec:	d53be002 	mrs	x2, cntfrq_el0
   859f0:	d2884801 	mov	x1, #0x4240                	// #16960
   859f4:	f2a001e1 	movk	x1, #0xf, lsl #16
   859f8:	aa0103e4 	mov	x4, x1
   859fc:	9b017c63 	mul	x3, x3, x1
   85a00:	9ac20863 	udiv	x3, x3, x2
   85a04:	d503201f 	nop
   85a08:	d5033fdf 	isb
   85a0c:	d53be021 	mrs	x1, cntpct_el0
   85a10:	d53be002 	mrs	x2, cntfrq_el0
   85a14:	9b047c21 	mul	x1, x1, x4
   85a18:	9ac20821 	udiv	x1, x1, x2
   85a1c:	4b030021 	sub	w1, w1, w3
   85a20:	6b01001f 	cmp	w0, w1
   85a24:	54ffff28 	b.hi	85a08 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]+0x28>  // b.pmore
   85a28:	d65f03c0 	ret
   85a2c:	d503201f 	nop

0000000000085a30 <CTimer::CTimer(CInterruptSystem*)>:
   85a30:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   85a34:	d2800022 	mov	x2, #0x1                   	// #1
   85a38:	910003fd 	mov	x29, sp
   85a3c:	a90153f3 	stp	x19, x20, [sp, #16]
   85a40:	aa0003f3 	mov	x19, x0
   85a44:	91008000 	add	x0, x0, #0x20
   85a48:	b9000e7f 	str	wzr, [x19, #12]
   85a4c:	b900127f 	str	wzr, [x19, #16]
   85a50:	f9000261 	str	x1, [x19]
   85a54:	b900167f 	str	wzr, [x19, #20]
   85a58:	f9000e62 	str	x2, [x19, #24]
   85a5c:	94001621 	bl	8b2e0 <CPtrList::CPtrList()>
   85a60:	f9001e7f 	str	xzr, [x19, #56]
   85a64:	d0000054 	adrp	x20, 8f000 <vtable for CDevice+0x720>
   85a68:	f942b280 	ldr	x0, [x20, #1376]
   85a6c:	d2800022 	mov	x2, #0x1                   	// #1
   85a70:	52802bc1 	mov	w1, #0x15e                 	// #350
   85a74:	f2cae602 	movk	x2, #0x5730, lsl #32
   85a78:	f2e000a2 	movk	x2, #0x5, lsl #48
   85a7c:	f9001662 	str	x2, [x19, #40]
   85a80:	b9003261 	str	w1, [x19, #48]
   85a84:	b40000e0 	cbz	x0, 85aa0 <CTimer::CTimer(CInterruptSystem*)+0x70>
   85a88:	90000041 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   85a8c:	90000040 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   85a90:	528007a2 	mov	w2, #0x3d                  	// #61
   85a94:	91138021 	add	x1, x1, #0x4e0
   85a98:	9113c000 	add	x0, x0, #0x4f0
   85a9c:	94000ae5 	bl	88630 <assertion_failed>
   85aa0:	f902b293 	str	x19, [x20, #1376]
   85aa4:	a94153f3 	ldp	x19, x20, [sp, #16]
   85aa8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   85aac:	d65f03c0 	ret

0000000000085ab0 <CTimer::~CTimer()>:
   85ab0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   85ab4:	910003fd 	mov	x29, sp
   85ab8:	a90153f3 	stp	x19, x20, [sp, #16]
   85abc:	aa0003f4 	mov	x20, x0
   85ac0:	f9400000 	ldr	x0, [x0]
   85ac4:	a9025bf5 	stp	x21, x22, [sp, #32]
   85ac8:	a90363f7 	stp	x23, x24, [sp, #48]
   85acc:	b4000620 	cbz	x0, 85b90 <CTimer::~CTimer()+0xe0>
   85ad0:	52800001 	mov	w1, #0x0                   	// #0
   85ad4:	d51be221 	msr	cntp_ctl_el0, x1
   85ad8:	52800921 	mov	w1, #0x49                  	// #73
   85adc:	940012e9 	bl	8a680 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   85ae0:	90000056 	adrp	x22, 8d000 <vtable for CGPIOPin+0x158>
   85ae4:	911382d6 	add	x22, x22, #0x4e0
   85ae8:	90000040 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   85aec:	91146018 	add	x24, x0, #0x518
   85af0:	5289a877 	mov	w23, #0x4d43                	// #19779
   85af4:	72a96a97 	movk	w23, #0x4b54, lsl #16
   85af8:	91008294 	add	x20, x20, #0x20
   85afc:	14000014 	b	85b4c <CTimer::~CTimer()+0x9c>
   85b00:	aa0003e1 	mov	x1, x0
   85b04:	aa1403e0 	mov	x0, x20
   85b08:	94001626 	bl	8b3a0 <CPtrList::GetPtr(TPtrListElement*)>
   85b0c:	aa0003f5 	mov	x21, x0
   85b10:	b4000360 	cbz	x0, 85b7c <CTimer::~CTimer()+0xcc>
   85b14:	b94002a3 	ldr	w3, [x21]
   85b18:	90000040 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   85b1c:	52800aa2 	mov	w2, #0x55                  	// #85
   85b20:	aa1603e1 	mov	x1, x22
   85b24:	9114a000 	add	x0, x0, #0x528
   85b28:	6b17007f 	cmp	w3, w23
   85b2c:	54000040 	b.eq	85b34 <CTimer::~CTimer()+0x84>  // b.none
   85b30:	94000ac0 	bl	88630 <assertion_failed>
   85b34:	aa1303e1 	mov	x1, x19
   85b38:	aa1403e0 	mov	x0, x20
   85b3c:	940016cd 	bl	8b670 <CPtrList::Remove(TPtrListElement*)>
   85b40:	d2800501 	mov	x1, #0x28                  	// #40
   85b44:	aa1503e0 	mov	x0, x21
   85b48:	94000926 	bl	87fe0 <operator delete(void*, unsigned long)>
   85b4c:	aa1403e0 	mov	x0, x20
   85b50:	940015f4 	bl	8b320 <CPtrList::GetFirst()>
   85b54:	aa0003f3 	mov	x19, x0
   85b58:	b5fffd40 	cbnz	x0, 85b00 <CTimer::~CTimer()+0x50>
   85b5c:	aa1403e0 	mov	x0, x20
   85b60:	d0000041 	adrp	x1, 8f000 <vtable for CDevice+0x720>
   85b64:	a94153f3 	ldp	x19, x20, [sp, #16]
   85b68:	f902b03f 	str	xzr, [x1, #1376]
   85b6c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   85b70:	a94363f7 	ldp	x23, x24, [sp, #48]
   85b74:	a8c47bfd 	ldp	x29, x30, [sp], #64
   85b78:	140015de 	b	8b2f0 <CPtrList::~CPtrList()>
   85b7c:	52800a82 	mov	w2, #0x54                  	// #84
   85b80:	aa1603e1 	mov	x1, x22
   85b84:	aa1803e0 	mov	x0, x24
   85b88:	94000aaa 	bl	88630 <assertion_failed>
   85b8c:	17ffffe2 	b	85b14 <CTimer::~CTimer()+0x64>
   85b90:	90000041 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   85b94:	90000040 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   85b98:	52800862 	mov	w2, #0x43                  	// #67
   85b9c:	91140000 	add	x0, x0, #0x500
   85ba0:	91138021 	add	x1, x1, #0x4e0
   85ba4:	94000aa3 	bl	88630 <assertion_failed>
   85ba8:	f9400280 	ldr	x0, [x20]
   85bac:	17ffffc9 	b	85ad0 <CTimer::~CTimer()+0x20>

0000000000085bb0 <CTimer::SetTimeZone(int)>:
   85bb0:	11167c22 	add	w2, w1, #0x59f
   85bb4:	712cf85f 	cmp	w2, #0xb3e
   85bb8:	54000088 	b.hi	85bc8 <CTimer::SetTimeZone(int)+0x18>  // b.pmore
   85bbc:	b9001c01 	str	w1, [x0, #28]
   85bc0:	52800020 	mov	w0, #0x1                   	// #1
   85bc4:	d65f03c0 	ret
   85bc8:	52800000 	mov	w0, #0x0                   	// #0
   85bcc:	d65f03c0 	ret

0000000000085bd0 <CTimer::GetTimeZone() const>:
   85bd0:	b9401c00 	ldr	w0, [x0, #28]
   85bd4:	d65f03c0 	ret
   85bd8:	d503201f 	nop
   85bdc:	d503201f 	nop

0000000000085be0 <CTimer::SetTime(unsigned int, bool)>:
   85be0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   85be4:	72001c5f 	tst	w2, #0xff
   85be8:	910003fd 	mov	x29, sp
   85bec:	a90153f3 	stp	x19, x20, [sp, #16]
   85bf0:	aa0003f3 	mov	x19, x0
   85bf4:	2a0103f4 	mov	w20, w1
   85bf8:	540000c1 	b.ne	85c10 <CTimer::SetTime(unsigned int, bool)+0x30>  // b.any
   85bfc:	b9401e61 	ldr	w1, [x19, #28]
   85c00:	52800780 	mov	w0, #0x3c                  	// #60
   85c04:	1b007c21 	mul	w1, w1, w0
   85c08:	37f80241 	tbnz	w1, #31, 85c50 <CTimer::SetTime(unsigned int, bool)+0x70>
   85c0c:	0b010294 	add	w20, w20, w1
   85c10:	b9401a60 	ldr	w0, [x19, #24]
   85c14:	350000c0 	cbnz	w0, 85c2c <CTimer::SetTime(unsigned int, bool)+0x4c>
   85c18:	b9001674 	str	w20, [x19, #20]
   85c1c:	52800020 	mov	w0, #0x1                   	// #1
   85c20:	a94153f3 	ldp	x19, x20, [sp, #16]
   85c24:	a8c27bfd 	ldp	x29, x30, [sp], #32
   85c28:	d65f03c0 	ret
   85c2c:	94000699 	bl	87690 <EnterCritical>
   85c30:	b9001674 	str	w20, [x19, #20]
   85c34:	b9401a60 	ldr	w0, [x19, #24]
   85c38:	34ffff20 	cbz	w0, 85c1c <CTimer::SetTime(unsigned int, bool)+0x3c>
   85c3c:	940006cd 	bl	87770 <LeaveCritical>
   85c40:	52800020 	mov	w0, #0x1                   	// #1
   85c44:	a94153f3 	ldp	x19, x20, [sp, #16]
   85c48:	a8c27bfd 	ldp	x29, x30, [sp], #32
   85c4c:	d65f03c0 	ret
   85c50:	4b0103e2 	neg	w2, w1
   85c54:	52800000 	mov	w0, #0x0                   	// #0
   85c58:	6b14005f 	cmp	w2, w20
   85c5c:	54fffe2c 	b.gt	85c20 <CTimer::SetTime(unsigned int, bool)+0x40>
   85c60:	0b010294 	add	w20, w20, w1
   85c64:	17ffffeb 	b	85c10 <CTimer::SetTime(unsigned int, bool)+0x30>
   85c68:	d503201f 	nop
   85c6c:	d503201f 	nop

0000000000085c70 <CTimer::GetClockTicks()>:
   85c70:	d5033fdf 	isb
   85c74:	d53be021 	mrs	x1, cntpct_el0
   85c78:	d53be002 	mrs	x2, cntfrq_el0
   85c7c:	d2884800 	mov	x0, #0x4240                	// #16960
   85c80:	f2a001e0 	movk	x0, #0xf, lsl #16
   85c84:	9b007c20 	mul	x0, x1, x0
   85c88:	9ac20800 	udiv	x0, x0, x2
   85c8c:	d65f03c0 	ret

0000000000085c90 <CTimer::GetTicks() const>:
   85c90:	b9400c00 	ldr	w0, [x0, #12]
   85c94:	d65f03c0 	ret
   85c98:	d503201f 	nop
   85c9c:	d503201f 	nop

0000000000085ca0 <CTimer::GetUptime() const>:
   85ca0:	b9401000 	ldr	w0, [x0, #16]
   85ca4:	d65f03c0 	ret
   85ca8:	d503201f 	nop
   85cac:	d503201f 	nop

0000000000085cb0 <CTimer::GetTime() const>:
   85cb0:	b9401400 	ldr	w0, [x0, #20]
   85cb4:	d65f03c0 	ret
   85cb8:	d503201f 	nop
   85cbc:	d503201f 	nop

0000000000085cc0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>:
   85cc0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   85cc4:	910003fd 	mov	x29, sp
   85cc8:	a90153f3 	stp	x19, x20, [sp, #16]
   85ccc:	aa0003f3 	mov	x19, x0
   85cd0:	b9401800 	ldr	w0, [x0, #24]
   85cd4:	a9025bf5 	stp	x21, x22, [sp, #32]
   85cd8:	aa0103f5 	mov	x21, x1
   85cdc:	f9001bf7 	str	x23, [sp, #48]
   85ce0:	aa0203f6 	mov	x22, x2
   85ce4:	350002a0 	cbnz	w0, 85d38 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x78>
   85ce8:	b9401677 	ldr	w23, [x19, #20]
   85cec:	b9400e74 	ldr	w20, [x19, #12]
   85cf0:	b4000335 	cbz	x21, 85d54 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x94>
   85cf4:	b90002b7 	str	w23, [x21]
   85cf8:	b4000416 	cbz	x22, 85d78 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb8>
   85cfc:	5290a3e0 	mov	w0, #0x851f                	// #34079
   85d00:	72aa3d60 	movk	w0, #0x51eb, lsl #16
   85d04:	52800c82 	mov	w2, #0x64                  	// #100
   85d08:	5284e201 	mov	w1, #0x2710                	// #10000
   85d0c:	9ba07e80 	umull	x0, w20, w0
   85d10:	f9401bf7 	ldr	x23, [sp, #48]
   85d14:	d365fc00 	lsr	x0, x0, #37
   85d18:	1b02d000 	msub	w0, w0, w2, w20
   85d1c:	a94153f3 	ldp	x19, x20, [sp, #16]
   85d20:	1b017c00 	mul	w0, w0, w1
   85d24:	b90002c0 	str	w0, [x22]
   85d28:	52800020 	mov	w0, #0x1                   	// #1
   85d2c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   85d30:	a8c47bfd 	ldp	x29, x30, [sp], #64
   85d34:	d65f03c0 	ret
   85d38:	94000656 	bl	87690 <EnterCritical>
   85d3c:	b9401677 	ldr	w23, [x19, #20]
   85d40:	b9401a60 	ldr	w0, [x19, #24]
   85d44:	b9400e74 	ldr	w20, [x19, #12]
   85d48:	34fffd40 	cbz	w0, 85cf0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x30>
   85d4c:	94000689 	bl	87770 <LeaveCritical>
   85d50:	b5fffd35 	cbnz	x21, 85cf4 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x34>
   85d54:	90000041 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   85d58:	90000040 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   85d5c:	52801f62 	mov	w2, #0xfb                  	// #251
   85d60:	91138021 	add	x1, x1, #0x4e0
   85d64:	91154000 	add	x0, x0, #0x550
   85d68:	94000a32 	bl	88630 <assertion_failed>
   85d6c:	b90002b7 	str	w23, [x21]
   85d70:	b5fffc76 	cbnz	x22, 85cfc <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x3c>
   85d74:	d503201f 	nop
   85d78:	90000041 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   85d7c:	90000040 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   85d80:	52801fc2 	mov	w2, #0xfe                  	// #254
   85d84:	91138021 	add	x1, x1, #0x4e0
   85d88:	91158000 	add	x0, x0, #0x560
   85d8c:	94000a29 	bl	88630 <assertion_failed>
   85d90:	17ffffdb 	b	85cfc <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x3c>
   85d94:	d503201f 	nop
   85d98:	d503201f 	nop
   85d9c:	d503201f 	nop

0000000000085da0 <CTimer::GetUniversalTime() const>:
   85da0:	b9401c01 	ldr	w1, [x0, #28]
   85da4:	52800783 	mov	w3, #0x3c                  	// #60
   85da8:	b9401402 	ldr	w2, [x0, #20]
   85dac:	1b037c21 	mul	w1, w1, w3
   85db0:	6b010040 	subs	w0, w2, w1
   85db4:	1a9fa000 	csel	w0, w0, wzr, ge  // ge = tcont
   85db8:	d65f03c0 	ret
   85dbc:	d503201f 	nop

0000000000085dc0 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)>:
   85dc0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   85dc4:	910003fd 	mov	x29, sp
   85dc8:	a90153f3 	stp	x19, x20, [sp, #16]
   85dcc:	aa0003f3 	mov	x19, x0
   85dd0:	b9401800 	ldr	w0, [x0, #24]
   85dd4:	a9025bf5 	stp	x21, x22, [sp, #32]
   85dd8:	aa0103f6 	mov	x22, x1
   85ddc:	f9001bf7 	str	x23, [sp, #48]
   85de0:	aa0203f7 	mov	x23, x2
   85de4:	35000380 	cbnz	w0, 85e54 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x94>
   85de8:	b9401674 	ldr	w20, [x19, #20]
   85dec:	b9400e75 	ldr	w21, [x19, #12]
   85df0:	b9401e73 	ldr	w19, [x19, #28]
   85df4:	52800781 	mov	w1, #0x3c                  	// #60
   85df8:	52800000 	mov	w0, #0x0                   	// #0
   85dfc:	1b017e73 	mul	w19, w19, w1
   85e00:	6b13029f 	cmp	w20, w19
   85e04:	540001eb 	b.lt	85e40 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x80>  // b.tstop
   85e08:	b4000436 	cbz	x22, 85e8c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xcc>
   85e0c:	4b130293 	sub	w19, w20, w19
   85e10:	b90002d3 	str	w19, [x22]
   85e14:	b40002f7 	cbz	x23, 85e70 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xb0>
   85e18:	5290a3e1 	mov	w1, #0x851f                	// #34079
   85e1c:	72aa3d61 	movk	w1, #0x51eb, lsl #16
   85e20:	52800c83 	mov	w3, #0x64                  	// #100
   85e24:	5284e202 	mov	w2, #0x2710                	// #10000
   85e28:	9ba17ea1 	umull	x1, w21, w1
   85e2c:	52800020 	mov	w0, #0x1                   	// #1
   85e30:	d365fc21 	lsr	x1, x1, #37
   85e34:	1b03d421 	msub	w1, w1, w3, w21
   85e38:	1b027c21 	mul	w1, w1, w2
   85e3c:	b90002e1 	str	w1, [x23]
   85e40:	a94153f3 	ldp	x19, x20, [sp, #16]
   85e44:	a9425bf5 	ldp	x21, x22, [sp, #32]
   85e48:	f9401bf7 	ldr	x23, [sp, #48]
   85e4c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   85e50:	d65f03c0 	ret
   85e54:	9400060f 	bl	87690 <EnterCritical>
   85e58:	b9401674 	ldr	w20, [x19, #20]
   85e5c:	b9401a60 	ldr	w0, [x19, #24]
   85e60:	b9400e75 	ldr	w21, [x19, #12]
   85e64:	34fffc60 	cbz	w0, 85df0 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x30>
   85e68:	94000642 	bl	87770 <LeaveCritical>
   85e6c:	17ffffe1 	b	85df0 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x30>
   85e70:	90000041 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   85e74:	90000040 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   85e78:	52802462 	mov	w2, #0x123                 	// #291
   85e7c:	91138021 	add	x1, x1, #0x4e0
   85e80:	91158000 	add	x0, x0, #0x560
   85e84:	940009eb 	bl	88630 <assertion_failed>
   85e88:	17ffffe4 	b	85e18 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x58>
   85e8c:	90000041 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   85e90:	90000040 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   85e94:	52802402 	mov	w2, #0x120                 	// #288
   85e98:	91138021 	add	x1, x1, #0x4e0
   85e9c:	91154000 	add	x0, x0, #0x550
   85ea0:	940009e4 	bl	88630 <assertion_failed>
   85ea4:	17ffffda 	b	85e0c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x4c>
   85ea8:	d503201f 	nop
   85eac:	d503201f 	nop

0000000000085eb0 <CTimer::GetTimeString()>:
   85eb0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   85eb4:	910003fd 	mov	x29, sp
   85eb8:	f9000bf3 	str	x19, [sp, #16]
   85ebc:	aa0003f3 	mov	x19, x0
   85ec0:	b9401800 	ldr	w0, [x0, #24]
   85ec4:	f90013f5 	str	x21, [sp, #32]
   85ec8:	f90027fa 	str	x26, [sp, #72]
   85ecc:	35000e60 	cbnz	w0, 86098 <CTimer::GetTimeString()+0x1e8>
   85ed0:	b9401675 	ldr	w21, [x19, #20]
   85ed4:	b9400e7a 	ldr	w26, [x19, #12]
   85ed8:	2a1a02a0 	orr	w0, w21, w26
   85edc:	34000ec0 	cbz	w0, 860b4 <CTimer::GetTimeString()+0x204>
   85ee0:	a902dfb6 	stp	x22, x23, [x29, #40]
   85ee4:	52911136 	mov	w22, #0x8889                	// #34953
   85ee8:	72b11116 	movk	w22, #0x8888, lsl #16
   85eec:	a903e7b8 	stp	x24, x25, [x29, #56]
   85ef0:	5288a0f3 	mov	w19, #0x4507                	// #17671
   85ef4:	72b845d3 	movk	w19, #0xc22e, lsl #16
   85ef8:	9bb67eb7 	umull	x23, w21, w22
   85efc:	529678b8 	mov	w24, #0xb3c5                	// #46021
   85f00:	72b23458 	movk	w24, #0x91a2, lsl #16
   85f04:	9bb37eb3 	umull	x19, w21, w19
   85f08:	52800780 	mov	w0, #0x3c                  	// #60
   85f0c:	d360fef7 	lsr	x23, x23, #32
   85f10:	9bb87eb8 	umull	x24, w21, w24
   85f14:	5290a3e8 	mov	w8, #0x851f                	// #34079
   85f18:	72aa3d68 	movk	w8, #0x51eb, lsl #16
   85f1c:	53057ee1 	lsr	w1, w23, #5
   85f20:	f9000fb4 	str	x20, [x29, #24]
   85f24:	52800c87 	mov	w7, #0x64                  	// #100
   85f28:	d36bff18 	lsr	x24, x24, #43
   85f2c:	d370fe73 	lsr	x19, x19, #48
   85f30:	52803205 	mov	w5, #0x190                 	// #400
   85f34:	9bb67c36 	umull	x22, w1, w22
   85f38:	5280f654 	mov	w20, #0x7b2                 	// #1970
   85f3c:	1b00d437 	msub	w23, w1, w0, w21
   85f40:	d365fed6 	lsr	x22, x22, #37
   85f44:	1b0086d6 	msub	w22, w22, w0, w1
   85f48:	14000003 	b	85f54 <CTimer::GetTimeString()+0xa4>
   85f4c:	4b000273 	sub	w19, w19, w0
   85f50:	11000694 	add	w20, w20, #0x1
   85f54:	9ba87e80 	umull	x0, w20, w8
   85f58:	f240069f 	tst	x20, #0x3
   85f5c:	1a9f17e2 	cset	w2, eq  // eq = none
   85f60:	d360fc00 	lsr	x0, x0, #32
   85f64:	53057c01 	lsr	w1, w0, #5
   85f68:	53077c00 	lsr	w0, w0, #7
   85f6c:	1b07d021 	msub	w1, w1, w7, w20
   85f70:	1b05d000 	msub	w0, w0, w5, w20
   85f74:	35000061 	cbnz	w1, 85f80 <CTimer::GetTimeString()+0xd0>
   85f78:	7100001f 	cmp	w0, #0x0
   85f7c:	1a9f17e2 	cset	w2, eq  // eq = none
   85f80:	1105b440 	add	w0, w2, #0x16d
   85f84:	6b00027f 	cmp	w19, w0
   85f88:	54fffe22 	b.cs	85f4c <CTimer::GetTimeString()+0x9c>  // b.hs, b.nlast
   85f8c:	90000041 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   85f90:	9112a021 	add	x1, x1, #0x4a8
   85f94:	52800015 	mov	w21, #0x0                   	// #0
   85f98:	14000003 	b	85fa4 <CTimer::GetTimeString()+0xf4>
   85f9c:	4b000273 	sub	w19, w19, w0
   85fa0:	110006b5 	add	w21, w21, #0x1
   85fa4:	7100005f 	cmp	w2, #0x0
   85fa8:	7a411aa0 	ccmp	w21, #0x1, #0x0, ne  // ne = any
   85fac:	54000880 	b.eq	860bc <CTimer::GetTimeString()+0x20c>  // b.none
   85fb0:	b8755820 	ldr	w0, [x1, w21, uxtw #2]
   85fb4:	6b00027f 	cmp	w19, w0
   85fb8:	54ffff22 	b.cs	85f9c <CTimer::GetTimeString()+0xec>  // b.hs, b.nlast
   85fbc:	5290a3f9 	mov	w25, #0x851f                	// #34079
   85fc0:	72aa3d79 	movk	w25, #0x51eb, lsl #16
   85fc4:	52800c81 	mov	w1, #0x64                  	// #100
   85fc8:	d2800400 	mov	x0, #0x20                  	// #32
   85fcc:	9bb97f59 	umull	x25, w26, w25
   85fd0:	d365ff39 	lsr	x25, x25, #37
   85fd4:	1b01eb39 	msub	w25, w25, w1, w26
   85fd8:	940007f2 	bl	87fa0 <operator new(unsigned long)>
   85fdc:	aa0003fa 	mov	x26, x0
   85fe0:	97fff958 	bl	84540 <CString::CString()>
   85fe4:	711ede9f 	cmp	w20, #0x7b7
   85fe8:	54000248 	b.hi	86030 <CTimer::GetTimeString()+0x180>  // b.pmore
   85fec:	2a1903e5 	mov	w5, w25
   85ff0:	2a1703e4 	mov	w4, w23
   85ff4:	2a1603e3 	mov	w3, w22
   85ff8:	2a1803e2 	mov	w2, w24
   85ffc:	90000041 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   86000:	aa1a03e0 	mov	x0, x26
   86004:	91166021 	add	x1, x1, #0x598
   86008:	97fffe0a 	bl	85830 <CString::Format(char const*, ...)>
   8600c:	f9400fb4 	ldr	x20, [x29, #24]
   86010:	a942dfb6 	ldp	x22, x23, [x29, #40]
   86014:	a943e7b8 	ldp	x24, x25, [x29, #56]
   86018:	aa1a03e0 	mov	x0, x26
   8601c:	f9400bf3 	ldr	x19, [sp, #16]
   86020:	f94013f5 	ldr	x21, [sp, #32]
   86024:	f94027fa 	ldr	x26, [sp, #72]
   86028:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8602c:	d65f03c0 	ret
   86030:	52955564 	mov	w4, #0xaaab                	// #43691
   86034:	72b55544 	movk	w4, #0xaaaa, lsl #16
   86038:	b0000040 	adrp	x0, 8f000 <vtable for CDevice+0x720>
   8603c:	910ea000 	add	x0, x0, #0x3a8
   86040:	9ba47f04 	umull	x4, w24, w4
   86044:	52800308 	mov	w8, #0x18                  	// #24
   86048:	2a1903e7 	mov	w7, w25
   8604c:	2a1703e6 	mov	w6, w23
   86050:	f8755802 	ldr	x2, [x0, w21, uxtw #3]
   86054:	2a1603e5 	mov	w5, w22
   86058:	d364fc84 	lsr	x4, x4, #36
   8605c:	11000663 	add	w3, w19, #0x1
   86060:	aa1a03e0 	mov	x0, x26
   86064:	f0000021 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   86068:	9115e021 	add	x1, x1, #0x578
   8606c:	1b08e084 	msub	w4, w4, w8, w24
   86070:	97fffdf0 	bl	85830 <CString::Format(char const*, ...)>
   86074:	f9400fb4 	ldr	x20, [x29, #24]
   86078:	aa1a03e0 	mov	x0, x26
   8607c:	f9400bf3 	ldr	x19, [sp, #16]
   86080:	a942dfb6 	ldp	x22, x23, [x29, #40]
   86084:	a943e7b8 	ldp	x24, x25, [x29, #56]
   86088:	f94013f5 	ldr	x21, [sp, #32]
   8608c:	f94027fa 	ldr	x26, [sp, #72]
   86090:	a8c57bfd 	ldp	x29, x30, [sp], #80
   86094:	d65f03c0 	ret
   86098:	9400057e 	bl	87690 <EnterCritical>
   8609c:	b9401675 	ldr	w21, [x19, #20]
   860a0:	b9401a60 	ldr	w0, [x19, #24]
   860a4:	b9400e7a 	ldr	w26, [x19, #12]
   860a8:	34fff180 	cbz	w0, 85ed8 <CTimer::GetTimeString()+0x28>
   860ac:	940005b1 	bl	87770 <LeaveCritical>
   860b0:	17ffff8a 	b	85ed8 <CTimer::GetTimeString()+0x28>
   860b4:	d280001a 	mov	x26, #0x0                   	// #0
   860b8:	17ffffd8 	b	86018 <CTimer::GetTimeString()+0x168>
   860bc:	528003a0 	mov	w0, #0x1d                  	// #29
   860c0:	17ffffbd 	b	85fb4 <CTimer::GetTimeString()+0x104>
   860c4:	d503201f 	nop
   860c8:	d503201f 	nop
   860cc:	d503201f 	nop

00000000000860d0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)>:
   860d0:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   860d4:	910003fd 	mov	x29, sp
   860d8:	f90023f9 	str	x25, [sp, #64]
   860dc:	aa0003f9 	mov	x25, x0
   860e0:	a90153f3 	stp	x19, x20, [sp, #16]
   860e4:	d2800500 	mov	x0, #0x28                  	// #40
   860e8:	a9025bf5 	stp	x21, x22, [sp, #32]
   860ec:	aa0203f3 	mov	x19, x2
   860f0:	2a0103f5 	mov	w21, w1
   860f4:	f9001bf7 	str	x23, [sp, #48]
   860f8:	aa0303f6 	mov	x22, x3
   860fc:	aa0403f4 	mov	x20, x4
   86100:	940007a8 	bl	87fa0 <operator new(unsigned long)>
   86104:	aa0003f7 	mov	x23, x0
   86108:	b9400f21 	ldr	w1, [x25, #12]
   8610c:	0b150035 	add	w21, w1, w21
   86110:	b4000933 	cbz	x19, 86234 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x164>
   86114:	b9402b20 	ldr	w0, [x25, #40]
   86118:	5289a861 	mov	w1, #0x4d43                	// #19779
   8611c:	72a96a81 	movk	w1, #0x4b54, lsl #16
   86120:	b90002e1 	str	w1, [x23]
   86124:	f90006f3 	str	x19, [x23, #8]
   86128:	b90012f5 	str	w21, [x23, #16]
   8612c:	a901d2f6 	stp	x22, x20, [x23, #24]
   86130:	350007e0 	cbnz	w0, 8622c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x15c>
   86134:	91008334 	add	x20, x25, #0x20
   86138:	aa1403e0 	mov	x0, x20
   8613c:	94001479 	bl	8b320 <CPtrList::GetFirst()>
   86140:	aa0003f3 	mov	x19, x0
   86144:	b40006a0 	cbz	x0, 86218 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x148>
   86148:	a904efba 	stp	x26, x27, [x29, #72]
   8614c:	f0000036 	adrp	x22, 8d000 <vtable for CGPIOPin+0x158>
   86150:	911382d6 	add	x22, x22, #0x4e0
   86154:	f000003a 	adrp	x26, 8d000 <vtable for CGPIOPin+0x158>
   86158:	9116c35a 	add	x26, x26, #0x5b0
   8615c:	f9001fb8 	str	x24, [x29, #56]
   86160:	5289a878 	mov	w24, #0x4d43                	// #19779
   86164:	72a96a98 	movk	w24, #0x4b54, lsl #16
   86168:	14000012 	b	861b0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0xe0>
   8616c:	b9400363 	ldr	w3, [x27]
   86170:	f0000020 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   86174:	52803162 	mov	w2, #0x18b                 	// #395
   86178:	aa1603e1 	mov	x1, x22
   8617c:	91170000 	add	x0, x0, #0x5c0
   86180:	6b18007f 	cmp	w3, w24
   86184:	54000040 	b.eq	8618c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0xbc>  // b.none
   86188:	9400092a 	bl	88630 <assertion_failed>
   8618c:	b9401362 	ldr	w2, [x27, #16]
   86190:	aa1303e1 	mov	x1, x19
   86194:	aa1403e0 	mov	x0, x20
   86198:	4b150042 	sub	w2, w2, w21
   8619c:	7100005f 	cmp	w2, #0x0
   861a0:	540001cc 	b.gt	861d8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x108>
   861a4:	94001463 	bl	8b330 <CPtrList::GetNext(TPtrListElement*)>
   861a8:	b4000340 	cbz	x0, 86210 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x140>
   861ac:	aa0003f3 	mov	x19, x0
   861b0:	aa1303e1 	mov	x1, x19
   861b4:	aa1403e0 	mov	x0, x20
   861b8:	9400147a 	bl	8b3a0 <CPtrList::GetPtr(TPtrListElement*)>
   861bc:	aa0003fb 	mov	x27, x0
   861c0:	b5fffd60 	cbnz	x0, 8616c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x9c>
   861c4:	52803142 	mov	w2, #0x18a                 	// #394
   861c8:	aa1603e1 	mov	x1, x22
   861cc:	aa1a03e0 	mov	x0, x26
   861d0:	94000918 	bl	88630 <assertion_failed>
   861d4:	17ffffe6 	b	8616c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x9c>
   861d8:	aa1703e2 	mov	x2, x23
   861dc:	9400148d 	bl	8b410 <CPtrList::InsertBefore(TPtrListElement*, void*)>
   861e0:	f9401fb8 	ldr	x24, [x29, #56]
   861e4:	a944efba 	ldp	x26, x27, [x29, #72]
   861e8:	b9402b20 	ldr	w0, [x25, #40]
   861ec:	34000040 	cbz	w0, 861f4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x124>
   861f0:	94000560 	bl	87770 <LeaveCritical>
   861f4:	aa1703e0 	mov	x0, x23
   861f8:	f9401bf7 	ldr	x23, [sp, #48]
   861fc:	a94153f3 	ldp	x19, x20, [sp, #16]
   86200:	a9425bf5 	ldp	x21, x22, [sp, #32]
   86204:	f94023f9 	ldr	x25, [sp, #64]
   86208:	a8c67bfd 	ldp	x29, x30, [sp], #96
   8620c:	d65f03c0 	ret
   86210:	f9401fb8 	ldr	x24, [x29, #56]
   86214:	a944efba 	ldp	x26, x27, [x29, #72]
   86218:	aa1703e2 	mov	x2, x23
   8621c:	aa1303e1 	mov	x1, x19
   86220:	aa1403e0 	mov	x0, x20
   86224:	940014c7 	bl	8b540 <CPtrList::InsertAfter(TPtrListElement*, void*)>
   86228:	17fffff0 	b	861e8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x118>
   8622c:	94000519 	bl	87690 <EnterCritical>
   86230:	17ffffc1 	b	86134 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x64>
   86234:	f0000021 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   86238:	90000040 	adrp	x0, 8e000 <font_data+0x5e0>
   8623c:	52802f42 	mov	w2, #0x17a                 	// #378
   86240:	91138021 	add	x1, x1, #0x4e0
   86244:	9135c000 	add	x0, x0, #0xd70
   86248:	940008fa 	bl	88630 <assertion_failed>
   8624c:	17ffffb2 	b	86114 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x44>

0000000000086250 <CTimer::CancelKernelTimer(unsigned long)>:
   86250:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   86254:	910003fd 	mov	x29, sp
   86258:	a90153f3 	stp	x19, x20, [sp, #16]
   8625c:	aa0003f4 	mov	x20, x0
   86260:	a9025bf5 	stp	x21, x22, [sp, #32]
   86264:	aa0103f3 	mov	x19, x1
   86268:	b4000501 	cbz	x1, 86308 <CTimer::CancelKernelTimer(unsigned long)+0xb8>
   8626c:	b9402a80 	ldr	w0, [x20, #40]
   86270:	35000480 	cbnz	w0, 86300 <CTimer::CancelKernelTimer(unsigned long)+0xb0>
   86274:	91008295 	add	x21, x20, #0x20
   86278:	aa1303e1 	mov	x1, x19
   8627c:	aa1503e0 	mov	x0, x21
   86280:	9400155c 	bl	8b7f0 <CPtrList::Find(void*)>
   86284:	aa0003f6 	mov	x22, x0
   86288:	b40001a0 	cbz	x0, 862bc <CTimer::CancelKernelTimer(unsigned long)+0x6c>
   8628c:	b9400261 	ldr	w1, [x19]
   86290:	5289a860 	mov	w0, #0x4d43                	// #19779
   86294:	72a96a80 	movk	w0, #0x4b54, lsl #16
   86298:	6b00003f 	cmp	w1, w0
   8629c:	540001c1 	b.ne	862d4 <CTimer::CancelKernelTimer(unsigned long)+0x84>  // b.any
   862a0:	aa1603e1 	mov	x1, x22
   862a4:	aa1503e0 	mov	x0, x21
   862a8:	940014f2 	bl	8b670 <CPtrList::Remove(TPtrListElement*)>
   862ac:	b900027f 	str	wzr, [x19]
   862b0:	d2800501 	mov	x1, #0x28                  	// #40
   862b4:	aa1303e0 	mov	x0, x19
   862b8:	9400074a 	bl	87fe0 <operator delete(void*, unsigned long)>
   862bc:	b9402a80 	ldr	w0, [x20, #40]
   862c0:	35000180 	cbnz	w0, 862f0 <CTimer::CancelKernelTimer(unsigned long)+0xa0>
   862c4:	a94153f3 	ldp	x19, x20, [sp, #16]
   862c8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   862cc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   862d0:	d65f03c0 	ret
   862d4:	f0000021 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   862d8:	f0000020 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   862dc:	528035c2 	mov	w2, #0x1ae                 	// #430
   862e0:	91138021 	add	x1, x1, #0x4e0
   862e4:	9114a000 	add	x0, x0, #0x528
   862e8:	940008d2 	bl	88630 <assertion_failed>
   862ec:	17ffffed 	b	862a0 <CTimer::CancelKernelTimer(unsigned long)+0x50>
   862f0:	a94153f3 	ldp	x19, x20, [sp, #16]
   862f4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   862f8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   862fc:	1400051d 	b	87770 <LeaveCritical>
   86300:	940004e4 	bl	87690 <EnterCritical>
   86304:	17ffffdc 	b	86274 <CTimer::CancelKernelTimer(unsigned long)+0x24>
   86308:	f0000021 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   8630c:	f0000020 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   86310:	528034e2 	mov	w2, #0x1a7                 	// #423
   86314:	91138021 	add	x1, x1, #0x4e0
   86318:	91146000 	add	x0, x0, #0x518
   8631c:	940008c5 	bl	88630 <assertion_failed>
   86320:	17ffffd3 	b	8626c <CTimer::CancelKernelTimer(unsigned long)+0x1c>
   86324:	d503201f 	nop
   86328:	d503201f 	nop
   8632c:	d503201f 	nop

0000000000086330 <CTimer::PollKernelTimers()>:
   86330:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   86334:	910003fd 	mov	x29, sp
   86338:	a901d7f4 	stp	x20, x21, [sp, #24]
   8633c:	aa0003f5 	mov	x21, x0
   86340:	b9402800 	ldr	w0, [x0, #40]
   86344:	f90017f6 	str	x22, [sp, #40]
   86348:	35000ac0 	cbnz	w0, 864a0 <CTimer::PollKernelTimers()+0x170>
   8634c:	910082b6 	add	x22, x21, #0x20
   86350:	aa1603e0 	mov	x0, x22
   86354:	940013f3 	bl	8b320 <CPtrList::GetFirst()>
   86358:	aa0003f4 	mov	x20, x0
   8635c:	b4000840 	cbz	x0, 86464 <CTimer::PollKernelTimers()+0x134>
   86360:	f9000bb3 	str	x19, [x29, #16]
   86364:	a90363b7 	stp	x23, x24, [x29, #48]
   86368:	f0000037 	adrp	x23, 8d000 <vtable for CGPIOPin+0x158>
   8636c:	911382f7 	add	x23, x23, #0x4e0
   86370:	a9046bb9 	stp	x25, x26, [x29, #64]
   86374:	5289a878 	mov	w24, #0x4d43                	// #19779
   86378:	72a96a98 	movk	w24, #0x4b54, lsl #16
   8637c:	f0000039 	adrp	x25, 8d000 <vtable for CGPIOPin+0x158>
   86380:	91146339 	add	x25, x25, #0x518
   86384:	1400000e 	b	863bc <CTimer::PollKernelTimers()+0x8c>
   86388:	f9400674 	ldr	x20, [x19, #8]
   8638c:	b4000554 	cbz	x20, 86434 <CTimer::PollKernelTimers()+0x104>
   86390:	a9418a61 	ldp	x1, x2, [x19, #24]
   86394:	aa1303e0 	mov	x0, x19
   86398:	d63f0280 	blr	x20
   8639c:	b900027f 	str	wzr, [x19]
   863a0:	aa1303e0 	mov	x0, x19
   863a4:	d2800501 	mov	x1, #0x28                  	// #40
   863a8:	9400070e 	bl	87fe0 <operator delete(void*, unsigned long)>
   863ac:	b9402aa0 	ldr	w0, [x21, #40]
   863b0:	350004e0 	cbnz	w0, 8644c <CTimer::PollKernelTimers()+0x11c>
   863b4:	aa1a03f4 	mov	x20, x26
   863b8:	b400051a 	cbz	x26, 86458 <CTimer::PollKernelTimers()+0x128>
   863bc:	aa1403e1 	mov	x1, x20
   863c0:	aa1603e0 	mov	x0, x22
   863c4:	940013f7 	bl	8b3a0 <CPtrList::GetPtr(TPtrListElement*)>
   863c8:	aa0003f3 	mov	x19, x0
   863cc:	b4000580 	cbz	x0, 8647c <CTimer::PollKernelTimers()+0x14c>
   863d0:	b9400260 	ldr	w0, [x19]
   863d4:	6b18001f 	cmp	w0, w24
   863d8:	540000c0 	b.eq	863f0 <CTimer::PollKernelTimers()+0xc0>  // b.none
   863dc:	f0000020 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   863e0:	52803882 	mov	w2, #0x1c4                 	// #452
   863e4:	aa1703e1 	mov	x1, x23
   863e8:	9114a000 	add	x0, x0, #0x528
   863ec:	94000891 	bl	88630 <assertion_failed>
   863f0:	b9400ea1 	ldr	w1, [x21, #12]
   863f4:	b9401260 	ldr	w0, [x19, #16]
   863f8:	4b010000 	sub	w0, w0, w1
   863fc:	7100001f 	cmp	w0, #0x0
   86400:	540002cc 	b.gt	86458 <CTimer::PollKernelTimers()+0x128>
   86404:	aa1403e1 	mov	x1, x20
   86408:	aa1603e0 	mov	x0, x22
   8640c:	940013c9 	bl	8b330 <CPtrList::GetNext(TPtrListElement*)>
   86410:	aa0003fa 	mov	x26, x0
   86414:	aa1403e1 	mov	x1, x20
   86418:	aa1603e0 	mov	x0, x22
   8641c:	94001495 	bl	8b670 <CPtrList::Remove(TPtrListElement*)>
   86420:	b9402aa0 	ldr	w0, [x21, #40]
   86424:	34fffb20 	cbz	w0, 86388 <CTimer::PollKernelTimers()+0x58>
   86428:	940004d2 	bl	87770 <LeaveCritical>
   8642c:	f9400674 	ldr	x20, [x19, #8]
   86430:	b5fffb14 	cbnz	x20, 86390 <CTimer::PollKernelTimers()+0x60>
   86434:	90000040 	adrp	x0, 8e000 <font_data+0x5e0>
   86438:	52803a42 	mov	w2, #0x1d2                 	// #466
   8643c:	aa1703e1 	mov	x1, x23
   86440:	9135c000 	add	x0, x0, #0xd70
   86444:	9400087b 	bl	88630 <assertion_failed>
   86448:	17ffffd2 	b	86390 <CTimer::PollKernelTimers()+0x60>
   8644c:	94000491 	bl	87690 <EnterCritical>
   86450:	aa1a03f4 	mov	x20, x26
   86454:	b5fffb5a 	cbnz	x26, 863bc <CTimer::PollKernelTimers()+0x8c>
   86458:	f9400bb3 	ldr	x19, [x29, #16]
   8645c:	a94363b7 	ldp	x23, x24, [x29, #48]
   86460:	a9446bb9 	ldp	x25, x26, [x29, #64]
   86464:	b9402aa0 	ldr	w0, [x21, #40]
   86468:	35000140 	cbnz	w0, 86490 <CTimer::PollKernelTimers()+0x160>
   8646c:	a941d7f4 	ldp	x20, x21, [sp, #24]
   86470:	f94017f6 	ldr	x22, [sp, #40]
   86474:	a8c57bfd 	ldp	x29, x30, [sp], #80
   86478:	d65f03c0 	ret
   8647c:	52803862 	mov	w2, #0x1c3                 	// #451
   86480:	aa1703e1 	mov	x1, x23
   86484:	aa1903e0 	mov	x0, x25
   86488:	9400086a 	bl	88630 <assertion_failed>
   8648c:	17ffffd1 	b	863d0 <CTimer::PollKernelTimers()+0xa0>
   86490:	a941d7f4 	ldp	x20, x21, [sp, #24]
   86494:	f94017f6 	ldr	x22, [sp, #40]
   86498:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8649c:	140004b5 	b	87770 <LeaveCritical>
   864a0:	9400047c 	bl	87690 <EnterCritical>
   864a4:	17ffffaa 	b	8634c <CTimer::PollKernelTimers()+0x1c>
   864a8:	d503201f 	nop
   864ac:	d503201f 	nop

00000000000864b0 <CTimer::InterruptHandler()>:
   864b0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   864b4:	910003fd 	mov	x29, sp
   864b8:	f9000bf3 	str	x19, [sp, #16]
   864bc:	aa0003f3 	mov	x19, x0
   864c0:	d53be241 	mrs	x1, cntp_cval_el0
   864c4:	b9400800 	ldr	w0, [x0, #8]
   864c8:	8b010000 	add	x0, x0, x1
   864cc:	d51be240 	msr	cntp_cval_el0, x0
   864d0:	b9401a60 	ldr	w0, [x19, #24]
   864d4:	35000240 	cbnz	w0, 8651c <CTimer::InterruptHandler()+0x6c>
   864d8:	b9400e61 	ldr	w1, [x19, #12]
   864dc:	5290a3e0 	mov	w0, #0x851f                	// #34079
   864e0:	72aa3d60 	movk	w0, #0x51eb, lsl #16
   864e4:	11000421 	add	w1, w1, #0x1
   864e8:	52800c82 	mov	w2, #0x64                  	// #100
   864ec:	b9000e61 	str	w1, [x19, #12]
   864f0:	9ba07c20 	umull	x0, w1, w0
   864f4:	d365fc00 	lsr	x0, x0, #37
   864f8:	1b028400 	msub	w0, w0, w2, w1
   864fc:	34000280 	cbz	w0, 8654c <CTimer::InterruptHandler()+0x9c>
   86500:	aa1303e0 	mov	x0, x19
   86504:	97ffff8b 	bl	86330 <CTimer::PollKernelTimers()>
   86508:	f9401e60 	ldr	x0, [x19, #56]
   8650c:	b4000320 	cbz	x0, 86570 <CTimer::InterruptHandler()+0xc0>
   86510:	f9400bf3 	ldr	x19, [sp, #16]
   86514:	a8c27bfd 	ldp	x29, x30, [sp], #32
   86518:	d61f0000 	br	x0
   8651c:	9400045d 	bl	87690 <EnterCritical>
   86520:	b9400e62 	ldr	w2, [x19, #12]
   86524:	5290a3e1 	mov	w1, #0x851f                	// #34079
   86528:	72aa3d61 	movk	w1, #0x51eb, lsl #16
   8652c:	11000442 	add	w2, w2, #0x1
   86530:	52800c83 	mov	w3, #0x64                  	// #100
   86534:	b9000e62 	str	w2, [x19, #12]
   86538:	b9401a60 	ldr	w0, [x19, #24]
   8653c:	9ba17c41 	umull	x1, w2, w1
   86540:	d365fc21 	lsr	x1, x1, #37
   86544:	1b038821 	msub	w1, w1, w3, w2
   86548:	350000e1 	cbnz	w1, 86564 <CTimer::InterruptHandler()+0xb4>
   8654c:	b9401261 	ldr	w1, [x19, #16]
   86550:	11000421 	add	w1, w1, #0x1
   86554:	b9001261 	str	w1, [x19, #16]
   86558:	b9401661 	ldr	w1, [x19, #20]
   8655c:	11000421 	add	w1, w1, #0x1
   86560:	b9001661 	str	w1, [x19, #20]
   86564:	34fffce0 	cbz	w0, 86500 <CTimer::InterruptHandler()+0x50>
   86568:	94000482 	bl	87770 <LeaveCritical>
   8656c:	17ffffe5 	b	86500 <CTimer::InterruptHandler()+0x50>
   86570:	f9400bf3 	ldr	x19, [sp, #16]
   86574:	a8c27bfd 	ldp	x29, x30, [sp], #32
   86578:	d65f03c0 	ret
   8657c:	d503201f 	nop

0000000000086580 <CTimer::InterruptHandler(void*)>:
   86580:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   86584:	910003fd 	mov	x29, sp
   86588:	f9000bf3 	str	x19, [sp, #16]
   8658c:	aa0003f3 	mov	x19, x0
   86590:	b40000a0 	cbz	x0, 865a4 <CTimer::InterruptHandler(void*)+0x24>
   86594:	aa1303e0 	mov	x0, x19
   86598:	f9400bf3 	ldr	x19, [sp, #16]
   8659c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   865a0:	17ffffc4 	b	864b0 <CTimer::InterruptHandler()>
   865a4:	52804342 	mov	w2, #0x21a                 	// #538
   865a8:	f0000021 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   865ac:	f0000020 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   865b0:	91138021 	add	x1, x1, #0x4e0
   865b4:	9117a000 	add	x0, x0, #0x5e8
   865b8:	9400081e 	bl	88630 <assertion_failed>
   865bc:	aa1303e0 	mov	x0, x19
   865c0:	f9400bf3 	ldr	x19, [sp, #16]
   865c4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   865c8:	17ffffba 	b	864b0 <CTimer::InterruptHandler()>
   865cc:	d503201f 	nop

00000000000865d0 <CTimer::TuneMsDelay()>:
   865d0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   865d4:	910003fd 	mov	x29, sp
   865d8:	a90153f3 	stp	x19, x20, [sp, #16]
   865dc:	aa0003f4 	mov	x20, x0
   865e0:	52807d00 	mov	w0, #0x3e8                 	// #1000
   865e4:	a9025bf5 	stp	x21, x22, [sp, #32]
   865e8:	5284e215 	mov	w21, #0x2710                	// #10000
   865ec:	5290a3f3 	mov	w19, #0x851f                	// #34079
   865f0:	72aa3d73 	movk	w19, #0x51eb, lsl #16
   865f4:	b9402e81 	ldr	w1, [x20, #44]
   865f8:	b9400e96 	ldr	w22, [x20, #12]
   865fc:	1b007c20 	mul	w0, w1, w0
   86600:	94000a80 	bl	89000 <DelayLoop>
   86604:	b9400e85 	ldr	w5, [x20, #12]
   86608:	5289ba61 	mov	w1, #0x4dd3                	// #19923
   8660c:	72a20c41 	movk	w1, #0x1062, lsl #16
   86610:	4b1600a5 	sub	w5, w5, w22
   86614:	b9402e80 	ldr	w0, [x20, #44]
   86618:	1ac50ab5 	udiv	w21, w21, w5
   8661c:	1b007ea0 	mul	w0, w21, w0
   86620:	9bb37c00 	umull	x0, w0, w19
   86624:	9bb37eb3 	umull	x19, w21, w19
   86628:	d365fc00 	lsr	x0, x0, #37
   8662c:	b9002e80 	str	w0, [x20, #44]
   86630:	1107d000 	add	w0, w0, #0x1f4
   86634:	d365fe73 	lsr	x19, x19, #37
   86638:	9ba17c00 	umull	x0, w0, w1
   8663c:	d366fc00 	lsr	x0, x0, #38
   86640:	b9003280 	str	w0, [x20, #48]
   86644:	94001207 	bl	8ae60 <CLogger::Get()>
   86648:	52800c85 	mov	w5, #0x64                  	// #100
   8664c:	2a1303e4 	mov	w4, w19
   86650:	f0000021 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   86654:	9112a021 	add	x1, x1, #0x4a8
   86658:	1b05d665 	msub	w5, w19, w5, w21
   8665c:	f0000023 	adrp	x3, 8d000 <vtable for CGPIOPin+0x158>
   86660:	a94153f3 	ldp	x19, x20, [sp, #16]
   86664:	9117e063 	add	x3, x3, #0x5f8
   86668:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8666c:	52800062 	mov	w2, #0x3                   	// #3
   86670:	a8c37bfd 	ldp	x29, x30, [sp], #48
   86674:	9100c021 	add	x1, x1, #0x30
   86678:	1400111a 	b	8aae0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8667c:	d503201f 	nop

0000000000086680 <CTimer::Initialize()>:
   86680:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   86684:	910003fd 	mov	x29, sp
   86688:	a90153f3 	stp	x19, x20, [sp, #16]
   8668c:	aa0003f4 	mov	x20, x0
   86690:	f9400000 	ldr	x0, [x0]
   86694:	b4000520 	cbz	x0, 86738 <CTimer::Initialize()+0xb8>
   86698:	aa1403e3 	mov	x3, x20
   8669c:	52800921 	mov	w1, #0x49                  	// #73
   866a0:	90000002 	adrp	x2, 86000 <CTimer::GetTimeString()+0x150>
   866a4:	91160042 	add	x2, x2, #0x580
   866a8:	94000fa2 	bl	8a530 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   866ac:	d53be001 	mrs	x1, cntfrq_el0
   866b0:	d29eb860 	mov	x0, #0xf5c3                	// #62915
   866b4:	f2ab8500 	movk	x0, #0x5c28, lsl #16
   866b8:	d342fc33 	lsr	x19, x1, #2
   866bc:	f2d851e0 	movk	x0, #0xc28f, lsl #32
   866c0:	f2e51ea0 	movk	x0, #0x28f5, lsl #48
   866c4:	d2800c82 	mov	x2, #0x64                  	// #100
   866c8:	9bc07e60 	umulh	x0, x19, x0
   866cc:	d342fc00 	lsr	x0, x0, #2
   866d0:	9b028400 	msub	x0, x0, x2, x1
   866d4:	b40000e0 	cbz	x0, 866f0 <CTimer::Initialize()+0x70>
   866d8:	f0000021 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   866dc:	f0000020 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   866e0:	52800f22 	mov	w2, #0x79                  	// #121
   866e4:	91138021 	add	x1, x1, #0x4e0
   866e8:	91184000 	add	x0, x0, #0x610
   866ec:	940007d1 	bl	88630 <assertion_failed>
   866f0:	d29eb860 	mov	x0, #0xf5c3                	// #62915
   866f4:	f2ab8500 	movk	x0, #0x5c28, lsl #16
   866f8:	f2d851e0 	movk	x0, #0xc28f, lsl #32
   866fc:	f2e51ea0 	movk	x0, #0x28f5, lsl #48
   86700:	9bc07e73 	umulh	x19, x19, x0
   86704:	d342fe73 	lsr	x19, x19, #2
   86708:	b9000a93 	str	w19, [x20, #8]
   8670c:	d53be020 	mrs	x0, cntpct_el0
   86710:	8b334013 	add	x19, x0, w19, uxtw
   86714:	d51be253 	msr	cntp_cval_el0, x19
   86718:	52800033 	mov	w19, #0x1                   	// #1
   8671c:	d51be233 	msr	cntp_ctl_el0, x19
   86720:	aa1403e0 	mov	x0, x20
   86724:	97ffffab 	bl	865d0 <CTimer::TuneMsDelay()>
   86728:	2a1303e0 	mov	w0, w19
   8672c:	a94153f3 	ldp	x19, x20, [sp, #16]
   86730:	a8c27bfd 	ldp	x29, x30, [sp], #32
   86734:	d65f03c0 	ret
   86738:	f0000021 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   8673c:	f0000020 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   86740:	52800c22 	mov	w2, #0x61                  	// #97
   86744:	91140000 	add	x0, x0, #0x500
   86748:	91138021 	add	x1, x1, #0x4e0
   8674c:	940007b9 	bl	88630 <assertion_failed>
   86750:	f9400280 	ldr	x0, [x20]
   86754:	17ffffd1 	b	86698 <CTimer::Initialize()+0x18>
   86758:	d503201f 	nop
   8675c:	d503201f 	nop

0000000000086760 <CTimer::RegisterPeriodicHandler(void (*)())>:
   86760:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   86764:	910003fd 	mov	x29, sp
   86768:	a90153f3 	stp	x19, x20, [sp, #16]
   8676c:	aa0003f4 	mov	x20, x0
   86770:	f9401c00 	ldr	x0, [x0, #56]
   86774:	aa0103f3 	mov	x19, x1
   86778:	b40000e0 	cbz	x0, 86794 <CTimer::RegisterPeriodicHandler(void (*)())+0x34>
   8677c:	f0000021 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   86780:	f0000020 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   86784:	52804602 	mov	w2, #0x230                 	// #560
   86788:	91138021 	add	x1, x1, #0x4e0
   8678c:	9118a000 	add	x0, x0, #0x628
   86790:	940007a8 	bl	88630 <assertion_failed>
   86794:	f9001e93 	str	x19, [x20, #56]
   86798:	b4000093 	cbz	x19, 867a8 <CTimer::RegisterPeriodicHandler(void (*)())+0x48>
   8679c:	a94153f3 	ldp	x19, x20, [sp, #16]
   867a0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   867a4:	d65f03c0 	ret
   867a8:	a94153f3 	ldp	x19, x20, [sp, #16]
   867ac:	f0000021 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   867b0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   867b4:	f0000020 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   867b8:	52804642 	mov	w2, #0x232                 	// #562
   867bc:	91138021 	add	x1, x1, #0x4e0
   867c0:	91190000 	add	x0, x0, #0x640
   867c4:	1400079b 	b	88630 <assertion_failed>
   867c8:	d503201f 	nop
   867cc:	d503201f 	nop

00000000000867d0 <CTimer::SimpleMsDelay(unsigned int)>:
   867d0:	34000080 	cbz	w0, 867e0 <CTimer::SimpleMsDelay(unsigned int)+0x10>
   867d4:	52807d01 	mov	w1, #0x3e8                 	// #1000
   867d8:	1b017c00 	mul	w0, w0, w1
   867dc:	35000040 	cbnz	w0, 867e4 <CTimer::SimpleMsDelay(unsigned int)+0x14>
   867e0:	d65f03c0 	ret
   867e4:	17fffc7f 	b	859e0 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>
   867e8:	d503201f 	nop
   867ec:	d503201f 	nop

00000000000867f0 <CTimer::SimpleusDelay(unsigned int)>:
   867f0:	34000040 	cbz	w0, 867f8 <CTimer::SimpleusDelay(unsigned int)+0x8>
   867f4:	17fffc7b 	b	859e0 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>
   867f8:	d65f03c0 	ret
   867fc:	d503201f 	nop

0000000000086800 <CTimer::IsLeapYear(unsigned int)>:
   86800:	5290a3e1 	mov	w1, #0x851f                	// #34079
   86804:	72aa3d61 	movk	w1, #0x51eb, lsl #16
   86808:	52800c83 	mov	w3, #0x64                  	// #100
   8680c:	9ba17c01 	umull	x1, w0, w1
   86810:	d360fc21 	lsr	x1, x1, #32
   86814:	53057c22 	lsr	w2, w1, #5
   86818:	1b038042 	msub	w2, w2, w3, w0
   8681c:	34000082 	cbz	w2, 8682c <CTimer::IsLeapYear(unsigned int)+0x2c>
   86820:	f240041f 	tst	x0, #0x3
   86824:	1a9f17e0 	cset	w0, eq  // eq = none
   86828:	d65f03c0 	ret
   8682c:	53077c21 	lsr	w1, w1, #7
   86830:	52803202 	mov	w2, #0x190                 	// #400
   86834:	1b028020 	msub	w0, w1, w2, w0
   86838:	7100001f 	cmp	w0, #0x0
   8683c:	1a9f17e0 	cset	w0, eq  // eq = none
   86840:	d65f03c0 	ret
   86844:	d503201f 	nop
   86848:	d503201f 	nop
   8684c:	d503201f 	nop

0000000000086850 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
   86850:	7100041f 	cmp	w0, #0x1
   86854:	540000c0 	b.eq	8686c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x1c>  // b.none
   86858:	f0000021 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   8685c:	9112a021 	add	x1, x1, #0x4a8
   86860:	b8605821 	ldr	w1, [x1, w0, uxtw #2]
   86864:	2a0103e0 	mov	w0, w1
   86868:	d65f03c0 	ret
   8686c:	5290a3e2 	mov	w2, #0x851f                	// #34079
   86870:	72aa3d62 	movk	w2, #0x51eb, lsl #16
   86874:	52800c84 	mov	w4, #0x64                  	// #100
   86878:	9ba27c22 	umull	x2, w1, w2
   8687c:	d360fc42 	lsr	x2, x2, #32
   86880:	53057c43 	lsr	w3, w2, #5
   86884:	1b048463 	msub	w3, w3, w4, w1
   86888:	340000e3 	cbz	w3, 868a4 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x54>
   8688c:	f240043f 	tst	x1, #0x3
   86890:	1a9f17e2 	cset	w2, eq  // eq = none
   86894:	528003a1 	mov	w1, #0x1d                  	// #29
   86898:	34fffe02 	cbz	w2, 86858 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x8>
   8689c:	2a0103e0 	mov	w0, w1
   868a0:	d65f03c0 	ret
   868a4:	53077c42 	lsr	w2, w2, #7
   868a8:	52803203 	mov	w3, #0x190                 	// #400
   868ac:	1b038441 	msub	w1, w2, w3, w1
   868b0:	7100003f 	cmp	w1, #0x0
   868b4:	1a9f17e2 	cset	w2, eq  // eq = none
   868b8:	17fffff7 	b	86894 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x44>
   868bc:	d503201f 	nop

00000000000868c0 <CTimer::Get()>:
   868c0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   868c4:	910003fd 	mov	x29, sp
   868c8:	f9000bf3 	str	x19, [sp, #16]
   868cc:	b0000053 	adrp	x19, 8f000 <vtable for CDevice+0x720>
   868d0:	f942b260 	ldr	x0, [x19, #1376]
   868d4:	b4000080 	cbz	x0, 868e4 <CTimer::Get()+0x24>
   868d8:	f9400bf3 	ldr	x19, [sp, #16]
   868dc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   868e0:	d65f03c0 	ret
   868e4:	52804dc2 	mov	w2, #0x26e                 	// #622
   868e8:	f0000021 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   868ec:	f0000020 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   868f0:	91138021 	add	x1, x1, #0x4e0
   868f4:	91196000 	add	x0, x0, #0x658
   868f8:	9400074e 	bl	88630 <assertion_failed>
   868fc:	f942b260 	ldr	x0, [x19, #1376]
   86900:	f9400bf3 	ldr	x19, [sp, #16]
   86904:	a8c27bfd 	ldp	x29, x30, [sp], #32
   86908:	d65f03c0 	ret
   8690c:	00000000 	.inst	0x00000000 ; undefined

0000000000086910 <memset>:
   86910:	f240041f 	tst	x0, #0x3
   86914:	fa4f0840 	ccmp	x2, #0xf, #0x0, eq  // eq = none
   86918:	54000148 	b.hi	86940 <memset+0x30>  // b.pmore
   8691c:	aa0003e3 	mov	x3, x0
   86920:	b40000e2 	cbz	x2, 8693c <memset+0x2c>
   86924:	13001c21 	sxtb	w1, w1
   86928:	8b020062 	add	x2, x3, x2
   8692c:	d503201f 	nop
   86930:	38001461 	strb	w1, [x3], #1
   86934:	eb02007f 	cmp	x3, x2
   86938:	54ffffc1 	b.ne	86930 <memset+0x20>  // b.any
   8693c:	d65f03c0 	ret
   86940:	d1004043 	sub	x3, x2, #0x10
   86944:	2a012025 	orr	w5, w1, w1, lsl #8
   86948:	927cec63 	and	x3, x3, #0xfffffffffffffff0
   8694c:	aa0003e4 	mov	x4, x0
   86950:	91004063 	add	x3, x3, #0x10
   86954:	2a0540a5 	orr	w5, w5, w5, lsl #16
   86958:	8b030003 	add	x3, x0, x3
   8695c:	d503201f 	nop
   86960:	29001485 	stp	w5, w5, [x4]
   86964:	91004084 	add	x4, x4, #0x10
   86968:	b81f8085 	stur	w5, [x4, #-8]
   8696c:	eb04007f 	cmp	x3, x4
   86970:	b81fc085 	stur	w5, [x4, #-4]
   86974:	54ffff61 	b.ne	86960 <memset+0x50>  // b.any
   86978:	92400c42 	and	x2, x2, #0xf
   8697c:	17ffffe9 	b	86920 <memset+0x10>

0000000000086980 <memmove>:
   86980:	eb01001f 	cmp	x0, x1
   86984:	540001a9 	b.ls	869b8 <memmove+0x38>  // b.plast
   86988:	8b020023 	add	x3, x1, x2
   8698c:	eb03001f 	cmp	x0, x3
   86990:	54000142 	b.cs	869b8 <memmove+0x38>  // b.hs, b.nlast
   86994:	d1000443 	sub	x3, x2, #0x1
   86998:	b40000e2 	cbz	x2, 869b4 <memmove+0x34>
   8699c:	d503201f 	nop
   869a0:	38e36822 	ldrsb	w2, [x1, x3]
   869a4:	38236802 	strb	w2, [x0, x3]
   869a8:	d1000463 	sub	x3, x3, #0x1
   869ac:	b100047f 	cmn	x3, #0x1
   869b0:	54ffff81 	b.ne	869a0 <memmove+0x20>  // b.any
   869b4:	d65f03c0 	ret
   869b8:	14000168 	b	86f58 <memcpy>
   869bc:	d503201f 	nop

00000000000869c0 <memcmp>:
   869c0:	b4000202 	cbz	x2, 86a00 <memcmp+0x40>
   869c4:	39400004 	ldrb	w4, [x0]
   869c8:	39400023 	ldrb	w3, [x1]
   869cc:	6b03009f 	cmp	w4, w3
   869d0:	540001c8 	b.hi	86a08 <memcmp+0x48>  // b.pmore
   869d4:	540001e3 	b.cc	86a10 <memcmp+0x50>  // b.lo, b.ul, b.last
   869d8:	d2800023 	mov	x3, #0x1                   	// #1
   869dc:	14000007 	b	869f8 <memcmp+0x38>
   869e0:	38636805 	ldrb	w5, [x0, x3]
   869e4:	38636824 	ldrb	w4, [x1, x3]
   869e8:	91000463 	add	x3, x3, #0x1
   869ec:	6b0400bf 	cmp	w5, w4
   869f0:	540000c8 	b.hi	86a08 <memcmp+0x48>  // b.pmore
   869f4:	540000e3 	b.cc	86a10 <memcmp+0x50>  // b.lo, b.ul, b.last
   869f8:	eb02007f 	cmp	x3, x2
   869fc:	54ffff21 	b.ne	869e0 <memcmp+0x20>  // b.any
   86a00:	52800000 	mov	w0, #0x0                   	// #0
   86a04:	d65f03c0 	ret
   86a08:	52800020 	mov	w0, #0x1                   	// #1
   86a0c:	d65f03c0 	ret
   86a10:	12800000 	mov	w0, #0xffffffff            	// #-1
   86a14:	d65f03c0 	ret
   86a18:	d503201f 	nop
   86a1c:	d503201f 	nop

0000000000086a20 <strlen>:
   86a20:	aa0003e2 	mov	x2, x0
   86a24:	39c00000 	ldrsb	w0, [x0]
   86a28:	340000c0 	cbz	w0, 86a40 <strlen+0x20>
   86a2c:	d2800000 	mov	x0, #0x0                   	// #0
   86a30:	91000400 	add	x0, x0, #0x1
   86a34:	38e06841 	ldrsb	w1, [x2, x0]
   86a38:	35ffffc1 	cbnz	w1, 86a30 <strlen+0x10>
   86a3c:	d65f03c0 	ret
   86a40:	d2800000 	mov	x0, #0x0                   	// #0
   86a44:	d65f03c0 	ret
   86a48:	d503201f 	nop
   86a4c:	d503201f 	nop

0000000000086a50 <strcmp>:
   86a50:	39c00003 	ldrsb	w3, [x0]
   86a54:	39c00024 	ldrsb	w4, [x1]
   86a58:	340001e3 	cbz	w3, 86a94 <strcmp+0x44>
   86a5c:	340001c4 	cbz	w4, 86a94 <strcmp+0x44>
   86a60:	6b03009f 	cmp	w4, w3
   86a64:	5400022b 	b.lt	86aa8 <strcmp+0x58>  // b.tstop
   86a68:	5400024c 	b.gt	86ab0 <strcmp+0x60>
   86a6c:	d2800022 	mov	x2, #0x1                   	// #1
   86a70:	14000004 	b	86a80 <strcmp+0x30>
   86a74:	34000104 	cbz	w4, 86a94 <strcmp+0x44>
   86a78:	5400018c 	b.gt	86aa8 <strcmp+0x58>
   86a7c:	540001ab 	b.lt	86ab0 <strcmp+0x60>  // b.tstop
   86a80:	38e26803 	ldrsb	w3, [x0, x2]
   86a84:	38e26824 	ldrsb	w4, [x1, x2]
   86a88:	91000442 	add	x2, x2, #0x1
   86a8c:	6b04007f 	cmp	w3, w4
   86a90:	35ffff23 	cbnz	w3, 86a74 <strcmp+0x24>
   86a94:	6b04007f 	cmp	w3, w4
   86a98:	52800021 	mov	w1, #0x1                   	// #1
   86a9c:	5a9fa3e0 	csetm	w0, lt  // lt = tstop
   86aa0:	1a81d000 	csel	w0, w0, w1, le
   86aa4:	d65f03c0 	ret
   86aa8:	52800020 	mov	w0, #0x1                   	// #1
   86aac:	d65f03c0 	ret
   86ab0:	12800000 	mov	w0, #0xffffffff            	// #-1
   86ab4:	d65f03c0 	ret
   86ab8:	d503201f 	nop
   86abc:	d503201f 	nop

0000000000086ac0 <strcasecmp>:
   86ac0:	d2800005 	mov	x5, #0x0                   	// #0
   86ac4:	14000006 	b	86adc <strcasecmp+0x1c>
   86ac8:	1a843063 	csel	w3, w3, w4, cc  // cc = lo, ul, last
   86acc:	340001e3 	cbz	w3, 86b08 <strcasecmp+0x48>
   86ad0:	6b03005f 	cmp	w2, w3
   86ad4:	540002ac 	b.gt	86b28 <strcasecmp+0x68>
   86ad8:	540002cb 	b.lt	86b30 <strcasecmp+0x70>  // b.tstop
   86adc:	38e56802 	ldrsb	w2, [x0, x5]
   86ae0:	38e56824 	ldrsb	w4, [x1, x5]
   86ae4:	910004a5 	add	x5, x5, #0x1
   86ae8:	51018443 	sub	w3, w2, #0x61
   86aec:	51008046 	sub	w6, w2, #0x20
   86af0:	7100687f 	cmp	w3, #0x1a
   86af4:	51008083 	sub	w3, w4, #0x20
   86af8:	1a8230c2 	csel	w2, w6, w2, cc  // cc = lo, ul, last
   86afc:	51018486 	sub	w6, w4, #0x61
   86b00:	710068df 	cmp	w6, #0x1a
   86b04:	35fffe22 	cbnz	w2, 86ac8 <strcasecmp+0x8>
   86b08:	710068df 	cmp	w6, #0x1a
   86b0c:	51008080 	sub	w0, w4, #0x20
   86b10:	1a843004 	csel	w4, w0, w4, cc  // cc = lo, ul, last
   86b14:	52800021 	mov	w1, #0x1                   	// #1
   86b18:	6b02009f 	cmp	w4, w2
   86b1c:	5a9fd3e0 	csetm	w0, gt
   86b20:	1a81a000 	csel	w0, w0, w1, ge  // ge = tcont
   86b24:	d65f03c0 	ret
   86b28:	52800020 	mov	w0, #0x1                   	// #1
   86b2c:	d65f03c0 	ret
   86b30:	12800000 	mov	w0, #0xffffffff            	// #-1
   86b34:	d65f03c0 	ret
   86b38:	d503201f 	nop
   86b3c:	d503201f 	nop

0000000000086b40 <strncmp>:
   86b40:	b40002c2 	cbz	x2, 86b98 <strncmp+0x58>
   86b44:	39c00004 	ldrsb	w4, [x0]
   86b48:	39c00023 	ldrsb	w3, [x1]
   86b4c:	340002c4 	cbz	w4, 86ba4 <strncmp+0x64>
   86b50:	340002a3 	cbz	w3, 86ba4 <strncmp+0x64>
   86b54:	6b03009f 	cmp	w4, w3
   86b58:	5400030c 	b.gt	86bb8 <strncmp+0x78>
   86b5c:	5400032b 	b.lt	86bc0 <strncmp+0x80>  // b.tstop
   86b60:	8b020022 	add	x2, x1, x2
   86b64:	14000009 	b	86b88 <strncmp+0x48>
   86b68:	39c00004 	ldrsb	w4, [x0]
   86b6c:	340001a4 	cbz	w4, 86ba0 <strncmp+0x60>
   86b70:	aa0303e1 	mov	x1, x3
   86b74:	39c00063 	ldrsb	w3, [x3]
   86b78:	6b03009f 	cmp	w4, w3
   86b7c:	34000143 	cbz	w3, 86ba4 <strncmp+0x64>
   86b80:	540001cc 	b.gt	86bb8 <strncmp+0x78>
   86b84:	540001eb 	b.lt	86bc0 <strncmp+0x80>  // b.tstop
   86b88:	91000423 	add	x3, x1, #0x1
   86b8c:	91000400 	add	x0, x0, #0x1
   86b90:	eb03005f 	cmp	x2, x3
   86b94:	54fffea1 	b.ne	86b68 <strncmp+0x28>  // b.any
   86b98:	52800000 	mov	w0, #0x0                   	// #0
   86b9c:	d65f03c0 	ret
   86ba0:	39c00423 	ldrsb	w3, [x1, #1]
   86ba4:	6b03009f 	cmp	w4, w3
   86ba8:	52800021 	mov	w1, #0x1                   	// #1
   86bac:	5a9fa3e0 	csetm	w0, lt  // lt = tstop
   86bb0:	1a81d000 	csel	w0, w0, w1, le
   86bb4:	d65f03c0 	ret
   86bb8:	52800020 	mov	w0, #0x1                   	// #1
   86bbc:	d65f03c0 	ret
   86bc0:	12800000 	mov	w0, #0xffffffff            	// #-1
   86bc4:	d65f03c0 	ret
   86bc8:	d503201f 	nop
   86bcc:	d503201f 	nop

0000000000086bd0 <strcpy>:
   86bd0:	39c00022 	ldrsb	w2, [x1]
   86bd4:	aa0003e3 	mov	x3, x0
   86bd8:	340000a2 	cbz	w2, 86bec <strcpy+0x1c>
   86bdc:	d503201f 	nop
   86be0:	38001462 	strb	w2, [x3], #1
   86be4:	38c01c22 	ldrsb	w2, [x1, #1]!
   86be8:	35ffffc2 	cbnz	w2, 86be0 <strcpy+0x10>
   86bec:	3900007f 	strb	wzr, [x3]
   86bf0:	d65f03c0 	ret
   86bf4:	d503201f 	nop
   86bf8:	d503201f 	nop
   86bfc:	d503201f 	nop

0000000000086c00 <strncpy>:
   86c00:	b4000182 	cbz	x2, 86c30 <strncpy+0x30>
   86c04:	39c00024 	ldrsb	w4, [x1]
   86c08:	34000164 	cbz	w4, 86c34 <strncpy+0x34>
   86c0c:	8b020002 	add	x2, x0, x2
   86c10:	aa0003e3 	mov	x3, x0
   86c14:	14000003 	b	86c20 <strncpy+0x20>
   86c18:	39c00024 	ldrsb	w4, [x1]
   86c1c:	340000e4 	cbz	w4, 86c38 <strncpy+0x38>
   86c20:	38001464 	strb	w4, [x3], #1
   86c24:	91000421 	add	x1, x1, #0x1
   86c28:	eb03005f 	cmp	x2, x3
   86c2c:	54ffff61 	b.ne	86c18 <strncpy+0x18>  // b.any
   86c30:	d65f03c0 	ret
   86c34:	aa0003e3 	mov	x3, x0
   86c38:	3900007f 	strb	wzr, [x3]
   86c3c:	d65f03c0 	ret

0000000000086c40 <strcat>:
   86c40:	39c00003 	ldrsb	w3, [x0]
   86c44:	aa0003e2 	mov	x2, x0
   86c48:	34000083 	cbz	w3, 86c58 <strcat+0x18>
   86c4c:	d503201f 	nop
   86c50:	38c01c43 	ldrsb	w3, [x2, #1]!
   86c54:	35ffffe3 	cbnz	w3, 86c50 <strcat+0x10>
   86c58:	39c00023 	ldrsb	w3, [x1]
   86c5c:	34000083 	cbz	w3, 86c6c <strcat+0x2c>
   86c60:	38001443 	strb	w3, [x2], #1
   86c64:	38c01c23 	ldrsb	w3, [x1, #1]!
   86c68:	35ffffc3 	cbnz	w3, 86c60 <strcat+0x20>
   86c6c:	3900005f 	strb	wzr, [x2]
   86c70:	d65f03c0 	ret
   86c74:	d503201f 	nop
   86c78:	d503201f 	nop
   86c7c:	d503201f 	nop

0000000000086c80 <strchr>:
   86c80:	39c00002 	ldrsb	w2, [x0]
   86c84:	34000102 	cbz	w2, 86ca4 <strchr+0x24>
   86c88:	6b02003f 	cmp	w1, w2
   86c8c:	54000061 	b.ne	86c98 <strchr+0x18>  // b.any
   86c90:	14000006 	b	86ca8 <strchr+0x28>
   86c94:	540000a0 	b.eq	86ca8 <strchr+0x28>  // b.none
   86c98:	38c01c02 	ldrsb	w2, [x0, #1]!
   86c9c:	6b01005f 	cmp	w2, w1
   86ca0:	35ffffa2 	cbnz	w2, 86c94 <strchr+0x14>
   86ca4:	d2800000 	mov	x0, #0x0                   	// #0
   86ca8:	d65f03c0 	ret
   86cac:	d503201f 	nop

0000000000086cb0 <strstr>:
   86cb0:	39c00002 	ldrsb	w2, [x0]
   86cb4:	39c00025 	ldrsb	w5, [x1]
   86cb8:	350000c2 	cbnz	w2, 86cd0 <strstr+0x20>
   86cbc:	710000bf 	cmp	w5, #0x0
   86cc0:	9a9f0000 	csel	x0, x0, xzr, eq  // eq = none
   86cc4:	d65f03c0 	ret
   86cc8:	38c01c02 	ldrsb	w2, [x0, #1]!
   86ccc:	340001c2 	cbz	w2, 86d04 <strstr+0x54>
   86cd0:	34ffffa5 	cbz	w5, 86cc4 <strstr+0x14>
   86cd4:	39c00002 	ldrsb	w2, [x0]
   86cd8:	6b05005f 	cmp	w2, w5
   86cdc:	54ffff61 	b.ne	86cc8 <strstr+0x18>  // b.any
   86ce0:	d2800002 	mov	x2, #0x0                   	// #0
   86ce4:	14000004 	b	86cf4 <strstr+0x44>
   86ce8:	38e26804 	ldrsb	w4, [x0, x2]
   86cec:	6b03009f 	cmp	w4, w3
   86cf0:	54fffec1 	b.ne	86cc8 <strstr+0x18>  // b.any
   86cf4:	91000442 	add	x2, x2, #0x1
   86cf8:	38e26823 	ldrsb	w3, [x1, x2]
   86cfc:	35ffff63 	cbnz	w3, 86ce8 <strstr+0x38>
   86d00:	d65f03c0 	ret
   86d04:	d2800000 	mov	x0, #0x0                   	// #0
   86d08:	d65f03c0 	ret
   86d0c:	d503201f 	nop

0000000000086d10 <strtok_r>:
   86d10:	b4000440 	cbz	x0, 86d98 <strtok_r+0x88>
   86d14:	39c00004 	ldrsb	w4, [x0]
   86d18:	34000484 	cbz	w4, 86da8 <strtok_r+0x98>
   86d1c:	39c00026 	ldrsb	w6, [x1]
   86d20:	34000126 	cbz	w6, 86d44 <strtok_r+0x34>
   86d24:	6b06009f 	cmp	w4, w6
   86d28:	540002c0 	b.eq	86d80 <strtok_r+0x70>  // b.none
   86d2c:	aa0103e5 	mov	x5, x1
   86d30:	14000002 	b	86d38 <strtok_r+0x28>
   86d34:	54000260 	b.eq	86d80 <strtok_r+0x70>  // b.none
   86d38:	38c01ca3 	ldrsb	w3, [x5, #1]!
   86d3c:	6b03009f 	cmp	w4, w3
   86d40:	35ffffa3 	cbnz	w3, 86d34 <strtok_r+0x24>
   86d44:	34000324 	cbz	w4, 86da8 <strtok_r+0x98>
   86d48:	aa0003e7 	mov	x7, x0
   86d4c:	34000126 	cbz	w6, 86d70 <strtok_r+0x60>
   86d50:	6b06009f 	cmp	w4, w6
   86d54:	540001a0 	b.eq	86d88 <strtok_r+0x78>  // b.none
   86d58:	aa0103e5 	mov	x5, x1
   86d5c:	14000002 	b	86d64 <strtok_r+0x54>
   86d60:	54000140 	b.eq	86d88 <strtok_r+0x78>  // b.none
   86d64:	38c01ca3 	ldrsb	w3, [x5, #1]!
   86d68:	6b04007f 	cmp	w3, w4
   86d6c:	35ffffa3 	cbnz	w3, 86d60 <strtok_r+0x50>
   86d70:	38c01ce4 	ldrsb	w4, [x7, #1]!
   86d74:	35fffec4 	cbnz	w4, 86d4c <strtok_r+0x3c>
   86d78:	f9000047 	str	x7, [x2]
   86d7c:	d65f03c0 	ret
   86d80:	38c01c04 	ldrsb	w4, [x0, #1]!
   86d84:	17ffffe7 	b	86d20 <strtok_r+0x10>
   86d88:	390000ff 	strb	wzr, [x7]
   86d8c:	910004e7 	add	x7, x7, #0x1
   86d90:	f9000047 	str	x7, [x2]
   86d94:	17fffffa 	b	86d7c <strtok_r+0x6c>
   86d98:	f9400040 	ldr	x0, [x2]
   86d9c:	b5fffbc0 	cbnz	x0, 86d14 <strtok_r+0x4>
   86da0:	d2800000 	mov	x0, #0x0                   	// #0
   86da4:	d65f03c0 	ret
   86da8:	d2800000 	mov	x0, #0x0                   	// #0
   86dac:	f900005f 	str	xzr, [x2]
   86db0:	d65f03c0 	ret
   86db4:	d503201f 	nop
   86db8:	d503201f 	nop
   86dbc:	d503201f 	nop

0000000000086dc0 <strtoul>:
   86dc0:	aa0003e5 	mov	x5, x0
   86dc4:	b4000041 	cbz	x1, 86dcc <strtoul+0xc>
   86dc8:	f9000020 	str	x0, [x1]
   86dcc:	51000840 	sub	w0, w2, #0x2
   86dd0:	121b7846 	and	w6, w2, #0xffffffef
   86dd4:	7100881f 	cmp	w0, #0x22
   86dd8:	d2800000 	mov	x0, #0x0                   	// #0
   86ddc:	7a408844 	ccmp	w2, #0x0, #0x4, hi  // hi = pmore
   86de0:	54000741 	b.ne	86ec8 <strtoul+0x108>  // b.any
   86de4:	d503201f 	nop
   86de8:	39c000a3 	ldrsb	w3, [x5]
   86dec:	51002464 	sub	w4, w3, #0x9
   86df0:	7100807f 	cmp	w3, #0x20
   86df4:	12001c84 	and	w4, w4, #0xff
   86df8:	54000060 	b.eq	86e04 <strtoul+0x44>  // b.none
   86dfc:	7100109f 	cmp	w4, #0x4
   86e00:	54000068 	b.hi	86e0c <strtoul+0x4c>  // b.pmore
   86e04:	910004a5 	add	x5, x5, #0x1
   86e08:	17fffff8 	b	86de8 <strtoul+0x28>
   86e0c:	7100ac7f 	cmp	w3, #0x2b
   86e10:	540005e0 	b.eq	86ecc <strtoul+0x10c>  // b.none
   86e14:	52800009 	mov	w9, #0x0                   	// #0
   86e18:	7100b47f 	cmp	w3, #0x2d
   86e1c:	54000081 	b.ne	86e2c <strtoul+0x6c>  // b.any
   86e20:	39c004a3 	ldrsb	w3, [x5, #1]
   86e24:	910004a5 	add	x5, x5, #0x1
   86e28:	52800029 	mov	w9, #0x1                   	// #1
   86e2c:	7100c07f 	cmp	w3, #0x30
   86e30:	54000580 	b.eq	86ee0 <strtoul+0x120>  // b.none
   86e34:	7100005f 	cmp	w2, #0x0
   86e38:	52800140 	mov	w0, #0xa                   	// #10
   86e3c:	1a801042 	csel	w2, w2, w0, ne  // ne = any
   86e40:	2a0303e4 	mov	w4, w3
   86e44:	7100bc7f 	cmp	w3, #0x2f
   86e48:	5400076d 	b.le	86f34 <strtoul+0x174>
   86e4c:	93407c48 	sxtw	x8, w2
   86e50:	52800027 	mov	w7, #0x1                   	// #1
   86e54:	d2800006 	mov	x6, #0x0                   	// #0
   86e58:	1400000b 	b	86e84 <strtoul+0xc4>
   86e5c:	93407c84 	sxtw	x4, w4
   86e60:	52800007 	mov	w7, #0x0                   	// #0
   86e64:	9b061100 	madd	x0, x8, x6, x4
   86e68:	eb06001f 	cmp	x0, x6
   86e6c:	54000503 	b.cc	86f0c <strtoul+0x14c>  // b.lo, b.ul, b.last
   86e70:	38c01ca4 	ldrsb	w4, [x5, #1]!
   86e74:	aa0003e6 	mov	x6, x0
   86e78:	2a0403e3 	mov	w3, w4
   86e7c:	7100bc9f 	cmp	w4, #0x2f
   86e80:	540004ed 	b.le	86f1c <strtoul+0x15c>
   86e84:	51018463 	sub	w3, w3, #0x61
   86e88:	51008080 	sub	w0, w4, #0x20
   86e8c:	7100687f 	cmp	w3, #0x1a
   86e90:	1a843004 	csel	w4, w0, w4, cc  // cc = lo, ul, last
   86e94:	7101009f 	cmp	w4, #0x40
   86e98:	51001c80 	sub	w0, w4, #0x7
   86e9c:	1a84c004 	csel	w4, w0, w4, gt
   86ea0:	5100c084 	sub	w4, w4, #0x30
   86ea4:	6b02009f 	cmp	w4, w2
   86ea8:	54fffdab 	b.lt	86e5c <strtoul+0x9c>  // b.tstop
   86eac:	520000e2 	eor	w2, w7, #0x1
   86eb0:	aa0603e0 	mov	x0, x6
   86eb4:	0a090042 	and	w2, w2, w9
   86eb8:	b4000041 	cbz	x1, 86ec0 <strtoul+0x100>
   86ebc:	f9000025 	str	x5, [x1]
   86ec0:	7100005f 	cmp	w2, #0x0
   86ec4:	da800400 	cneg	x0, x0, ne  // ne = any
   86ec8:	d65f03c0 	ret
   86ecc:	39c004a3 	ldrsb	w3, [x5, #1]
   86ed0:	52800009 	mov	w9, #0x0                   	// #0
   86ed4:	910004a5 	add	x5, x5, #0x1
   86ed8:	7100c07f 	cmp	w3, #0x30
   86edc:	54fffac1 	b.ne	86e34 <strtoul+0x74>  // b.any
   86ee0:	39c004a3 	ldrsb	w3, [x5, #1]
   86ee4:	910004a4 	add	x4, x5, #0x1
   86ee8:	121a7860 	and	w0, w3, #0xffffffdf
   86eec:	7101601f 	cmp	w0, #0x58
   86ef0:	540001a1 	b.ne	86f24 <strtoul+0x164>  // b.any
   86ef4:	d2800000 	mov	x0, #0x0                   	// #0
   86ef8:	35fffe86 	cbnz	w6, 86ec8 <strtoul+0x108>
   86efc:	39c008a3 	ldrsb	w3, [x5, #2]
   86f00:	52800202 	mov	w2, #0x10                  	// #16
   86f04:	910008a5 	add	x5, x5, #0x2
   86f08:	17ffffce 	b	86e40 <strtoul+0x80>
   86f0c:	92800000 	mov	x0, #0xffffffffffffffff    	// #-1
   86f10:	b4fffdc1 	cbz	x1, 86ec8 <strtoul+0x108>
   86f14:	f9000025 	str	x5, [x1]
   86f18:	d65f03c0 	ret
   86f1c:	52800022 	mov	w2, #0x1                   	// #1
   86f20:	17ffffe5 	b	86eb4 <strtoul+0xf4>
   86f24:	aa0403e5 	mov	x5, x4
   86f28:	35fff8c2 	cbnz	w2, 86e40 <strtoul+0x80>
   86f2c:	52800102 	mov	w2, #0x8                   	// #8
   86f30:	17ffffc4 	b	86e40 <strtoul+0x80>
   86f34:	d2800000 	mov	x0, #0x0                   	// #0
   86f38:	b4fffc81 	cbz	x1, 86ec8 <strtoul+0x108>
   86f3c:	f9000025 	str	x5, [x1]
   86f40:	17fffff6 	b	86f18 <strtoul+0x158>
   86f44:	d503201f 	nop
   86f48:	d503201f 	nop
   86f4c:	d503201f 	nop

0000000000086f50 <char2int>:
   86f50:	13001c00 	sxtb	w0, w0
   86f54:	d65f03c0 	ret

0000000000086f58 <memcpy>:
   86f58:	aa0003e8 	mov	x8, x0
   86f5c:	f101fc5f 	cmp	x2, #0x7f
   86f60:	540001c9 	b.ls	86f98 <memcpy+0x40>  // b.plast
   86f64:	f240083f 	tst	x1, #0x7
   86f68:	54000181 	b.ne	86f98 <memcpy+0x40>  // b.any
   86f6c:	f240083f 	tst	x1, #0x7
   86f70:	54000141 	b.ne	86f98 <memcpy+0x40>  // b.any
   86f74:	d2800803 	mov	x3, #0x40                  	// #64
   86f78:	a8c11424 	ldp	x4, x5, [x1], #16
   86f7c:	a8c11c26 	ldp	x6, x7, [x1], #16
   86f80:	d1008042 	sub	x2, x2, #0x20
   86f84:	a8811404 	stp	x4, x5, [x0], #16
   86f88:	a8811c06 	stp	x6, x7, [x0], #16
   86f8c:	f8a36821 	prfm	pldl1strm, [x1, x3]
   86f90:	f1007c5f 	cmp	x2, #0x1f
   86f94:	54ffff28 	b.hi	86f78 <memcpy+0x20>  // b.pmore
   86f98:	f100005f 	cmp	x2, #0x0
   86f9c:	540000a0 	b.eq	86fb0 <memcpy+0x58>  // b.none
   86fa0:	38401423 	ldrb	w3, [x1], #1
   86fa4:	f1000442 	subs	x2, x2, #0x1
   86fa8:	38001403 	strb	w3, [x0], #1
   86fac:	54ffffa1 	b.ne	86fa0 <memcpy+0x48>  // b.any
   86fb0:	aa0803e0 	mov	x0, x8
   86fb4:	d65f03c0 	ret
	...

0000000000086fc0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>:
   86fc0:	12001c42 	and	w2, w2, #0xff
   86fc4:	f0000023 	adrp	x3, 8d000 <vtable for CGPIOPin+0x158>
   86fc8:	911b6063 	add	x3, x3, #0x6d8
   86fcc:	f9000003 	str	x3, [x0]
   86fd0:	39002002 	strb	w2, [x0, #8]
   86fd4:	7100005f 	cmp	w2, #0x0
   86fd8:	b9000c01 	str	w1, [x0, #12]
   86fdc:	7a410822 	ccmp	w1, #0x1, #0x2, eq  // eq = none
   86fe0:	b900141f 	str	wzr, [x0, #20]
   86fe4:	54000049 	b.ls	86fec <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x2c>  // b.plast
   86fe8:	d65f03c0 	ret
   86fec:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   86ff0:	910003fd 	mov	x29, sp
   86ff4:	a90153f3 	stp	x19, x20, [sp, #16]
   86ff8:	aa0003f3 	mov	x19, x0
   86ffc:	b0000054 	adrp	x20, 8f000 <vtable for CDevice+0x720>
   87000:	9115a280 	add	x0, x20, #0x568
   87004:	b9400800 	ldr	w0, [x0, #8]
   87008:	350004c0 	cbnz	w0, 870a0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xe0>
   8700c:	f942b680 	ldr	x0, [x20, #1384]
   87010:	b40001a0 	cbz	x0, 87044 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x84>
   87014:	b9400e61 	ldr	w1, [x19, #12]
   87018:	531e7421 	lsl	w1, w1, #2
   8701c:	b821481f 	str	wzr, [x0, w1, uxtw]
   87020:	9115a294 	add	x20, x20, #0x568
   87024:	b9400a80 	ldr	w0, [x20, #8]
   87028:	35000400 	cbnz	w0, 870a8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xe8>
   8702c:	aa1303e0 	mov	x0, x19
   87030:	52800001 	mov	w1, #0x0                   	// #0
   87034:	94000037 	bl	87110 <CVirtualGPIOPin::Write(unsigned int)>
   87038:	a94153f3 	ldp	x19, x20, [sp, #16]
   8703c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   87040:	d65f03c0 	ret
   87044:	52800020 	mov	w0, #0x1                   	// #1
   87048:	94000176 	bl	87620 <CMemorySystem::GetCoherentPage(unsigned int)>
   8704c:	52800001 	mov	w1, #0x0                   	// #0
   87050:	f902b680 	str	x0, [x20, #1384]
   87054:	9100a3a0 	add	x0, x29, #0x28
   87058:	940006b2 	bl	88b20 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   8705c:	f942b680 	ldr	x0, [x20, #1384]
   87060:	52800084 	mov	w4, #0x4                   	// #4
   87064:	52800203 	mov	w3, #0x10                  	// #16
   87068:	9100c3a2 	add	x2, x29, #0x30
   8706c:	32020400 	orr	w0, w0, #0xc0000000
   87070:	52900401 	mov	w1, #0x8020                	// #32800
   87074:	72a00081 	movk	w1, #0x4, lsl #16
   87078:	b9003fa0 	str	w0, [x29, #60]
   8707c:	9100a3a0 	add	x0, x29, #0x28
   87080:	940006b0 	bl	88b40 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   87084:	72001c1f 	tst	w0, #0xff
   87088:	54000140 	b.eq	870b0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xf0>  // b.none
   8708c:	9100a3a0 	add	x0, x29, #0x28
   87090:	940006a8 	bl	88b30 <CBcmPropertyTags::~CBcmPropertyTags()>
   87094:	f942b680 	ldr	x0, [x20, #1384]
   87098:	b4fffc40 	cbz	x0, 87020 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x60>
   8709c:	17ffffde 	b	87014 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x54>
   870a0:	9400017c 	bl	87690 <EnterCritical>
   870a4:	17ffffda 	b	8700c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x4c>
   870a8:	940001b2 	bl	87770 <LeaveCritical>
   870ac:	17ffffe0 	b	8702c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x6c>
   870b0:	52800203 	mov	w3, #0x10                  	// #16
   870b4:	2a0303e1 	mov	w1, w3
   870b8:	52800004 	mov	w4, #0x0                   	// #0
   870bc:	9100c3a2 	add	x2, x29, #0x30
   870c0:	72a00081 	movk	w1, #0x4, lsl #16
   870c4:	9100a3a0 	add	x0, x29, #0x28
   870c8:	9400069e 	bl	88b40 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   870cc:	72001c1f 	tst	w0, #0xff
   870d0:	540000a0 	b.eq	870e4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x124>  // b.none
   870d4:	b9403fa0 	ldr	w0, [x29, #60]
   870d8:	92407400 	and	x0, x0, #0x3fffffff
   870dc:	f902b680 	str	x0, [x20, #1384]
   870e0:	17ffffeb 	b	8708c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xcc>
   870e4:	f902b69f 	str	xzr, [x20, #1384]
   870e8:	17ffffe9 	b	8708c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xcc>
   870ec:	d503201f 	nop

00000000000870f0 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   870f0:	d65f03c0 	ret
   870f4:	d503201f 	nop
   870f8:	d503201f 	nop
   870fc:	d503201f 	nop

0000000000087100 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   87100:	d2800301 	mov	x1, #0x18                  	// #24
   87104:	140003b7 	b	87fe0 <operator delete(void*, unsigned long)>
   87108:	d503201f 	nop
   8710c:	d503201f 	nop

0000000000087110 <CVirtualGPIOPin::Write(unsigned int)>:
   87110:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   87114:	910003fd 	mov	x29, sp
   87118:	a90153f3 	stp	x19, x20, [sp, #16]
   8711c:	2a0103f4 	mov	w20, w1
   87120:	39402001 	ldrb	w1, [x0, #8]
   87124:	aa0003f3 	mov	x19, x0
   87128:	b9400c00 	ldr	w0, [x0, #12]
   8712c:	34000261 	cbz	w1, 87178 <CVirtualGPIOPin::Write(unsigned int)+0x68>
   87130:	350003e0 	cbnz	w0, 871ac <CVirtualGPIOPin::Write(unsigned int)+0x9c>
   87134:	52800001 	mov	w1, #0x0                   	// #0
   87138:	9100c3a0 	add	x0, x29, #0x30
   8713c:	94000679 	bl	88b20 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   87140:	9100e3a2 	add	x2, x29, #0x38
   87144:	52801040 	mov	w0, #0x82                  	// #130
   87148:	52800104 	mov	w4, #0x8                   	// #8
   8714c:	52800283 	mov	w3, #0x14                  	// #20
   87150:	52900821 	mov	w1, #0x8041                	// #32833
   87154:	72a00061 	movk	w1, #0x3, lsl #16
   87158:	2908d3a0 	stp	w0, w20, [x29, #68]
   8715c:	9100c3a0 	add	x0, x29, #0x30
   87160:	94000678 	bl	88b40 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   87164:	9100c3a0 	add	x0, x29, #0x30
   87168:	94000672 	bl	88b30 <CBcmPropertyTags::~CBcmPropertyTags()>
   8716c:	a94153f3 	ldp	x19, x20, [sp, #16]
   87170:	a8c57bfd 	ldp	x29, x30, [sp], #80
   87174:	d65f03c0 	ret
   87178:	7100041f 	cmp	w0, #0x1
   8717c:	54ffff88 	b.hi	8716c <CVirtualGPIOPin::Write(unsigned int)+0x5c>  // b.pmore
   87180:	f90013b5 	str	x21, [x29, #32]
   87184:	90000055 	adrp	x21, 8f000 <vtable for CDevice+0x720>
   87188:	9115a2a1 	add	x1, x21, #0x568
   8718c:	f942b6a0 	ldr	x0, [x21, #1384]
   87190:	f100001f 	cmp	x0, #0x0
   87194:	7a411a82 	ccmp	w20, #0x1, #0x2, ne  // ne = any
   87198:	54000169 	b.ls	871c4 <CVirtualGPIOPin::Write(unsigned int)+0xb4>  // b.plast
   8719c:	f94013b5 	ldr	x21, [x29, #32]
   871a0:	a94153f3 	ldp	x19, x20, [sp, #16]
   871a4:	a8c57bfd 	ldp	x29, x30, [sp], #80
   871a8:	d65f03c0 	ret
   871ac:	d0000021 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   871b0:	911ba021 	add	x1, x1, #0x6e8
   871b4:	52800b62 	mov	w2, #0x5b                  	// #91
   871b8:	91006020 	add	x0, x1, #0x18
   871bc:	9400051d 	bl	88630 <assertion_failed>
   871c0:	17ffffdd 	b	87134 <CVirtualGPIOPin::Write(unsigned int)+0x24>
   871c4:	b9400820 	ldr	w0, [x1, #8]
   871c8:	35000420 	cbnz	w0, 8724c <CVirtualGPIOPin::Write(unsigned int)+0x13c>
   871cc:	79402a60 	ldrh	w0, [x19, #20]
   871d0:	79402e62 	ldrh	w2, [x19, #22]
   871d4:	b9001274 	str	w20, [x19, #16]
   871d8:	4b020001 	sub	w1, w0, w2
   871dc:	13003c21 	sxth	w1, w1
   871e0:	7100003f 	cmp	w1, #0x0
   871e4:	540002ad 	b.le	87238 <CVirtualGPIOPin::Write(unsigned int)+0x128>
   871e8:	350001f4 	cbnz	w20, 87224 <CVirtualGPIOPin::Write(unsigned int)+0x114>
   871ec:	11000442 	add	w2, w2, #0x1
   871f0:	12003c42 	and	w2, w2, #0xffff
   871f4:	79002e62 	strh	w2, [x19, #22]
   871f8:	b9400e61 	ldr	w1, [x19, #12]
   871fc:	2a004040 	orr	w0, w2, w0, lsl #16
   87200:	f942b6a3 	ldr	x3, [x21, #1384]
   87204:	9115a2b5 	add	x21, x21, #0x568
   87208:	531e7421 	lsl	w1, w1, #2
   8720c:	b8214860 	str	w0, [x3, w1, uxtw]
   87210:	b9400aa0 	ldr	w0, [x21, #8]
   87214:	34fffc40 	cbz	w0, 8719c <CVirtualGPIOPin::Write(unsigned int)+0x8c>
   87218:	94000156 	bl	87770 <LeaveCritical>
   8721c:	f94013b5 	ldr	x21, [x29, #32]
   87220:	17ffffd3 	b	8716c <CVirtualGPIOPin::Write(unsigned int)+0x5c>
   87224:	9115a2b5 	add	x21, x21, #0x568
   87228:	b9400aa0 	ldr	w0, [x21, #8]
   8722c:	35ffff60 	cbnz	w0, 87218 <CVirtualGPIOPin::Write(unsigned int)+0x108>
   87230:	f94013b5 	ldr	x21, [x29, #32]
   87234:	17ffffdb 	b	871a0 <CVirtualGPIOPin::Write(unsigned int)+0x90>
   87238:	34ffff74 	cbz	w20, 87224 <CVirtualGPIOPin::Write(unsigned int)+0x114>
   8723c:	11000400 	add	w0, w0, #0x1
   87240:	12003c00 	and	w0, w0, #0xffff
   87244:	79002a60 	strh	w0, [x19, #20]
   87248:	17ffffec 	b	871f8 <CVirtualGPIOPin::Write(unsigned int)+0xe8>
   8724c:	94000111 	bl	87690 <EnterCritical>
   87250:	17ffffdf 	b	871cc <CVirtualGPIOPin::Write(unsigned int)+0xbc>
   87254:	d503201f 	nop
   87258:	d503201f 	nop
   8725c:	d503201f 	nop

0000000000087260 <CVirtualGPIOPin::Invert()>:
   87260:	b9401001 	ldr	w1, [x0, #16]
   87264:	52000021 	eor	w1, w1, #0x1
   87268:	17ffffaa 	b	87110 <CVirtualGPIOPin::Write(unsigned int)>
   8726c:	00000000 	.inst	0x00000000 ; undefined

0000000000087270 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
   87270:	90000040 	adrp	x0, 8f000 <vtable for CDevice+0x720>
   87274:	b905701f 	str	wzr, [x0, #1392]
   87278:	d65f03c0 	ret
   8727c:	00000000 	.inst	0x00000000 ; undefined

0000000000087280 <ChainBootStub(void const*, unsigned long)>:
   87280:	91000c21 	add	x1, x1, #0x3
   87284:	d342fc21 	lsr	x1, x1, #2
   87288:	b40001a1 	cbz	x1, 872bc <ChainBootStub(void const*, unsigned long)+0x3c>
   8728c:	91408023 	add	x3, x1, #0x20, lsl #12
   87290:	92800065 	mov	x5, #0xfffffffffffffffc    	// #-4
   87294:	f2bffee5 	movk	x5, #0xfff7, lsl #16
   87298:	d37ef463 	lsl	x3, x3, #2
   8729c:	d2a00101 	mov	x1, #0x80000               	// #524288
   872a0:	91001022 	add	x2, x1, #0x4
   872a4:	8b050044 	add	x4, x2, x5
   872a8:	eb03005f 	cmp	x2, x3
   872ac:	b8646804 	ldr	w4, [x0, x4]
   872b0:	b9000024 	str	w4, [x1]
   872b4:	aa0203e1 	mov	x1, x2
   872b8:	54ffff41 	b.ne	872a0 <ChainBootStub(void const*, unsigned long)+0x20>  // b.any
   872bc:	d508751f 	ic	iallu
   872c0:	d5033f9f 	dsb	sy
   872c4:	d5033fdf 	isb
   872c8:	d2a00100 	mov	x0, #0x80000               	// #524288
   872cc:	d61f0000 	br	x0

00000000000872d0 <EnableChainBoot>:
   872d0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   872d4:	90000043 	adrp	x3, 8f000 <vtable for CDevice+0x720>
   872d8:	9115e065 	add	x5, x3, #0x578
   872dc:	90000004 	adrp	x4, 87000 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x40>
   872e0:	910003fd 	mov	x29, sp
   872e4:	d2808002 	mov	x2, #0x400                 	// #1024
   872e8:	f902bc60 	str	x0, [x3, #1400]
   872ec:	b27623e0 	mov	x0, #0x7fc00               	// #523264
   872f0:	f90004a1 	str	x1, [x5, #8]
   872f4:	910a0081 	add	x1, x4, #0x280
   872f8:	97ffff18 	bl	86f58 <memcpy>
   872fc:	d508751f 	ic	iallu
   87300:	d5033f9f 	dsb	sy
   87304:	d5033fdf 	isb
   87308:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8730c:	d65f03c0 	ret

0000000000087310 <IsChainBootEnabled>:
   87310:	90000040 	adrp	x0, 8f000 <vtable for CDevice+0x720>
   87314:	f942bc00 	ldr	x0, [x0, #1400]
   87318:	f100001f 	cmp	x0, #0x0
   8731c:	1a9f07e0 	cset	w0, ne  // ne = any
   87320:	d65f03c0 	ret
   87324:	d503201f 	nop
   87328:	d503201f 	nop
   8732c:	d503201f 	nop

0000000000087330 <DoChainBoot>:
   87330:	d4000002 	hvc	#0x0
   87334:	90000040 	adrp	x0, 8f000 <vtable for CDevice+0x720>
   87338:	9115e001 	add	x1, x0, #0x578
   8733c:	b27623e2 	mov	x2, #0x7fc00               	// #523264
   87340:	f942bc00 	ldr	x0, [x0, #1400]
   87344:	f9400421 	ldr	x1, [x1, #8]
   87348:	d61f0040 	br	x2
   8734c:	00000000 	.inst	0x00000000 ; undefined

0000000000087350 <CMemorySystem::CMemorySystem(bool)>:
   87350:	90000042 	adrp	x2, 8f000 <vtable for CDevice+0x720>
   87354:	f942c443 	ldr	x3, [x2, #1416]
   87358:	39000001 	strb	w1, [x0]
   8735c:	a900fc1f 	stp	xzr, xzr, [x0, #8]
   87360:	b4000043 	cbz	x3, 87368 <CMemorySystem::CMemorySystem(bool)+0x18>
   87364:	d65f03c0 	ret
   87368:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   8736c:	52800021 	mov	w1, #0x1                   	// #1
   87370:	910003fd 	mov	x29, sp
   87374:	f9000bf3 	str	x19, [sp, #16]
   87378:	aa0003f3 	mov	x19, x0
   8737c:	910083a0 	add	x0, x29, #0x20
   87380:	f902c453 	str	x19, [x2, #1416]
   87384:	940005e7 	bl	88b20 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   87388:	52800004 	mov	w4, #0x0                   	// #0
   8738c:	52800283 	mov	w3, #0x14                  	// #20
   87390:	9100a3a2 	add	x2, x29, #0x28
   87394:	528000a1 	mov	w1, #0x5                   	// #5
   87398:	72a00021 	movk	w1, #0x1, lsl #16
   8739c:	910083a0 	add	x0, x29, #0x20
   873a0:	940005e8 	bl	88b40 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   873a4:	72001c1f 	tst	w0, #0xff
   873a8:	54000301 	b.ne	87408 <CMemorySystem::CMemorySystem(bool)+0xb8>  // b.any
   873ac:	d2e38001 	mov	x1, #0x1c00000000000000    	// #2017612633061982208
   873b0:	d2800000 	mov	x0, #0x0                   	// #0
   873b4:	f80343a1 	stur	x1, [x29, #52]
   873b8:	d2a38001 	mov	x1, #0x1c000000            	// #469762048
   873bc:	f9000661 	str	x1, [x19, #8]
   873c0:	94000310 	bl	88000 <mem_init>
   873c4:	39400260 	ldrb	w0, [x19]
   873c8:	34000160 	cbz	w0, 873f4 <CMemorySystem::CMemorySystem(bool)+0xa4>
   873cc:	f9000fb4 	str	x20, [x29, #24]
   873d0:	d2800200 	mov	x0, #0x10                  	// #16
   873d4:	940002f3 	bl	87fa0 <operator new(unsigned long)>
   873d8:	aa0003f4 	mov	x20, x0
   873dc:	f9400661 	ldr	x1, [x19, #8]
   873e0:	940001e2 	bl	87b68 <CTranslationTable::CTranslationTable(unsigned long)>
   873e4:	f9000a74 	str	x20, [x19, #16]
   873e8:	aa1303e0 	mov	x0, x19
   873ec:	94000059 	bl	87550 <CMemorySystem::EnableMMU()>
   873f0:	f9400fb4 	ldr	x20, [x29, #24]
   873f4:	910083a0 	add	x0, x29, #0x20
   873f8:	940005ce 	bl	88b30 <CBcmPropertyTags::~CBcmPropertyTags()>
   873fc:	f9400bf3 	ldr	x19, [sp, #16]
   87400:	a8c47bfd 	ldp	x29, x30, [sp], #64
   87404:	d65f03c0 	ret
   87408:	b94037a0 	ldr	w0, [x29, #52]
   8740c:	34000120 	cbz	w0, 87430 <CMemorySystem::CMemorySystem(bool)+0xe0>
   87410:	d0000021 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   87414:	d0000020 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   87418:	911c4021 	add	x1, x1, #0x710
   8741c:	911c8000 	add	x0, x0, #0x720
   87420:	52800622 	mov	w2, #0x31                  	// #49
   87424:	94000483 	bl	88630 <assertion_failed>
   87428:	294687a0 	ldp	w0, w1, [x29, #52]
   8742c:	17ffffe4 	b	873bc <CMemorySystem::CMemorySystem(bool)+0x6c>
   87430:	d2800000 	mov	x0, #0x0                   	// #0
   87434:	b9403ba1 	ldr	w1, [x29, #56]
   87438:	17ffffe1 	b	873bc <CMemorySystem::CMemorySystem(bool)+0x6c>
   8743c:	d503201f 	nop

0000000000087440 <CMemorySystem::~CMemorySystem()>:
   87440:	90000041 	adrp	x1, 8f000 <vtable for CDevice+0x720>
   87444:	f942c422 	ldr	x2, [x1, #1416]
   87448:	eb02001f 	cmp	x0, x2
   8744c:	54000040 	b.eq	87454 <CMemorySystem::~CMemorySystem()+0x14>  // b.none
   87450:	d65f03c0 	ret
   87454:	39400000 	ldrb	w0, [x0]
   87458:	f902c43f 	str	xzr, [x1, #1416]
   8745c:	34ffffa0 	cbz	w0, 87450 <CMemorySystem::~CMemorySystem()+0x10>
   87460:	14000074 	b	87630 <CMemorySystem::Destructor() [clone .part.0]>
   87464:	d503201f 	nop
   87468:	d503201f 	nop
   8746c:	d503201f 	nop

0000000000087470 <CMemorySystem::Destructor()>:
   87470:	90000041 	adrp	x1, 8f000 <vtable for CDevice+0x720>
   87474:	f942c422 	ldr	x2, [x1, #1416]
   87478:	eb00005f 	cmp	x2, x0
   8747c:	54000040 	b.eq	87484 <CMemorySystem::Destructor()+0x14>  // b.none
   87480:	d65f03c0 	ret
   87484:	39400040 	ldrb	w0, [x2]
   87488:	f902c43f 	str	xzr, [x1, #1416]
   8748c:	34ffffa0 	cbz	w0, 87480 <CMemorySystem::Destructor()+0x10>
   87490:	14000068 	b	87630 <CMemorySystem::Destructor() [clone .part.0]>
   87494:	d503201f 	nop
   87498:	d503201f 	nop
   8749c:	d503201f 	nop

00000000000874a0 <CMemorySystem::GetMemSize() const>:
   874a0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   874a4:	910003fd 	mov	x29, sp
   874a8:	f9000bf3 	str	x19, [sp, #16]
   874ac:	90000053 	adrp	x19, 8f000 <vtable for CDevice+0x720>
   874b0:	f942c660 	ldr	x0, [x19, #1416]
   874b4:	b40000a0 	cbz	x0, 874c8 <CMemorySystem::GetMemSize() const+0x28>
   874b8:	f9400400 	ldr	x0, [x0, #8]
   874bc:	f9400bf3 	ldr	x19, [sp, #16]
   874c0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   874c4:	d65f03c0 	ret
   874c8:	52800e42 	mov	w2, #0x72                  	// #114
   874cc:	d0000021 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   874d0:	d0000020 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   874d4:	911c4021 	add	x1, x1, #0x710
   874d8:	91196000 	add	x0, x0, #0x658
   874dc:	94000455 	bl	88630 <assertion_failed>
   874e0:	f942c660 	ldr	x0, [x19, #1416]
   874e4:	f9400bf3 	ldr	x19, [sp, #16]
   874e8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   874ec:	f9400400 	ldr	x0, [x0, #8]
   874f0:	d65f03c0 	ret
   874f4:	d503201f 	nop
   874f8:	d503201f 	nop
   874fc:	d503201f 	nop

0000000000087500 <CMemorySystem::Get()>:
   87500:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   87504:	910003fd 	mov	x29, sp
   87508:	f9000bf3 	str	x19, [sp, #16]
   8750c:	90000053 	adrp	x19, 8f000 <vtable for CDevice+0x720>
   87510:	f942c660 	ldr	x0, [x19, #1416]
   87514:	b4000080 	cbz	x0, 87524 <CMemorySystem::Get()+0x24>
   87518:	f9400bf3 	ldr	x19, [sp, #16]
   8751c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   87520:	d65f03c0 	ret
   87524:	52800f02 	mov	w2, #0x78                  	// #120
   87528:	d0000021 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   8752c:	d0000020 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   87530:	911c4021 	add	x1, x1, #0x710
   87534:	91196000 	add	x0, x0, #0x658
   87538:	9400043e 	bl	88630 <assertion_failed>
   8753c:	f942c660 	ldr	x0, [x19, #1416]
   87540:	f9400bf3 	ldr	x19, [sp, #16]
   87544:	a8c27bfd 	ldp	x29, x30, [sp], #32
   87548:	d65f03c0 	ret
   8754c:	d503201f 	nop

0000000000087550 <CMemorySystem::EnableMMU()>:
   87550:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   87554:	910003fd 	mov	x29, sp
   87558:	f9000bf3 	str	x19, [sp, #16]
   8755c:	aa0003f3 	mov	x19, x0
   87560:	39400000 	ldrb	w0, [x0]
   87564:	34000340 	cbz	w0, 875cc <CMemorySystem::EnableMMU()+0x7c>
   87568:	d2809980 	mov	x0, #0x4cc                 	// #1228
   8756c:	d518a200 	msr	mair_el1, x0
   87570:	f9400a60 	ldr	x0, [x19, #16]
   87574:	b4000400 	cbz	x0, 875f4 <CMemorySystem::EnableMMU()+0xa4>
   87578:	940001ea 	bl	87d20 <CTranslationTable::GetBaseAddress() const>
   8757c:	d5182000 	msr	ttbr0_el1, x0
   87580:	d5382040 	mrs	x0, tcr_el1
   87584:	929ff7e1 	mov	x1, #0xffffffffffff0040    	// #-65472
   87588:	f2bff7e1 	movk	x1, #0xffbf, lsl #16
   8758c:	f2dfff01 	movk	x1, #0xfff8, lsl #32
   87590:	8a010000 	and	x0, x0, x1
   87594:	d28fe401 	mov	x1, #0x7f20                	// #32544
   87598:	f2a01001 	movk	x1, #0x80, lsl #16
   8759c:	aa010000 	orr	x0, x0, x1
   875a0:	d5182040 	msr	tcr_el1, x0
   875a4:	d5381000 	mrs	x0, sctlr_el1
   875a8:	529fffa1 	mov	w1, #0xfffd                	// #65533
   875ac:	72bffee1 	movk	w1, #0xfff7, lsl #16
   875b0:	0a010000 	and	w0, w0, w1
   875b4:	528200a1 	mov	w1, #0x1005                	// #4101
   875b8:	2a010000 	orr	w0, w0, w1
   875bc:	d5181000 	msr	sctlr_el1, x0
   875c0:	f9400bf3 	ldr	x19, [sp, #16]
   875c4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   875c8:	d65f03c0 	ret
   875cc:	52800fc2 	mov	w2, #0x7e                  	// #126
   875d0:	d0000021 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   875d4:	d0000020 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   875d8:	911c4021 	add	x1, x1, #0x710
   875dc:	911d0000 	add	x0, x0, #0x740
   875e0:	94000414 	bl	88630 <assertion_failed>
   875e4:	d2809980 	mov	x0, #0x4cc                 	// #1228
   875e8:	d518a200 	msr	mair_el1, x0
   875ec:	f9400a60 	ldr	x0, [x19, #16]
   875f0:	b5fffc40 	cbnz	x0, 87578 <CMemorySystem::EnableMMU()+0x28>
   875f4:	d0000021 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   875f8:	d0000020 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   875fc:	528010a2 	mov	w2, #0x85                  	// #133
   87600:	911d4000 	add	x0, x0, #0x750
   87604:	911c4021 	add	x1, x1, #0x710
   87608:	9400040a 	bl	88630 <assertion_failed>
   8760c:	f9400a60 	ldr	x0, [x19, #16]
   87610:	17ffffda 	b	87578 <CMemorySystem::EnableMMU()+0x28>
   87614:	d503201f 	nop
   87618:	d503201f 	nop
   8761c:	d503201f 	nop

0000000000087620 <CMemorySystem::GetCoherentPage(unsigned int)>:
   87620:	53103c00 	lsl	w0, w0, #16
   87624:	91540000 	add	x0, x0, #0x500, lsl #12
   87628:	d65f03c0 	ret
   8762c:	d503201f 	nop

0000000000087630 <CMemorySystem::Destructor() [clone .part.0]>:
   87630:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   87634:	910003fd 	mov	x29, sp
   87638:	d5381000 	mrs	x0, sctlr_el1
   8763c:	128000a1 	mov	w1, #0xfffffffa            	// #-6
   87640:	0a010000 	and	w0, w0, w1
   87644:	d5181000 	msr	sctlr_el1, x0
   87648:	d5033f9f 	dsb	sy
   8764c:	d5033fdf 	isb
   87650:	940000c4 	bl	87960 <CleanDataCache>
   87654:	9400005f 	bl	877d0 <InvalidateDataCache>
   87658:	d508871f 	tlbi	vmalle1
   8765c:	d5033f9f 	dsb	sy
   87660:	d5033fdf 	isb
   87664:	a8c17bfd 	ldp	x29, x30, [sp], #16
   87668:	d65f03c0 	ret
   8766c:	00000000 	.inst	0x00000000 ; undefined

0000000000087670 <CurrentExecutionLevel>:
   87670:	d53b4221 	mrs	x1, daif
   87674:	d3471c22 	ubfx	x2, x1, #7, #1
   87678:	f27a003f 	tst	x1, #0x40
   8767c:	52800040 	mov	w0, #0x2                   	// #2
   87680:	1a800040 	csel	w0, w2, w0, eq  // eq = none
   87684:	d65f03c0 	ret
   87688:	d503201f 	nop
   8768c:	d503201f 	nop

0000000000087690 <EnterCritical>:
   87690:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   87694:	910003fd 	mov	x29, sp
   87698:	a90153f3 	stp	x19, x20, [sp, #16]
   8769c:	2a0003f4 	mov	w20, w0
   876a0:	f90013f5 	str	x21, [sp, #32]
   876a4:	51000400 	sub	w0, w0, #0x1
   876a8:	7100041f 	cmp	w0, #0x1
   876ac:	540000e9 	b.ls	876c8 <EnterCritical+0x38>  // b.plast
   876b0:	d0000021 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   876b4:	d0000020 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   876b8:	52800c62 	mov	w2, #0x63                  	// #99
   876bc:	911dc021 	add	x1, x1, #0x770
   876c0:	911e2000 	add	x0, x0, #0x788
   876c4:	940003db 	bl	88630 <assertion_failed>
   876c8:	d53b4235 	mrs	x21, daif
   876cc:	71000a9f 	cmp	w20, #0x2
   876d0:	54000040 	b.eq	876d8 <EnterCritical+0x48>  // b.none
   876d4:	373002b5 	tbnz	w21, #6, 87728 <EnterCritical+0x98>
   876d8:	d50343df 	msr	daifset, #0x3
   876dc:	90000053 	adrp	x19, 8f000 <vtable for CDevice+0x720>
   876e0:	b9459260 	ldr	w0, [x19, #1424]
   876e4:	71004c1f 	cmp	w0, #0x13
   876e8:	54000368 	b.hi	87754 <EnterCritical+0xc4>  // b.pmore
   876ec:	b9459260 	ldr	w0, [x19, #1424]
   876f0:	91164261 	add	x1, x19, #0x590
   876f4:	91002021 	add	x1, x1, #0x8
   876f8:	7100069f 	cmp	w20, #0x1
   876fc:	11000402 	add	w2, w0, #0x1
   87700:	b9059262 	str	w2, [x19, #1424]
   87704:	2a0003e0 	mov	w0, w0
   87708:	b8207835 	str	w21, [x1, x0, lsl #2]
   8770c:	54000041 	b.ne	87714 <EnterCritical+0x84>  // b.any
   87710:	d50341ff 	msr	daifclr, #0x1
   87714:	d5033fbf 	dmb	sy
   87718:	a94153f3 	ldp	x19, x20, [sp, #16]
   8771c:	f94013f5 	ldr	x21, [sp, #32]
   87720:	a8c37bfd 	ldp	x29, x30, [sp], #48
   87724:	d65f03c0 	ret
   87728:	52800d22 	mov	w2, #0x69                  	// #105
   8772c:	d0000021 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   87730:	d0000020 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   87734:	911dc021 	add	x1, x1, #0x770
   87738:	911f0000 	add	x0, x0, #0x7c0
   8773c:	940003bd 	bl	88630 <assertion_failed>
   87740:	d50343df 	msr	daifset, #0x3
   87744:	90000053 	adrp	x19, 8f000 <vtable for CDevice+0x720>
   87748:	b9459260 	ldr	w0, [x19, #1424]
   8774c:	71004c1f 	cmp	w0, #0x13
   87750:	54fffce9 	b.ls	876ec <EnterCritical+0x5c>  // b.plast
   87754:	d0000021 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   87758:	d0000020 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   8775c:	52800da2 	mov	w2, #0x6d                  	// #109
   87760:	911dc021 	add	x1, x1, #0x770
   87764:	911fc000 	add	x0, x0, #0x7f0
   87768:	940003b2 	bl	88630 <assertion_failed>
   8776c:	17ffffe0 	b	876ec <EnterCritical+0x5c>

0000000000087770 <LeaveCritical>:
   87770:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   87774:	910003fd 	mov	x29, sp
   87778:	f9000bf3 	str	x19, [sp, #16]
   8777c:	d5033fbf 	dmb	sy
   87780:	d50341df 	msr	daifset, #0x1
   87784:	90000053 	adrp	x19, 8f000 <vtable for CDevice+0x720>
   87788:	b9459260 	ldr	w0, [x19, #1424]
   8778c:	350000e0 	cbnz	w0, 877a8 <LeaveCritical+0x38>
   87790:	d0000021 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   87794:	d0000020 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   87798:	52800fc2 	mov	w2, #0x7e                  	// #126
   8779c:	911dc021 	add	x1, x1, #0x770
   877a0:	91206000 	add	x0, x0, #0x818
   877a4:	940003a3 	bl	88630 <assertion_failed>
   877a8:	b9459260 	ldr	w0, [x19, #1424]
   877ac:	91164261 	add	x1, x19, #0x590
   877b0:	91002021 	add	x1, x1, #0x8
   877b4:	51000400 	sub	w0, w0, #0x1
   877b8:	b9059260 	str	w0, [x19, #1424]
   877bc:	b8607820 	ldr	w0, [x1, x0, lsl #2]
   877c0:	d51b4220 	msr	daif, x0
   877c4:	f9400bf3 	ldr	x19, [sp, #16]
   877c8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   877cc:	d65f03c0 	ret

00000000000877d0 <InvalidateDataCache>:
   877d0:	d2800000 	mov	x0, #0x0                   	// #0
   877d4:	d503201f 	nop
   877d8:	d5087640 	dc	isw, x0
   877dc:	32020001 	orr	w1, w0, #0x40000000
   877e0:	d5087641 	dc	isw, x1
   877e4:	32010001 	orr	w1, w0, #0x80000000
   877e8:	d5087641 	dc	isw, x1
   877ec:	32020401 	orr	w1, w0, #0xc0000000
   877f0:	d5087641 	dc	isw, x1
   877f4:	91010000 	add	x0, x0, #0x40
   877f8:	f140081f 	cmp	x0, #0x2, lsl #12
   877fc:	54fffee1 	b.ne	877d8 <InvalidateDataCache+0x8>  // b.any
   87800:	52800050 	mov	w16, #0x2                   	// #2
   87804:	72a20010 	movk	w16, #0x1000, lsl #16
   87808:	5280004f 	mov	w15, #0x2                   	// #2
   8780c:	72a4000f 	movk	w15, #0x2000, lsl #16
   87810:	5280004e 	mov	w14, #0x2                   	// #2
   87814:	72a6000e 	movk	w14, #0x3000, lsl #16
   87818:	5280004d 	mov	w13, #0x2                   	// #2
   8781c:	72a8000d 	movk	w13, #0x4000, lsl #16
   87820:	5280004c 	mov	w12, #0x2                   	// #2
   87824:	72aa000c 	movk	w12, #0x5000, lsl #16
   87828:	5280004b 	mov	w11, #0x2                   	// #2
   8782c:	72ac000b 	movk	w11, #0x6000, lsl #16
   87830:	5280004a 	mov	w10, #0x2                   	// #2
   87834:	72ae000a 	movk	w10, #0x7000, lsl #16
   87838:	52800049 	mov	w9, #0x2                   	// #2
   8783c:	72b00009 	movk	w9, #0x8000, lsl #16
   87840:	52800048 	mov	w8, #0x2                   	// #2
   87844:	72b20008 	movk	w8, #0x9000, lsl #16
   87848:	52800047 	mov	w7, #0x2                   	// #2
   8784c:	72b40007 	movk	w7, #0xa000, lsl #16
   87850:	52800046 	mov	w6, #0x2                   	// #2
   87854:	72b60006 	movk	w6, #0xb000, lsl #16
   87858:	52800045 	mov	w5, #0x2                   	// #2
   8785c:	72b80005 	movk	w5, #0xc000, lsl #16
   87860:	52800044 	mov	w4, #0x2                   	// #2
   87864:	72ba0004 	movk	w4, #0xd000, lsl #16
   87868:	52800043 	mov	w3, #0x2                   	// #2
   8786c:	72bc0003 	movk	w3, #0xe000, lsl #16
   87870:	52800042 	mov	w2, #0x2                   	// #2
   87874:	72be0002 	movk	w2, #0xf000, lsl #16
   87878:	52800000 	mov	w0, #0x0                   	// #0
   8787c:	d503201f 	nop
   87880:	321f0001 	orr	w1, w0, #0x2
   87884:	d5087641 	dc	isw, x1
   87888:	2a100001 	orr	w1, w0, w16
   8788c:	d5087641 	dc	isw, x1
   87890:	2a0f0001 	orr	w1, w0, w15
   87894:	d5087641 	dc	isw, x1
   87898:	2a0e0001 	orr	w1, w0, w14
   8789c:	d5087641 	dc	isw, x1
   878a0:	2a0d0001 	orr	w1, w0, w13
   878a4:	d5087641 	dc	isw, x1
   878a8:	2a0c0001 	orr	w1, w0, w12
   878ac:	d5087641 	dc	isw, x1
   878b0:	2a0b0001 	orr	w1, w0, w11
   878b4:	d5087641 	dc	isw, x1
   878b8:	2a0a0001 	orr	w1, w0, w10
   878bc:	d5087641 	dc	isw, x1
   878c0:	2a090001 	orr	w1, w0, w9
   878c4:	d5087641 	dc	isw, x1
   878c8:	2a080001 	orr	w1, w0, w8
   878cc:	d5087641 	dc	isw, x1
   878d0:	2a070001 	orr	w1, w0, w7
   878d4:	d5087641 	dc	isw, x1
   878d8:	2a060001 	orr	w1, w0, w6
   878dc:	d5087641 	dc	isw, x1
   878e0:	2a050001 	orr	w1, w0, w5
   878e4:	d5087641 	dc	isw, x1
   878e8:	2a040001 	orr	w1, w0, w4
   878ec:	d5087641 	dc	isw, x1
   878f0:	2a030001 	orr	w1, w0, w3
   878f4:	d5087641 	dc	isw, x1
   878f8:	2a020001 	orr	w1, w0, w2
   878fc:	d5087641 	dc	isw, x1
   87900:	11010000 	add	w0, w0, #0x40
   87904:	7140201f 	cmp	w0, #0x8, lsl #12
   87908:	54fffbc1 	b.ne	87880 <InvalidateDataCache+0xb0>  // b.any
   8790c:	d5033f9f 	dsb	sy
   87910:	d65f03c0 	ret
   87914:	d503201f 	nop
   87918:	d503201f 	nop
   8791c:	d503201f 	nop

0000000000087920 <InvalidateDataCacheL1Only>:
   87920:	d2800000 	mov	x0, #0x0                   	// #0
   87924:	d503201f 	nop
   87928:	d5087640 	dc	isw, x0
   8792c:	32020001 	orr	w1, w0, #0x40000000
   87930:	d5087641 	dc	isw, x1
   87934:	32010001 	orr	w1, w0, #0x80000000
   87938:	d5087641 	dc	isw, x1
   8793c:	32020401 	orr	w1, w0, #0xc0000000
   87940:	d5087641 	dc	isw, x1
   87944:	91010000 	add	x0, x0, #0x40
   87948:	f140081f 	cmp	x0, #0x2, lsl #12
   8794c:	54fffee1 	b.ne	87928 <InvalidateDataCacheL1Only+0x8>  // b.any
   87950:	d5033f9f 	dsb	sy
   87954:	d65f03c0 	ret
   87958:	d503201f 	nop
   8795c:	d503201f 	nop

0000000000087960 <CleanDataCache>:
   87960:	d2800000 	mov	x0, #0x0                   	// #0
   87964:	d503201f 	nop
   87968:	d5087a40 	dc	csw, x0
   8796c:	32020001 	orr	w1, w0, #0x40000000
   87970:	d5087a41 	dc	csw, x1
   87974:	32010001 	orr	w1, w0, #0x80000000
   87978:	d5087a41 	dc	csw, x1
   8797c:	32020401 	orr	w1, w0, #0xc0000000
   87980:	d5087a41 	dc	csw, x1
   87984:	91010000 	add	x0, x0, #0x40
   87988:	f140081f 	cmp	x0, #0x2, lsl #12
   8798c:	54fffee1 	b.ne	87968 <CleanDataCache+0x8>  // b.any
   87990:	52800050 	mov	w16, #0x2                   	// #2
   87994:	72a20010 	movk	w16, #0x1000, lsl #16
   87998:	5280004f 	mov	w15, #0x2                   	// #2
   8799c:	72a4000f 	movk	w15, #0x2000, lsl #16
   879a0:	5280004e 	mov	w14, #0x2                   	// #2
   879a4:	72a6000e 	movk	w14, #0x3000, lsl #16
   879a8:	5280004d 	mov	w13, #0x2                   	// #2
   879ac:	72a8000d 	movk	w13, #0x4000, lsl #16
   879b0:	5280004c 	mov	w12, #0x2                   	// #2
   879b4:	72aa000c 	movk	w12, #0x5000, lsl #16
   879b8:	5280004b 	mov	w11, #0x2                   	// #2
   879bc:	72ac000b 	movk	w11, #0x6000, lsl #16
   879c0:	5280004a 	mov	w10, #0x2                   	// #2
   879c4:	72ae000a 	movk	w10, #0x7000, lsl #16
   879c8:	52800049 	mov	w9, #0x2                   	// #2
   879cc:	72b00009 	movk	w9, #0x8000, lsl #16
   879d0:	52800048 	mov	w8, #0x2                   	// #2
   879d4:	72b20008 	movk	w8, #0x9000, lsl #16
   879d8:	52800047 	mov	w7, #0x2                   	// #2
   879dc:	72b40007 	movk	w7, #0xa000, lsl #16
   879e0:	52800046 	mov	w6, #0x2                   	// #2
   879e4:	72b60006 	movk	w6, #0xb000, lsl #16
   879e8:	52800045 	mov	w5, #0x2                   	// #2
   879ec:	72b80005 	movk	w5, #0xc000, lsl #16
   879f0:	52800044 	mov	w4, #0x2                   	// #2
   879f4:	72ba0004 	movk	w4, #0xd000, lsl #16
   879f8:	52800043 	mov	w3, #0x2                   	// #2
   879fc:	72bc0003 	movk	w3, #0xe000, lsl #16
   87a00:	52800042 	mov	w2, #0x2                   	// #2
   87a04:	72be0002 	movk	w2, #0xf000, lsl #16
   87a08:	52800000 	mov	w0, #0x0                   	// #0
   87a0c:	d503201f 	nop
   87a10:	321f0001 	orr	w1, w0, #0x2
   87a14:	d5087a41 	dc	csw, x1
   87a18:	2a100001 	orr	w1, w0, w16
   87a1c:	d5087a41 	dc	csw, x1
   87a20:	2a0f0001 	orr	w1, w0, w15
   87a24:	d5087a41 	dc	csw, x1
   87a28:	2a0e0001 	orr	w1, w0, w14
   87a2c:	d5087a41 	dc	csw, x1
   87a30:	2a0d0001 	orr	w1, w0, w13
   87a34:	d5087a41 	dc	csw, x1
   87a38:	2a0c0001 	orr	w1, w0, w12
   87a3c:	d5087a41 	dc	csw, x1
   87a40:	2a0b0001 	orr	w1, w0, w11
   87a44:	d5087a41 	dc	csw, x1
   87a48:	2a0a0001 	orr	w1, w0, w10
   87a4c:	d5087a41 	dc	csw, x1
   87a50:	2a090001 	orr	w1, w0, w9
   87a54:	d5087a41 	dc	csw, x1
   87a58:	2a080001 	orr	w1, w0, w8
   87a5c:	d5087a41 	dc	csw, x1
   87a60:	2a070001 	orr	w1, w0, w7
   87a64:	d5087a41 	dc	csw, x1
   87a68:	2a060001 	orr	w1, w0, w6
   87a6c:	d5087a41 	dc	csw, x1
   87a70:	2a050001 	orr	w1, w0, w5
   87a74:	d5087a41 	dc	csw, x1
   87a78:	2a040001 	orr	w1, w0, w4
   87a7c:	d5087a41 	dc	csw, x1
   87a80:	2a030001 	orr	w1, w0, w3
   87a84:	d5087a41 	dc	csw, x1
   87a88:	2a020001 	orr	w1, w0, w2
   87a8c:	d5087a41 	dc	csw, x1
   87a90:	11010000 	add	w0, w0, #0x40
   87a94:	7140201f 	cmp	w0, #0x8, lsl #12
   87a98:	54fffbc1 	b.ne	87a10 <CleanDataCache+0xb0>  // b.any
   87a9c:	d5033f9f 	dsb	sy
   87aa0:	d65f03c0 	ret
   87aa4:	d503201f 	nop
   87aa8:	d503201f 	nop
   87aac:	d503201f 	nop

0000000000087ab0 <InvalidateDataCacheRange>:
   87ab0:	d5087620 	dc	ivac, x0
   87ab4:	91010022 	add	x2, x1, #0x40
   87ab8:	f100fc5f 	cmp	x2, #0x3f
   87abc:	54000129 	b.ls	87ae0 <InvalidateDataCacheRange+0x30>  // b.plast
   87ac0:	91010000 	add	x0, x0, #0x40
   87ac4:	927ae421 	and	x1, x1, #0xffffffffffffffc0
   87ac8:	8b010001 	add	x1, x0, x1
   87acc:	14000002 	b	87ad4 <InvalidateDataCacheRange+0x24>
   87ad0:	91010000 	add	x0, x0, #0x40
   87ad4:	d5087620 	dc	ivac, x0
   87ad8:	eb00003f 	cmp	x1, x0
   87adc:	54ffffa1 	b.ne	87ad0 <InvalidateDataCacheRange+0x20>  // b.any
   87ae0:	d5033f9f 	dsb	sy
   87ae4:	d65f03c0 	ret
   87ae8:	d503201f 	nop
   87aec:	d503201f 	nop

0000000000087af0 <CleanDataCacheRange>:
   87af0:	d50b7a20 	dc	cvac, x0
   87af4:	91010022 	add	x2, x1, #0x40
   87af8:	f100fc5f 	cmp	x2, #0x3f
   87afc:	54000129 	b.ls	87b20 <CleanDataCacheRange+0x30>  // b.plast
   87b00:	91010000 	add	x0, x0, #0x40
   87b04:	927ae421 	and	x1, x1, #0xffffffffffffffc0
   87b08:	8b010001 	add	x1, x0, x1
   87b0c:	14000002 	b	87b14 <CleanDataCacheRange+0x24>
   87b10:	91010000 	add	x0, x0, #0x40
   87b14:	d50b7a20 	dc	cvac, x0
   87b18:	eb00003f 	cmp	x1, x0
   87b1c:	54ffffa1 	b.ne	87b10 <CleanDataCacheRange+0x20>  // b.any
   87b20:	d5033f9f 	dsb	sy
   87b24:	d65f03c0 	ret
   87b28:	d503201f 	nop
   87b2c:	d503201f 	nop

0000000000087b30 <CleanAndInvalidateDataCacheRange>:
   87b30:	d50b7e20 	dc	civac, x0
   87b34:	91010022 	add	x2, x1, #0x40
   87b38:	f100fc5f 	cmp	x2, #0x3f
   87b3c:	54000129 	b.ls	87b60 <CleanAndInvalidateDataCacheRange+0x30>  // b.plast
   87b40:	91010000 	add	x0, x0, #0x40
   87b44:	927ae421 	and	x1, x1, #0xffffffffffffffc0
   87b48:	8b010001 	add	x1, x0, x1
   87b4c:	14000002 	b	87b54 <CleanAndInvalidateDataCacheRange+0x24>
   87b50:	91010000 	add	x0, x0, #0x40
   87b54:	d50b7e20 	dc	civac, x0
   87b58:	eb00003f 	cmp	x1, x0
   87b5c:	54ffffa1 	b.ne	87b50 <CleanAndInvalidateDataCacheRange+0x20>  // b.any
   87b60:	d5033f9f 	dsb	sy
   87b64:	d65f03c0 	ret

0000000000087b68 <CTranslationTable::CTranslationTable(unsigned long)>:
   87b68:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   87b6c:	910003fd 	mov	x29, sp
   87b70:	f9000fa0 	str	x0, [x29, #24]
   87b74:	f9000ba1 	str	x1, [x29, #16]
   87b78:	f9400fa0 	ldr	x0, [x29, #24]
   87b7c:	f9400ba1 	ldr	x1, [x29, #16]
   87b80:	f9000001 	str	x1, [x0]
   87b84:	f9400fa0 	ldr	x0, [x29, #24]
   87b88:	f900041f 	str	xzr, [x0, #8]
   87b8c:	9400023d 	bl	88480 <palloc>
   87b90:	aa0003e1 	mov	x1, x0
   87b94:	f9400fa0 	ldr	x0, [x29, #24]
   87b98:	f9000401 	str	x1, [x0, #8]
   87b9c:	f9400fa0 	ldr	x0, [x29, #24]
   87ba0:	f9400400 	ldr	x0, [x0, #8]
   87ba4:	f100001f 	cmp	x0, #0x0
   87ba8:	540000e1 	b.ne	87bc4 <CTranslationTable::CTranslationTable(unsigned long)+0x5c>  // b.any
   87bac:	d0000020 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   87bb0:	9120c001 	add	x1, x0, #0x830
   87bb4:	d0000020 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   87bb8:	91212000 	add	x0, x0, #0x848
   87bbc:	52800482 	mov	w2, #0x24                  	// #36
   87bc0:	9400029c 	bl	88630 <assertion_failed>
   87bc4:	f9400fa0 	ldr	x0, [x29, #24]
   87bc8:	f9400400 	ldr	x0, [x0, #8]
   87bcc:	d2a00022 	mov	x2, #0x10000               	// #65536
   87bd0:	52800001 	mov	w1, #0x0                   	// #0
   87bd4:	97fffb4f 	bl	86910 <memset>
   87bd8:	b9003fbf 	str	wzr, [x29, #60]
   87bdc:	b9403fa0 	ldr	w0, [x29, #60]
   87be0:	7100081f 	cmp	w0, #0x2
   87be4:	54000928 	b.hi	87d08 <CTranslationTable::CTranslationTable(unsigned long)+0x1a0>  // b.pmore
   87be8:	b9403fa0 	ldr	w0, [x29, #60]
   87bec:	d3638800 	lsl	x0, x0, #29
   87bf0:	f9001ba0 	str	x0, [x29, #48]
   87bf4:	f9401ba1 	ldr	x1, [x29, #48]
   87bf8:	f9400fa0 	ldr	x0, [x29, #24]
   87bfc:	9400005c 	bl	87d6c <CTranslationTable::CreateLevel3Table(unsigned long)>
   87c00:	f90017a0 	str	x0, [x29, #40]
   87c04:	f94017a0 	ldr	x0, [x29, #40]
   87c08:	f100001f 	cmp	x0, #0x0
   87c0c:	540000e1 	b.ne	87c28 <CTranslationTable::CTranslationTable(unsigned long)+0xc0>  // b.any
   87c10:	d0000020 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   87c14:	9120c001 	add	x1, x0, #0x830
   87c18:	d0000020 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   87c1c:	91216000 	add	x0, x0, #0x858
   87c20:	528005a2 	mov	w2, #0x2d                  	// #45
   87c24:	94000283 	bl	88630 <assertion_failed>
   87c28:	f9400fa0 	ldr	x0, [x29, #24]
   87c2c:	f9400401 	ldr	x1, [x0, #8]
   87c30:	b9403fa0 	ldr	w0, [x29, #60]
   87c34:	d37df000 	lsl	x0, x0, #3
   87c38:	8b000020 	add	x0, x1, x0
   87c3c:	f90013a0 	str	x0, [x29, #32]
   87c40:	f94013a0 	ldr	x0, [x29, #32]
   87c44:	39400001 	ldrb	w1, [x0]
   87c48:	32000421 	orr	w1, w1, #0x3
   87c4c:	39000001 	strb	w1, [x0]
   87c50:	f94013a0 	ldr	x0, [x29, #32]
   87c54:	39400001 	ldrb	w1, [x0]
   87c58:	12000421 	and	w1, w1, #0x3
   87c5c:	39000001 	strb	w1, [x0]
   87c60:	39400401 	ldrb	w1, [x0, #1]
   87c64:	52800002 	mov	w2, #0x0                   	// #0
   87c68:	0a020021 	and	w1, w1, w2
   87c6c:	39000401 	strb	w1, [x0, #1]
   87c70:	f94017a0 	ldr	x0, [x29, #40]
   87c74:	d350fc00 	lsr	x0, x0, #16
   87c78:	2a0003e2 	mov	w2, w0
   87c7c:	f94013a1 	ldr	x1, [x29, #32]
   87c80:	f9400020 	ldr	x0, [x1]
   87c84:	b3707c40 	bfi	x0, x2, #16, #32
   87c88:	f9000020 	str	x0, [x1]
   87c8c:	f94013a0 	ldr	x0, [x29, #32]
   87c90:	39401801 	ldrb	w1, [x0, #6]
   87c94:	121c6c21 	and	w1, w1, #0xfffffff0
   87c98:	39001801 	strb	w1, [x0, #6]
   87c9c:	f94013a0 	ldr	x0, [x29, #32]
   87ca0:	39401801 	ldrb	w1, [x0, #6]
   87ca4:	12000c21 	and	w1, w1, #0xf
   87ca8:	39001801 	strb	w1, [x0, #6]
   87cac:	39401c01 	ldrb	w1, [x0, #7]
   87cb0:	121d7021 	and	w1, w1, #0xfffffff8
   87cb4:	39001c01 	strb	w1, [x0, #7]
   87cb8:	f94013a0 	ldr	x0, [x29, #32]
   87cbc:	39401c01 	ldrb	w1, [x0, #7]
   87cc0:	121c7821 	and	w1, w1, #0xfffffff7
   87cc4:	39001c01 	strb	w1, [x0, #7]
   87cc8:	f94013a0 	ldr	x0, [x29, #32]
   87ccc:	39401c01 	ldrb	w1, [x0, #7]
   87cd0:	121b7821 	and	w1, w1, #0xffffffef
   87cd4:	39001c01 	strb	w1, [x0, #7]
   87cd8:	f94013a0 	ldr	x0, [x29, #32]
   87cdc:	39401c01 	ldrb	w1, [x0, #7]
   87ce0:	12197421 	and	w1, w1, #0xffffff9f
   87ce4:	39001c01 	strb	w1, [x0, #7]
   87ce8:	f94013a0 	ldr	x0, [x29, #32]
   87cec:	39401c01 	ldrb	w1, [x0, #7]
   87cf0:	12001821 	and	w1, w1, #0x7f
   87cf4:	39001c01 	strb	w1, [x0, #7]
   87cf8:	b9403fa0 	ldr	w0, [x29, #60]
   87cfc:	11000400 	add	w0, w0, #0x1
   87d00:	b9003fa0 	str	w0, [x29, #60]
   87d04:	17ffffb6 	b	87bdc <CTranslationTable::CTranslationTable(unsigned long)+0x74>
   87d08:	d5033f9f 	dsb	sy
   87d0c:	d503201f 	nop
   87d10:	a8c47bfd 	ldp	x29, x30, [sp], #64
   87d14:	d65f03c0 	ret

0000000000087d18 <CTranslationTable::~CTranslationTable()>:
   87d18:	f9400400 	ldr	x0, [x0, #8]
   87d1c:	14000219 	b	88580 <pfree>

0000000000087d20 <CTranslationTable::GetBaseAddress() const>:
   87d20:	f9400401 	ldr	x1, [x0, #8]
   87d24:	b4000061 	cbz	x1, 87d30 <CTranslationTable::GetBaseAddress() const+0x10>
   87d28:	aa0103e0 	mov	x0, x1
   87d2c:	d65f03c0 	ret
   87d30:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   87d34:	528008e2 	mov	w2, #0x47                  	// #71
   87d38:	d0000021 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   87d3c:	9120c021 	add	x1, x1, #0x830
   87d40:	910003fd 	mov	x29, sp
   87d44:	f9000bf3 	str	x19, [sp, #16]
   87d48:	aa0003f3 	mov	x19, x0
   87d4c:	d0000020 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   87d50:	91212000 	add	x0, x0, #0x848
   87d54:	94000237 	bl	88630 <assertion_failed>
   87d58:	f9400661 	ldr	x1, [x19, #8]
   87d5c:	f9400bf3 	ldr	x19, [sp, #16]
   87d60:	aa0103e0 	mov	x0, x1
   87d64:	a8c27bfd 	ldp	x29, x30, [sp], #32
   87d68:	d65f03c0 	ret

0000000000087d6c <CTranslationTable::CreateLevel3Table(unsigned long)>:
   87d6c:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   87d70:	910003fd 	mov	x29, sp
   87d74:	f9000fa0 	str	x0, [x29, #24]
   87d78:	f9000ba1 	str	x1, [x29, #16]
   87d7c:	940001c1 	bl	88480 <palloc>
   87d80:	f9001ba0 	str	x0, [x29, #48]
   87d84:	f9401ba0 	ldr	x0, [x29, #48]
   87d88:	f100001f 	cmp	x0, #0x0
   87d8c:	540000e1 	b.ne	87da8 <CTranslationTable::CreateLevel3Table(unsigned long)+0x3c>  // b.any
   87d90:	d0000020 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   87d94:	9120c001 	add	x1, x0, #0x830
   87d98:	d0000020 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   87d9c:	91216000 	add	x0, x0, #0x858
   87da0:	528009c2 	mov	w2, #0x4e                  	// #78
   87da4:	94000223 	bl	88630 <assertion_failed>
   87da8:	b9003fbf 	str	wzr, [x29, #60]
   87dac:	b9403fa1 	ldr	w1, [x29, #60]
   87db0:	5283ffe0 	mov	w0, #0x1fff                	// #8191
   87db4:	6b00003f 	cmp	w1, w0
   87db8:	54000ee8 	b.hi	87f94 <CTranslationTable::CreateLevel3Table(unsigned long)+0x228>  // b.pmore
   87dbc:	b9403fa0 	ldr	w0, [x29, #60]
   87dc0:	d37df000 	lsl	x0, x0, #3
   87dc4:	f9401ba1 	ldr	x1, [x29, #48]
   87dc8:	8b000020 	add	x0, x1, x0
   87dcc:	f90017a0 	str	x0, [x29, #40]
   87dd0:	f94017a0 	ldr	x0, [x29, #40]
   87dd4:	39400001 	ldrb	w1, [x0]
   87dd8:	32000421 	orr	w1, w1, #0x3
   87ddc:	39000001 	strb	w1, [x0]
   87de0:	f94017a0 	ldr	x0, [x29, #40]
   87de4:	39400001 	ldrb	w1, [x0]
   87de8:	121b7021 	and	w1, w1, #0xffffffe3
   87dec:	39000001 	strb	w1, [x0]
   87df0:	f94017a0 	ldr	x0, [x29, #40]
   87df4:	39400001 	ldrb	w1, [x0]
   87df8:	121a7821 	and	w1, w1, #0xffffffdf
   87dfc:	39000001 	strb	w1, [x0]
   87e00:	f94017a0 	ldr	x0, [x29, #40]
   87e04:	39400001 	ldrb	w1, [x0]
   87e08:	12001421 	and	w1, w1, #0x3f
   87e0c:	39000001 	strb	w1, [x0]
   87e10:	f94017a0 	ldr	x0, [x29, #40]
   87e14:	39400401 	ldrb	w1, [x0, #1]
   87e18:	32000421 	orr	w1, w1, #0x3
   87e1c:	39000401 	strb	w1, [x0, #1]
   87e20:	f94017a0 	ldr	x0, [x29, #40]
   87e24:	39400401 	ldrb	w1, [x0, #1]
   87e28:	321e0021 	orr	w1, w1, #0x4
   87e2c:	39000401 	strb	w1, [x0, #1]
   87e30:	f94017a0 	ldr	x0, [x29, #40]
   87e34:	39400401 	ldrb	w1, [x0, #1]
   87e38:	121c7821 	and	w1, w1, #0xfffffff7
   87e3c:	39000401 	strb	w1, [x0, #1]
   87e40:	f94017a0 	ldr	x0, [x29, #40]
   87e44:	39400401 	ldrb	w1, [x0, #1]
   87e48:	12000c21 	and	w1, w1, #0xf
   87e4c:	39000401 	strb	w1, [x0, #1]
   87e50:	f9400ba0 	ldr	x0, [x29, #16]
   87e54:	d350fc00 	lsr	x0, x0, #16
   87e58:	2a0003e2 	mov	w2, w0
   87e5c:	f94017a1 	ldr	x1, [x29, #40]
   87e60:	f9400020 	ldr	x0, [x1]
   87e64:	b3707c40 	bfi	x0, x2, #16, #32
   87e68:	f9000020 	str	x0, [x1]
   87e6c:	f94017a0 	ldr	x0, [x29, #40]
   87e70:	39401801 	ldrb	w1, [x0, #6]
   87e74:	121c6c21 	and	w1, w1, #0xfffffff0
   87e78:	39001801 	strb	w1, [x0, #6]
   87e7c:	f94017a0 	ldr	x0, [x29, #40]
   87e80:	39401801 	ldrb	w1, [x0, #6]
   87e84:	121b7821 	and	w1, w1, #0xffffffef
   87e88:	39001801 	strb	w1, [x0, #6]
   87e8c:	f94017a0 	ldr	x0, [x29, #40]
   87e90:	39401801 	ldrb	w1, [x0, #6]
   87e94:	121a7821 	and	w1, w1, #0xffffffdf
   87e98:	39001801 	strb	w1, [x0, #6]
   87e9c:	f94017a0 	ldr	x0, [x29, #40]
   87ea0:	39401801 	ldrb	w1, [x0, #6]
   87ea4:	321a0021 	orr	w1, w1, #0x40
   87ea8:	39001801 	strb	w1, [x0, #6]
   87eac:	f94017a0 	ldr	x0, [x29, #40]
   87eb0:	39401801 	ldrb	w1, [x0, #6]
   87eb4:	12001821 	and	w1, w1, #0x7f
   87eb8:	39001801 	strb	w1, [x0, #6]
   87ebc:	39401c01 	ldrb	w1, [x0, #7]
   87ec0:	52800002 	mov	w2, #0x0                   	// #0
   87ec4:	0a020021 	and	w1, w1, w2
   87ec8:	39001c01 	strb	w1, [x0, #7]
   87ecc:	f9400ba1 	ldr	x1, [x29, #16]
   87ed0:	b0000020 	adrp	x0, 8c000 <VectorTable>
   87ed4:	9137e000 	add	x0, x0, #0xdf8
   87ed8:	eb00003f 	cmp	x1, x0
   87edc:	540004e3 	b.cc	87f78 <CTranslationTable::CreateLevel3Table(unsigned long)+0x20c>  // b.lo, b.ul, b.last
   87ee0:	f94017a0 	ldr	x0, [x29, #40]
   87ee4:	39401801 	ldrb	w1, [x0, #6]
   87ee8:	321b0021 	orr	w1, w1, #0x20
   87eec:	39001801 	strb	w1, [x0, #6]
   87ef0:	f9400fa0 	ldr	x0, [x29, #24]
   87ef4:	f9400001 	ldr	x1, [x0]
   87ef8:	f9400ba0 	ldr	x0, [x29, #16]
   87efc:	eb00003f 	cmp	x1, x0
   87f00:	54000188 	b.hi	87f30 <CTranslationTable::CreateLevel3Table(unsigned long)+0x1c4>  // b.pmore
   87f04:	f94017a1 	ldr	x1, [x29, #40]
   87f08:	39400020 	ldrb	w0, [x1]
   87f0c:	52800022 	mov	w2, #0x1                   	// #1
   87f10:	331e0840 	bfi	w0, w2, #2, #3
   87f14:	39000020 	strb	w0, [x1]
   87f18:	f94017a1 	ldr	x1, [x29, #40]
   87f1c:	39400420 	ldrb	w0, [x1, #1]
   87f20:	52800042 	mov	w2, #0x2                   	// #2
   87f24:	33000440 	bfxil	w0, w2, #0, #2
   87f28:	39000420 	strb	w0, [x1, #1]
   87f2c:	14000013 	b	87f78 <CTranslationTable::CreateLevel3Table(unsigned long)+0x20c>
   87f30:	f9400ba1 	ldr	x1, [x29, #16]
   87f34:	12bff600 	mov	w0, #0x4fffff              	// #5242879
   87f38:	eb00003f 	cmp	x1, x0
   87f3c:	540001e9 	b.ls	87f78 <CTranslationTable::CreateLevel3Table(unsigned long)+0x20c>  // b.plast
   87f40:	f9400ba1 	ldr	x1, [x29, #16]
   87f44:	12bff400 	mov	w0, #0x5fffff              	// #6291455
   87f48:	eb00003f 	cmp	x1, x0
   87f4c:	54000168 	b.hi	87f78 <CTranslationTable::CreateLevel3Table(unsigned long)+0x20c>  // b.pmore
   87f50:	f94017a1 	ldr	x1, [x29, #40]
   87f54:	39400020 	ldrb	w0, [x1]
   87f58:	52800042 	mov	w2, #0x2                   	// #2
   87f5c:	331e0840 	bfi	w0, w2, #2, #3
   87f60:	39000020 	strb	w0, [x1]
   87f64:	f94017a1 	ldr	x1, [x29, #40]
   87f68:	39400420 	ldrb	w0, [x1, #1]
   87f6c:	52800042 	mov	w2, #0x2                   	// #2
   87f70:	33000440 	bfxil	w0, w2, #0, #2
   87f74:	39000420 	strb	w0, [x1, #1]
   87f78:	f9400ba0 	ldr	x0, [x29, #16]
   87f7c:	91404000 	add	x0, x0, #0x10, lsl #12
   87f80:	f9000ba0 	str	x0, [x29, #16]
   87f84:	b9403fa0 	ldr	w0, [x29, #60]
   87f88:	11000400 	add	w0, w0, #0x1
   87f8c:	b9003fa0 	str	w0, [x29, #60]
   87f90:	17ffff87 	b	87dac <CTranslationTable::CreateLevel3Table(unsigned long)+0x40>
   87f94:	f9401ba0 	ldr	x0, [x29, #48]
   87f98:	a8c47bfd 	ldp	x29, x30, [sp], #64
   87f9c:	d65f03c0 	ret

0000000000087fa0 <operator new(unsigned long)>:
   87fa0:	14000034 	b	88070 <malloc>
   87fa4:	d503201f 	nop
   87fa8:	d503201f 	nop
   87fac:	d503201f 	nop

0000000000087fb0 <operator new[](unsigned long)>:
   87fb0:	14000030 	b	88070 <malloc>
   87fb4:	d503201f 	nop
   87fb8:	d503201f 	nop
   87fbc:	d503201f 	nop

0000000000087fc0 <operator delete(void*)>:
   87fc0:	1400009c 	b	88230 <free>
   87fc4:	d503201f 	nop
   87fc8:	d503201f 	nop
   87fcc:	d503201f 	nop

0000000000087fd0 <operator delete[](void*)>:
   87fd0:	14000098 	b	88230 <free>
   87fd4:	d503201f 	nop
   87fd8:	d503201f 	nop
   87fdc:	d503201f 	nop

0000000000087fe0 <operator delete(void*, unsigned long)>:
   87fe0:	14000094 	b	88230 <free>
   87fe4:	d503201f 	nop
   87fe8:	d503201f 	nop
   87fec:	d503201f 	nop

0000000000087ff0 <operator delete[](void*, unsigned long)>:
   87ff0:	14000090 	b	88230 <free>
	...

0000000000088000 <mem_init>:
   88000:	f0000025 	adrp	x5, 8f000 <vtable for CDevice+0x720>
   88004:	9117a0a2 	add	x2, x5, #0x5e8
   88008:	8b010001 	add	x1, x0, x1
   8800c:	f158001f 	cmp	x0, #0x600, lsl #12
   88010:	d17fc023 	sub	x3, x1, #0xff0, lsl #12
   88014:	d2a00c06 	mov	x6, #0x600000              	// #6291456
   88018:	9270bc63 	and	x3, x3, #0xffffffffffff0000
   8801c:	9a862000 	csel	x0, x0, x6, cs  // cs = hs, nlast
   88020:	b2689fe4 	mov	x4, #0xffffffffff000000    	// #-16777216
   88024:	f902f4a0 	str	x0, [x5, #1512]
   88028:	8b040024 	add	x4, x1, x4
   8802c:	a9008c44 	stp	x4, x3, [x2, #8]
   88030:	f9000c41 	str	x1, [x2, #24]
   88034:	d65f03c0 	ret
   88038:	d503201f 	nop
   8803c:	d503201f 	nop

0000000000088040 <mem_get_size>:
   88040:	f0000020 	adrp	x0, 8f000 <vtable for CDevice+0x720>
   88044:	9117a001 	add	x1, x0, #0x5e8
   88048:	f942f403 	ldr	x3, [x0, #1512]
   8804c:	a9408022 	ldp	x2, x0, [x1, #8]
   88050:	f9400c21 	ldr	x1, [x1, #24]
   88054:	cb030042 	sub	x2, x2, x3
   88058:	cb000020 	sub	x0, x1, x0
   8805c:	8b000040 	add	x0, x2, x0
   88060:	d65f03c0 	ret
   88064:	d503201f 	nop
   88068:	d503201f 	nop
   8806c:	d503201f 	nop

0000000000088070 <malloc>:
   88070:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   88074:	910003fd 	mov	x29, sp
   88078:	a9025bf5 	stp	x21, x22, [sp, #32]
   8807c:	f0000035 	adrp	x21, 8f000 <vtable for CDevice+0x720>
   88080:	f942f6a1 	ldr	x1, [x21, #1512]
   88084:	a90153f3 	stp	x19, x20, [sp, #16]
   88088:	aa0003f4 	mov	x20, x0
   8808c:	b40009c1 	cbz	x1, 881c4 <malloc+0x154>
   88090:	9117a2a0 	add	x0, x21, #0x5e8
   88094:	b9402000 	ldr	w0, [x0, #32]
   88098:	35000800 	cbnz	w0, 88198 <malloc+0x128>
   8809c:	f0000022 	adrp	x2, 8f000 <vtable for CDevice+0x720>
   880a0:	91102053 	add	x19, x2, #0x408
   880a4:	b9440841 	ldr	w1, [x2, #1032]
   880a8:	34000141 	cbz	w1, 880d0 <malloc+0x60>
   880ac:	2a0103e1 	mov	w1, w1
   880b0:	eb01029f 	cmp	x20, x1
   880b4:	54000088 	b.hi	880c4 <malloc+0x54>  // b.pmore
   880b8:	14000029 	b	8815c <malloc+0xec>
   880bc:	eb14003f 	cmp	x1, x20
   880c0:	540004e2 	b.cs	8815c <malloc+0xec>  // b.hs, b.nlast
   880c4:	b8410e60 	ldr	w0, [x19, #16]!
   880c8:	2a0003e1 	mov	w1, w0
   880cc:	35ffff80 	cbnz	w0, 880bc <malloc+0x4c>
   880d0:	f942f6b6 	ldr	x22, [x21, #1512]
   880d4:	91007e80 	add	x0, x20, #0x1f
   880d8:	927cec00 	and	x0, x0, #0xfffffffffffffff0
   880dc:	9117a2a1 	add	x1, x21, #0x5e8
   880e0:	8b0002c0 	add	x0, x22, x0
   880e4:	eb0002df 	cmp	x22, x0
   880e8:	540007c2 	b.cs	881e0 <malloc+0x170>  // b.hs, b.nlast
   880ec:	91102043 	add	x3, x2, #0x408
   880f0:	f9400421 	ldr	x1, [x1, #8]
   880f4:	b9408063 	ldr	w3, [x3, #128]
   880f8:	cb030021 	sub	x1, x1, x3
   880fc:	eb01001f 	cmp	x0, x1
   88100:	54000708 	b.hi	881e0 <malloc+0x170>  // b.pmore
   88104:	f902f6a0 	str	x0, [x21, #1512]
   88108:	9117a2b5 	add	x21, x21, #0x5e8
   8810c:	5289a861 	mov	w1, #0x4d43                	// #19779
   88110:	72a84981 	movk	w1, #0x424c, lsl #16
   88114:	290052c1 	stp	w1, w20, [x22]
   88118:	b94022a0 	ldr	w0, [x21, #32]
   8811c:	350003a0 	cbnz	w0, 88190 <malloc+0x120>
   88120:	910042d3 	add	x19, x22, #0x10
   88124:	f90006df 	str	xzr, [x22, #8]
   88128:	f2400e7f 	tst	x19, #0xf
   8812c:	540000e0 	b.eq	88148 <malloc+0xd8>  // b.none
   88130:	b0000021 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   88134:	b0000020 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   88138:	52801662 	mov	w2, #0xb3                  	// #179
   8813c:	9121a021 	add	x1, x1, #0x868
   88140:	91234000 	add	x0, x0, #0x8d0
   88144:	9400013b 	bl	88630 <assertion_failed>
   88148:	aa1303e0 	mov	x0, x19
   8814c:	a94153f3 	ldp	x19, x20, [sp, #16]
   88150:	a9425bf5 	ldp	x21, x22, [sp, #32]
   88154:	a8c37bfd 	ldp	x29, x30, [sp], #48
   88158:	d65f03c0 	ret
   8815c:	f9400676 	ldr	x22, [x19, #8]
   88160:	aa0103f4 	mov	x20, x1
   88164:	b4fffb76 	cbz	x22, 880d0 <malloc+0x60>
   88168:	b94002c1 	ldr	w1, [x22]
   8816c:	5289a860 	mov	w0, #0x4d43                	// #19779
   88170:	72a84980 	movk	w0, #0x424c, lsl #16
   88174:	6b00003f 	cmp	w1, w0
   88178:	54000141 	b.ne	881a0 <malloc+0x130>  // b.any
   8817c:	f94006c0 	ldr	x0, [x22, #8]
   88180:	f9000660 	str	x0, [x19, #8]
   88184:	9117a2b5 	add	x21, x21, #0x5e8
   88188:	b94022a0 	ldr	w0, [x21, #32]
   8818c:	34fffca0 	cbz	w0, 88120 <malloc+0xb0>
   88190:	97fffd78 	bl	87770 <LeaveCritical>
   88194:	17ffffe3 	b	88120 <malloc+0xb0>
   88198:	97fffd3e 	bl	87690 <EnterCritical>
   8819c:	17ffffc0 	b	8809c <malloc+0x2c>
   881a0:	b0000021 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   881a4:	b0000020 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   881a8:	52801142 	mov	w2, #0x8a                  	// #138
   881ac:	91224000 	add	x0, x0, #0x890
   881b0:	9121a021 	add	x1, x1, #0x868
   881b4:	9400011f 	bl	88630 <assertion_failed>
   881b8:	f94006c0 	ldr	x0, [x22, #8]
   881bc:	f9000660 	str	x0, [x19, #8]
   881c0:	17fffff1 	b	88184 <malloc+0x114>
   881c4:	b0000021 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   881c8:	b0000020 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   881cc:	52800e02 	mov	w2, #0x70                  	// #112
   881d0:	9121a021 	add	x1, x1, #0x868
   881d4:	9121e000 	add	x0, x0, #0x878
   881d8:	94000116 	bl	88630 <assertion_failed>
   881dc:	17ffffad 	b	88090 <malloc+0x20>
   881e0:	9117a2b5 	add	x21, x21, #0x5e8
   881e4:	91102042 	add	x2, x2, #0x408
   881e8:	b94022a0 	ldr	w0, [x21, #32]
   881ec:	b900805f 	str	wzr, [x2, #128]
   881f0:	34000040 	cbz	w0, 881f8 <malloc+0x188>
   881f4:	97fffd5f 	bl	87770 <LeaveCritical>
   881f8:	94000b1a 	bl	8ae60 <CLogger::Get()>
   881fc:	d2800013 	mov	x19, #0x0                   	// #0
   88200:	52800002 	mov	w2, #0x0                   	// #0
   88204:	b0000023 	adrp	x3, 8d000 <vtable for CGPIOPin+0x158>
   88208:	b0000021 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   8820c:	9122e063 	add	x3, x3, #0x8b8
   88210:	91232021 	add	x1, x1, #0x8c8
   88214:	94000a33 	bl	8aae0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   88218:	aa1303e0 	mov	x0, x19
   8821c:	a94153f3 	ldp	x19, x20, [sp, #16]
   88220:	a9425bf5 	ldp	x21, x22, [sp, #32]
   88224:	a8c37bfd 	ldp	x29, x30, [sp], #48
   88228:	d65f03c0 	ret
   8822c:	d503201f 	nop

0000000000088230 <free>:
   88230:	b4000600 	cbz	x0, 882f0 <free+0xc0>
   88234:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   88238:	910003fd 	mov	x29, sp
   8823c:	a90153f3 	stp	x19, x20, [sp, #16]
   88240:	aa0003f4 	mov	x20, x0
   88244:	f90017f6 	str	x22, [sp, #40]
   88248:	5289a860 	mov	w0, #0x4d43                	// #19779
   8824c:	72a84980 	movk	w0, #0x424c, lsl #16
   88250:	b85f0281 	ldur	w1, [x20, #-16]
   88254:	d1004296 	sub	x22, x20, #0x10
   88258:	6b00003f 	cmp	w1, w0
   8825c:	54000221 	b.ne	882a0 <free+0x70>  // b.any
   88260:	f0000020 	adrp	x0, 8f000 <vtable for CDevice+0x720>
   88264:	91102013 	add	x19, x0, #0x408
   88268:	b9440801 	ldr	w1, [x0, #1032]
   8826c:	34000121 	cbz	w1, 88290 <free+0x60>
   88270:	b85f4280 	ldur	w0, [x20, #-12]
   88274:	6b00003f 	cmp	w1, w0
   88278:	54000061 	b.ne	88284 <free+0x54>  // b.any
   8827c:	14000010 	b	882bc <free+0x8c>
   88280:	540001e0 	b.eq	882bc <free+0x8c>  // b.none
   88284:	b8410e61 	ldr	w1, [x19, #16]!
   88288:	6b00003f 	cmp	w1, w0
   8828c:	35ffffa1 	cbnz	w1, 88280 <free+0x50>
   88290:	a94153f3 	ldp	x19, x20, [sp, #16]
   88294:	f94017f6 	ldr	x22, [sp, #40]
   88298:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8829c:	d65f03c0 	ret
   882a0:	b0000021 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   882a4:	b0000020 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   882a8:	52801802 	mov	w2, #0xc0                  	// #192
   882ac:	9121a021 	add	x1, x1, #0x868
   882b0:	91224000 	add	x0, x0, #0x890
   882b4:	940000df 	bl	88630 <assertion_failed>
   882b8:	17ffffea 	b	88260 <free+0x30>
   882bc:	f90013b5 	str	x21, [x29, #32]
   882c0:	f0000035 	adrp	x21, 8f000 <vtable for CDevice+0x720>
   882c4:	9117a2b5 	add	x21, x21, #0x5e8
   882c8:	b94022a0 	ldr	w0, [x21, #32]
   882cc:	35000140 	cbnz	w0, 882f4 <free+0xc4>
   882d0:	f9400660 	ldr	x0, [x19, #8]
   882d4:	f81f8280 	stur	x0, [x20, #-8]
   882d8:	f9000676 	str	x22, [x19, #8]
   882dc:	f94013b5 	ldr	x21, [x29, #32]
   882e0:	a94153f3 	ldp	x19, x20, [sp, #16]
   882e4:	f94017f6 	ldr	x22, [sp, #40]
   882e8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   882ec:	d65f03c0 	ret
   882f0:	d65f03c0 	ret
   882f4:	97fffce7 	bl	87690 <EnterCritical>
   882f8:	f9400661 	ldr	x1, [x19, #8]
   882fc:	b94022a0 	ldr	w0, [x21, #32]
   88300:	f81f8281 	stur	x1, [x20, #-8]
   88304:	f9000676 	str	x22, [x19, #8]
   88308:	f94013b5 	ldr	x21, [x29, #32]
   8830c:	34fffc20 	cbz	w0, 88290 <free+0x60>
   88310:	a94153f3 	ldp	x19, x20, [sp, #16]
   88314:	f94017f6 	ldr	x22, [sp, #40]
   88318:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8831c:	17fffd15 	b	87770 <LeaveCritical>

0000000000088320 <calloc>:
   88320:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   88324:	910003fd 	mov	x29, sp
   88328:	a90153f3 	stp	x19, x20, [sp, #16]
   8832c:	9b007c33 	mul	x19, x1, x0
   88330:	f100027f 	cmp	x19, #0x0
   88334:	9a9f1673 	csinc	x19, x19, xzr, ne  // ne = any
   88338:	eb00027f 	cmp	x19, x0
   8833c:	54000183 	b.cc	8836c <calloc+0x4c>  // b.lo, b.ul, b.last
   88340:	aa1303e0 	mov	x0, x19
   88344:	97ffff4b 	bl	88070 <malloc>
   88348:	aa0003f4 	mov	x20, x0
   8834c:	b4000080 	cbz	x0, 8835c <calloc+0x3c>
   88350:	aa1303e2 	mov	x2, x19
   88354:	52800001 	mov	w1, #0x0                   	// #0
   88358:	97fff96e 	bl	86910 <memset>
   8835c:	aa1403e0 	mov	x0, x20
   88360:	a94153f3 	ldp	x19, x20, [sp, #16]
   88364:	a8c27bfd 	ldp	x29, x30, [sp], #32
   88368:	d65f03c0 	ret
   8836c:	b0000021 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   88370:	b0000020 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   88374:	52801c42 	mov	w2, #0xe2                  	// #226
   88378:	9121a021 	add	x1, x1, #0x868
   8837c:	91240000 	add	x0, x0, #0x900
   88380:	940000ac 	bl	88630 <assertion_failed>
   88384:	17ffffef 	b	88340 <calloc+0x20>
   88388:	d503201f 	nop
   8838c:	d503201f 	nop

0000000000088390 <realloc>:
   88390:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   88394:	910003fd 	mov	x29, sp
   88398:	f9000ff4 	str	x20, [sp, #24]
   8839c:	aa0103f4 	mov	x20, x1
   883a0:	b40005a0 	cbz	x0, 88454 <realloc+0xc4>
   883a4:	f9000bb3 	str	x19, [x29, #16]
   883a8:	b40005e1 	cbz	x1, 88464 <realloc+0xd4>
   883ac:	aa0003f3 	mov	x19, x0
   883b0:	f90013b5 	str	x21, [x29, #32]
   883b4:	5289a860 	mov	w0, #0x4d43                	// #19779
   883b8:	72a84980 	movk	w0, #0x424c, lsl #16
   883bc:	d1004275 	sub	x21, x19, #0x10
   883c0:	b85f0261 	ldur	w1, [x19, #-16]
   883c4:	6b00003f 	cmp	w1, w0
   883c8:	54000141 	b.ne	883f0 <realloc+0x60>  // b.any
   883cc:	b94006a0 	ldr	w0, [x21, #4]
   883d0:	eb14001f 	cmp	x0, x20
   883d4:	54000203 	b.cc	88414 <realloc+0x84>  // b.lo, b.ul, b.last
   883d8:	f94013b5 	ldr	x21, [x29, #32]
   883dc:	aa1303e0 	mov	x0, x19
   883e0:	f9400ff4 	ldr	x20, [sp, #24]
   883e4:	f9400bb3 	ldr	x19, [x29, #16]
   883e8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   883ec:	d65f03c0 	ret
   883f0:	b0000021 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   883f4:	b0000020 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   883f8:	52801f82 	mov	w2, #0xfc                  	// #252
   883fc:	91224000 	add	x0, x0, #0x890
   88400:	9121a021 	add	x1, x1, #0x868
   88404:	9400008b 	bl	88630 <assertion_failed>
   88408:	b94006a0 	ldr	w0, [x21, #4]
   8840c:	eb14001f 	cmp	x0, x20
   88410:	54fffe42 	b.cs	883d8 <realloc+0x48>  // b.hs, b.nlast
   88414:	aa1403e0 	mov	x0, x20
   88418:	97ffff16 	bl	88070 <malloc>
   8841c:	aa0003f4 	mov	x20, x0
   88420:	b4000280 	cbz	x0, 88470 <realloc+0xe0>
   88424:	b94006a2 	ldr	w2, [x21, #4]
   88428:	aa1303e1 	mov	x1, x19
   8842c:	97fffacb 	bl	86f58 <memcpy>
   88430:	aa1303e0 	mov	x0, x19
   88434:	aa1403f3 	mov	x19, x20
   88438:	97ffff7e 	bl	88230 <free>
   8843c:	f94013b5 	ldr	x21, [x29, #32]
   88440:	aa1303e0 	mov	x0, x19
   88444:	f9400ff4 	ldr	x20, [sp, #24]
   88448:	f9400bb3 	ldr	x19, [x29, #16]
   8844c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   88450:	d65f03c0 	ret
   88454:	f9400ff4 	ldr	x20, [sp, #24]
   88458:	aa0103e0 	mov	x0, x1
   8845c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   88460:	17ffff04 	b	88070 <malloc>
   88464:	97ffff73 	bl	88230 <free>
   88468:	d2800013 	mov	x19, #0x0                   	// #0
   8846c:	17ffffdc 	b	883dc <realloc+0x4c>
   88470:	d2800013 	mov	x19, #0x0                   	// #0
   88474:	f94013b5 	ldr	x21, [x29, #32]
   88478:	17ffffd9 	b	883dc <realloc+0x4c>
   8847c:	d503201f 	nop

0000000000088480 <palloc>:
   88480:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   88484:	910003fd 	mov	x29, sp
   88488:	a90153f3 	stp	x19, x20, [sp, #16]
   8848c:	f0000033 	adrp	x19, 8f000 <vtable for CDevice+0x720>
   88490:	9117a260 	add	x0, x19, #0x5e8
   88494:	f9400800 	ldr	x0, [x0, #16]
   88498:	b4000620 	cbz	x0, 8855c <palloc+0xdc>
   8849c:	9117a260 	add	x0, x19, #0x5e8
   884a0:	b9402800 	ldr	w0, [x0, #40]
   884a4:	35000580 	cbnz	w0, 88554 <palloc+0xd4>
   884a8:	9117a260 	add	x0, x19, #0x5e8
   884ac:	f9401814 	ldr	x20, [x0, #48]
   884b0:	b4000394 	cbz	x20, 88520 <palloc+0xa0>
   884b4:	b9400281 	ldr	w1, [x20]
   884b8:	5289a860 	mov	w0, #0x4d43                	// #19779
   884bc:	72aa08e0 	movk	w0, #0x5047, lsl #16
   884c0:	6b00003f 	cmp	w1, w0
   884c4:	54000161 	b.ne	884f0 <palloc+0x70>  // b.any
   884c8:	9117a273 	add	x19, x19, #0x5e8
   884cc:	f9400680 	ldr	x0, [x20, #8]
   884d0:	b900029f 	str	wzr, [x20]
   884d4:	b9402a61 	ldr	w1, [x19, #40]
   884d8:	f9001a60 	str	x0, [x19, #48]
   884dc:	35000321 	cbnz	w1, 88540 <palloc+0xc0>
   884e0:	aa1403e0 	mov	x0, x20
   884e4:	a94153f3 	ldp	x19, x20, [sp, #16]
   884e8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   884ec:	d65f03c0 	ret
   884f0:	9117a273 	add	x19, x19, #0x5e8
   884f4:	b0000021 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   884f8:	b0000020 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   884fc:	9121a021 	add	x1, x1, #0x868
   88500:	9124c000 	add	x0, x0, #0x930
   88504:	528023e2 	mov	w2, #0x11f                 	// #287
   88508:	9400004a 	bl	88630 <assertion_failed>
   8850c:	b900029f 	str	wzr, [x20]
   88510:	f9400680 	ldr	x0, [x20, #8]
   88514:	b9402a61 	ldr	w1, [x19, #40]
   88518:	f9001a60 	str	x0, [x19, #48]
   8851c:	17fffff0 	b	884dc <palloc+0x5c>
   88520:	a9410c14 	ldp	x20, x3, [x0, #16]
   88524:	b9402801 	ldr	w1, [x0, #40]
   88528:	91404282 	add	x2, x20, #0x10, lsl #12
   8852c:	f9000802 	str	x2, [x0, #16]
   88530:	eb03005f 	cmp	x2, x3
   88534:	54fffd49 	b.ls	884dc <palloc+0x5c>  // b.plast
   88538:	d2800014 	mov	x20, #0x0                   	// #0
   8853c:	34fffd21 	cbz	w1, 884e0 <palloc+0x60>
   88540:	97fffc8c 	bl	87770 <LeaveCritical>
   88544:	aa1403e0 	mov	x0, x20
   88548:	a94153f3 	ldp	x19, x20, [sp, #16]
   8854c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   88550:	d65f03c0 	ret
   88554:	97fffc4f 	bl	87690 <EnterCritical>
   88558:	17ffffd4 	b	884a8 <palloc+0x28>
   8855c:	b0000021 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   88560:	b0000020 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   88564:	52802222 	mov	w2, #0x111                 	// #273
   88568:	9121a021 	add	x1, x1, #0x868
   8856c:	91246000 	add	x0, x0, #0x918
   88570:	94000030 	bl	88630 <assertion_failed>
   88574:	17ffffca 	b	8849c <palloc+0x1c>
   88578:	d503201f 	nop
   8857c:	d503201f 	nop

0000000000088580 <pfree>:
   88580:	b4000420 	cbz	x0, 88604 <pfree+0x84>
   88584:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   88588:	910003fd 	mov	x29, sp
   8858c:	f9000ff4 	str	x20, [sp, #24]
   88590:	f0000034 	adrp	x20, 8f000 <vtable for CDevice+0x720>
   88594:	9117a294 	add	x20, x20, #0x5e8
   88598:	b9402a81 	ldr	w1, [x20, #40]
   8859c:	35000141 	cbnz	w1, 885c4 <pfree+0x44>
   885a0:	f9401a81 	ldr	x1, [x20, #48]
   885a4:	5289a862 	mov	w2, #0x4d43                	// #19779
   885a8:	72aa08e2 	movk	w2, #0x5047, lsl #16
   885ac:	b9000002 	str	w2, [x0]
   885b0:	f9000401 	str	x1, [x0, #8]
   885b4:	f9001a80 	str	x0, [x20, #48]
   885b8:	f9400ff4 	ldr	x20, [sp, #24]
   885bc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   885c0:	d65f03c0 	ret
   885c4:	f9000bb3 	str	x19, [x29, #16]
   885c8:	aa0003f3 	mov	x19, x0
   885cc:	2a0103e0 	mov	w0, w1
   885d0:	97fffc30 	bl	87690 <EnterCritical>
   885d4:	b9402a80 	ldr	w0, [x20, #40]
   885d8:	5289a861 	mov	w1, #0x4d43                	// #19779
   885dc:	72aa08e1 	movk	w1, #0x5047, lsl #16
   885e0:	b9000261 	str	w1, [x19]
   885e4:	f9401a82 	ldr	x2, [x20, #48]
   885e8:	f9000662 	str	x2, [x19, #8]
   885ec:	f9001a93 	str	x19, [x20, #48]
   885f0:	f9400bb3 	ldr	x19, [x29, #16]
   885f4:	34fffe20 	cbz	w0, 885b8 <pfree+0x38>
   885f8:	f9400ff4 	ldr	x20, [sp, #24]
   885fc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   88600:	17fffc5c 	b	87770 <LeaveCritical>
   88604:	d65f03c0 	ret
	...

0000000000088610 <_GLOBAL__sub_I_mem_init>:
   88610:	f0000020 	adrp	x0, 8f000 <vtable for CDevice+0x720>
   88614:	9117a000 	add	x0, x0, #0x5e8
   88618:	52800021 	mov	w1, #0x1                   	// #1
   8861c:	b9002001 	str	w1, [x0, #32]
   88620:	b9002801 	str	w1, [x0, #40]
   88624:	d65f03c0 	ret
	...

0000000000088630 <assertion_failed>:
   88630:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   88634:	910003fd 	mov	x29, sp
   88638:	a90153f3 	stp	x19, x20, [sp, #16]
   8863c:	aa0003f4 	mov	x20, x0
   88640:	a9025bf5 	stp	x21, x22, [sp, #32]
   88644:	aa0103f5 	mov	x21, x1
   88648:	2a0203f6 	mov	w22, w2
   8864c:	910003f3 	mov	x19, sp
   88650:	9400084c 	bl	8a780 <CInterruptSystem::DisableFIQ()>
   88654:	d50341ff 	msr	daifclr, #0x1
   88658:	9100c3a0 	add	x0, x29, #0x30
   8865c:	97ffefb9 	bl	84540 <CString::CString()>
   88660:	2a1603e3 	mov	w3, w22
   88664:	aa1503e2 	mov	x2, x21
   88668:	b0000021 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   8866c:	91256021 	add	x1, x1, #0x958
   88670:	9100c3a0 	add	x0, x29, #0x30
   88674:	97fff46f 	bl	85830 <CString::Format(char const*, ...)>
   88678:	9100c3a0 	add	x0, x29, #0x30
   8867c:	97ffefcd 	bl	845b0 <CString::operator char const*() const>
   88680:	aa0003e1 	mov	x1, x0
   88684:	aa1303e0 	mov	x0, x19
   88688:	94000232 	bl	88f50 <debug_stacktrace(unsigned long const*, char const*)>
   8868c:	940009f5 	bl	8ae60 <CLogger::Get()>
   88690:	aa0003f3 	mov	x19, x0
   88694:	9100c3a0 	add	x0, x29, #0x30
   88698:	97ffefc6 	bl	845b0 <CString::operator char const*() const>
   8869c:	aa1403e4 	mov	x4, x20
   886a0:	aa0003e1 	mov	x1, x0
   886a4:	b0000023 	adrp	x3, 8d000 <vtable for CGPIOPin+0x158>
   886a8:	91258063 	add	x3, x3, #0x960
   886ac:	52800002 	mov	w2, #0x0                   	// #0
   886b0:	aa1303e0 	mov	x0, x19
   886b4:	9400090b 	bl	8aae0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   886b8:	9100c3a0 	add	x0, x29, #0x30
   886bc:	97ffef61 	bl	84440 <CString::~CString()>
   886c0:	a94153f3 	ldp	x19, x20, [sp, #16]
   886c4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   886c8:	a8c57bfd 	ldp	x29, x30, [sp], #80
   886cc:	d65f03c0 	ret

00000000000886d0 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>:
   886d0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   886d4:	d2c02003 	mov	x3, #0x10000000000         	// #1099511627776
   886d8:	52800001 	mov	w1, #0x0                   	// #0
   886dc:	910003fd 	mov	x29, sp
   886e0:	a90153f3 	stp	x19, x20, [sp, #16]
   886e4:	aa0003f3 	mov	x19, x0
   886e8:	9100a3a0 	add	x0, x29, #0x28
   886ec:	f9401262 	ldr	x2, [x19, #32]
   886f0:	f800c043 	stur	x3, [x2, #12]
   886f4:	9400010b 	bl	88b20 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   886f8:	f9401262 	ldr	x2, [x19, #32]
   886fc:	52808104 	mov	w4, #0x408                 	// #1032
   88700:	52808283 	mov	w3, #0x414                 	// #1044
   88704:	52900161 	mov	w1, #0x800b                	// #32779
   88708:	72a00081 	movk	w1, #0x4, lsl #16
   8870c:	9100a3a0 	add	x0, x29, #0x28
   88710:	9400010c 	bl	88b40 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   88714:	72001c14 	ands	w20, w0, #0xff
   88718:	54000080 	b.eq	88728 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x58>  // b.none
   8871c:	f9401260 	ldr	x0, [x19, #32]
   88720:	b9400c00 	ldr	w0, [x0, #12]
   88724:	34000040 	cbz	w0, 8872c <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x5c>
   88728:	52800014 	mov	w20, #0x0                   	// #0
   8872c:	9100a3a0 	add	x0, x29, #0x28
   88730:	94000100 	bl	88b30 <CBcmPropertyTags::~CBcmPropertyTags()>
   88734:	2a1403e0 	mov	w0, w20
   88738:	a94153f3 	ldp	x19, x20, [sp, #16]
   8873c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   88740:	d65f03c0 	ret
   88744:	d503201f 	nop
   88748:	d503201f 	nop
   8874c:	d503201f 	nop

0000000000088750 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   88750:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   88754:	7100003f 	cmp	w1, #0x0
   88758:	7a401844 	ccmp	w2, #0x0, #0x4, ne  // ne = any
   8875c:	910003fd 	mov	x29, sp
   88760:	f9000bf3 	str	x19, [sp, #16]
   88764:	aa0003f3 	mov	x19, x0
   88768:	29000801 	stp	w1, w2, [x0]
   8876c:	29011404 	stp	w4, w5, [x0, #8]
   88770:	b9001003 	str	w3, [x0, #16]
   88774:	f801401f 	stur	xzr, [x0, #20]
   88778:	f801c01f 	stur	xzr, [x0, #28]
   8877c:	b900241f 	str	wzr, [x0, #36]
   88780:	54000281 	b.ne	887d0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x80>  // b.any
   88784:	52800001 	mov	w1, #0x0                   	// #0
   88788:	910083a0 	add	x0, x29, #0x20
   8878c:	940000e5 	bl	88b20 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   88790:	52800004 	mov	w4, #0x0                   	// #0
   88794:	52800283 	mov	w3, #0x14                  	// #20
   88798:	9100a3a2 	add	x2, x29, #0x28
   8879c:	52800061 	mov	w1, #0x3                   	// #3
   887a0:	72a00081 	movk	w1, #0x4, lsl #16
   887a4:	910083a0 	add	x0, x29, #0x20
   887a8:	940000e6 	bl	88b40 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   887ac:	72001c1f 	tst	w0, #0xff
   887b0:	540004a1 	b.ne	88844 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xf4>  // b.any
   887b4:	d2805000 	mov	x0, #0x280                 	// #640
   887b8:	f2c03c00 	movk	x0, #0x1e0, lsl #32
   887bc:	f9000260 	str	x0, [x19]
   887c0:	910083a0 	add	x0, x29, #0x20
   887c4:	940000db 	bl	88b30 <CBcmPropertyTags::~CBcmPropertyTags()>
   887c8:	b9400a64 	ldr	w4, [x19, #8]
   887cc:	b9401263 	ldr	w3, [x19, #16]
   887d0:	34000344 	cbz	w4, 88838 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xe8>
   887d4:	b9400e60 	ldr	w0, [x19, #12]
   887d8:	34000300 	cbz	w0, 88838 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xe8>
   887dc:	7100207f 	cmp	w3, #0x8
   887e0:	54000108 	b.hi	88800 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xb0>  // b.pmore
   887e4:	d2808280 	mov	x0, #0x414                 	// #1044
   887e8:	97fffdf2 	bl	87fb0 <operator new[](unsigned long)>
   887ec:	f9001260 	str	x0, [x19, #32]
   887f0:	d2808002 	mov	x2, #0x400                 	// #1024
   887f4:	52800001 	mov	w1, #0x0                   	// #0
   887f8:	91005000 	add	x0, x0, #0x14
   887fc:	97fff845 	bl	86910 <memset>
   88800:	d2800e02 	mov	x2, #0x70                  	// #112
   88804:	9100a260 	add	x0, x19, #0x28
   88808:	f0000021 	adrp	x1, 8f000 <vtable for CDevice+0x720>
   8880c:	91124021 	add	x1, x1, #0x490
   88810:	97fff9d2 	bl	86f58 <memcpy>
   88814:	29400e64 	ldp	w4, w3, [x19]
   88818:	29068e64 	stp	w4, w3, [x19, #52]
   8881c:	29410662 	ldp	w2, w1, [x19, #8]
   88820:	29090662 	stp	w2, w1, [x19, #72]
   88824:	b9401260 	ldr	w0, [x19, #16]
   88828:	b9005e60 	str	w0, [x19, #92]
   8882c:	f9400bf3 	ldr	x19, [sp, #16]
   88830:	a8c47bfd 	ldp	x29, x30, [sp], #64
   88834:	d65f03c0 	ret
   88838:	29400261 	ldp	w1, w0, [x19]
   8883c:	29010261 	stp	w1, w0, [x19, #8]
   88840:	17ffffe7 	b	887dc <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x8c>
   88844:	294683a1 	ldp	w1, w0, [x29, #52]
   88848:	29000261 	stp	w1, w0, [x19]
   8884c:	510a0021 	sub	w1, w1, #0x280
   88850:	51078000 	sub	w0, w0, #0x1e0
   88854:	7114003f 	cmp	w1, #0x500
   88858:	52804b01 	mov	w1, #0x258                 	// #600
   8885c:	7a419002 	ccmp	w0, w1, #0x2, ls  // ls = plast
   88860:	54fffaa8 	b.hi	887b4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x64>  // b.pmore
   88864:	17ffffd7 	b	887c0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x70>
   88868:	d503201f 	nop
   8886c:	d503201f 	nop

0000000000088870 <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   88870:	f9401000 	ldr	x0, [x0, #32]
   88874:	d2800281 	mov	x1, #0x14                  	// #20
   88878:	17fffdda 	b	87fe0 <operator delete(void*, unsigned long)>
   8887c:	d503201f 	nop

0000000000088880 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
   88880:	12003c43 	and	w3, w2, #0xffff
   88884:	b9401002 	ldr	w2, [x0, #16]
   88888:	12001c21 	and	w1, w1, #0xff
   8888c:	7100205f 	cmp	w2, #0x8
   88890:	54000168 	b.hi	888bc <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)+0x3c>  // b.pmore
   88894:	f9401004 	ldr	x4, [x0, #32]
   88898:	13057c62 	asr	w2, w3, #5
   8889c:	530b7c60 	lsr	w0, w3, #11
   888a0:	530d1063 	ubfiz	w3, w3, #19, #5
   888a4:	53161442 	ubfiz	w2, w2, #10, #6
   888a8:	8b210881 	add	x1, x4, w1, uxtb #2
   888ac:	32081c42 	orr	w2, w2, #0xff000000
   888b0:	2a000c63 	orr	w3, w3, w0, lsl #3
   888b4:	2a030042 	orr	w2, w2, w3
   888b8:	b9001422 	str	w2, [x1, #20]
   888bc:	d65f03c0 	ret

00000000000888c0 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
   888c0:	b9401003 	ldr	w3, [x0, #16]
   888c4:	12001c21 	and	w1, w1, #0xff
   888c8:	7100207f 	cmp	w3, #0x8
   888cc:	54000088 	b.hi	888dc <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)+0x1c>  // b.pmore
   888d0:	f9401000 	ldr	x0, [x0, #32]
   888d4:	8b210801 	add	x1, x0, w1, uxtb #2
   888d8:	b9001422 	str	w2, [x1, #20]
   888dc:	d65f03c0 	ret

00000000000888e0 <CBcmFrameBuffer::Initialize()>:
   888e0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   888e4:	52800001 	mov	w1, #0x0                   	// #0
   888e8:	910003fd 	mov	x29, sp
   888ec:	a90153f3 	stp	x19, x20, [sp, #16]
   888f0:	aa0003f3 	mov	x19, x0
   888f4:	9100a3a0 	add	x0, x29, #0x28
   888f8:	9400008a 	bl	88b20 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   888fc:	52800e02 	mov	w2, #0x70                  	// #112
   88900:	9100a261 	add	x1, x19, #0x28
   88904:	9100a3a0 	add	x0, x29, #0x28
   88908:	940000c2 	bl	88c10 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   8890c:	72001c14 	ands	w20, w0, #0xff
   88910:	54000340 	b.eq	88978 <CBcmFrameBuffer::Initialize()+0x98>  // b.none
   88914:	b9403660 	ldr	w0, [x19, #52]
   88918:	340002e0 	cbz	w0, 88974 <CBcmFrameBuffer::Initialize()+0x94>
   8891c:	b9403a60 	ldr	w0, [x19, #56]
   88920:	340002a0 	cbz	w0, 88974 <CBcmFrameBuffer::Initialize()+0x94>
   88924:	b9404a60 	ldr	w0, [x19, #72]
   88928:	34000260 	cbz	w0, 88974 <CBcmFrameBuffer::Initialize()+0x94>
   8892c:	b9404e60 	ldr	w0, [x19, #76]
   88930:	34000220 	cbz	w0, 88974 <CBcmFrameBuffer::Initialize()+0x94>
   88934:	b9405e60 	ldr	w0, [x19, #92]
   88938:	340001e0 	cbz	w0, 88974 <CBcmFrameBuffer::Initialize()+0x94>
   8893c:	b9408260 	ldr	w0, [x19, #128]
   88940:	340001a0 	cbz	w0, 88974 <CBcmFrameBuffer::Initialize()+0x94>
   88944:	b9408663 	ldr	w3, [x19, #132]
   88948:	12007400 	and	w0, w0, #0x3fffffff
   8894c:	b9409662 	ldr	w2, [x19, #148]
   88950:	b9401261 	ldr	w1, [x19, #16]
   88954:	29028e60 	stp	w0, w3, [x19, #20]
   88958:	b9001e62 	str	w2, [x19, #28]
   8895c:	7100203f 	cmp	w1, #0x8
   88960:	540000c8 	b.hi	88978 <CBcmFrameBuffer::Initialize()+0x98>  // b.pmore
   88964:	aa1303e0 	mov	x0, x19
   88968:	97ffff5a 	bl	886d0 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
   8896c:	12001c14 	and	w20, w0, #0xff
   88970:	14000002 	b	88978 <CBcmFrameBuffer::Initialize()+0x98>
   88974:	52800014 	mov	w20, #0x0                   	// #0
   88978:	9100a3a0 	add	x0, x29, #0x28
   8897c:	9400006d 	bl	88b30 <CBcmPropertyTags::~CBcmPropertyTags()>
   88980:	2a1403e0 	mov	w0, w20
   88984:	a94153f3 	ldp	x19, x20, [sp, #16]
   88988:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8898c:	d65f03c0 	ret

0000000000088990 <CBcmFrameBuffer::GetWidth() const>:
   88990:	b9400000 	ldr	w0, [x0]
   88994:	d65f03c0 	ret
   88998:	d503201f 	nop
   8899c:	d503201f 	nop

00000000000889a0 <CBcmFrameBuffer::GetHeight() const>:
   889a0:	b9400400 	ldr	w0, [x0, #4]
   889a4:	d65f03c0 	ret
   889a8:	d503201f 	nop
   889ac:	d503201f 	nop

00000000000889b0 <CBcmFrameBuffer::GetVirtWidth() const>:
   889b0:	b9400800 	ldr	w0, [x0, #8]
   889b4:	d65f03c0 	ret
   889b8:	d503201f 	nop
   889bc:	d503201f 	nop

00000000000889c0 <CBcmFrameBuffer::GetVirtHeight() const>:
   889c0:	b9400c00 	ldr	w0, [x0, #12]
   889c4:	d65f03c0 	ret
   889c8:	d503201f 	nop
   889cc:	d503201f 	nop

00000000000889d0 <CBcmFrameBuffer::GetPitch() const>:
   889d0:	b9401c00 	ldr	w0, [x0, #28]
   889d4:	d65f03c0 	ret
   889d8:	d503201f 	nop
   889dc:	d503201f 	nop

00000000000889e0 <CBcmFrameBuffer::GetDepth() const>:
   889e0:	b9401000 	ldr	w0, [x0, #16]
   889e4:	d65f03c0 	ret
   889e8:	d503201f 	nop
   889ec:	d503201f 	nop

00000000000889f0 <CBcmFrameBuffer::GetBuffer() const>:
   889f0:	b9401400 	ldr	w0, [x0, #20]
   889f4:	d65f03c0 	ret
   889f8:	d503201f 	nop
   889fc:	d503201f 	nop

0000000000088a00 <CBcmFrameBuffer::GetSize() const>:
   88a00:	b9401800 	ldr	w0, [x0, #24]
   88a04:	d65f03c0 	ret
   88a08:	d503201f 	nop
   88a0c:	d503201f 	nop

0000000000088a10 <CBcmFrameBuffer::UpdatePalette()>:
   88a10:	b9401001 	ldr	w1, [x0, #16]
   88a14:	7100203f 	cmp	w1, #0x8
   88a18:	54000069 	b.ls	88a24 <CBcmFrameBuffer::UpdatePalette()+0x14>  // b.plast
   88a1c:	52800020 	mov	w0, #0x1                   	// #1
   88a20:	d65f03c0 	ret
   88a24:	17ffff2b 	b	886d0 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
   88a28:	d503201f 	nop
   88a2c:	d503201f 	nop

0000000000088a30 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
   88a30:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   88a34:	910003fd 	mov	x29, sp
   88a38:	a90153f3 	stp	x19, x20, [sp, #16]
   88a3c:	9100c3a0 	add	x0, x29, #0x30
   88a40:	2a0103f4 	mov	w20, w1
   88a44:	f90013f5 	str	x21, [sp, #32]
   88a48:	52800001 	mov	w1, #0x0                   	// #0
   88a4c:	2a0203f5 	mov	w21, w2
   88a50:	94000034 	bl	88b20 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   88a54:	2908d7b4 	stp	w20, w21, [x29, #68]
   88a58:	52800104 	mov	w4, #0x8                   	// #8
   88a5c:	52800283 	mov	w3, #0x14                  	// #20
   88a60:	9100e3a2 	add	x2, x29, #0x38
   88a64:	52900121 	mov	w1, #0x8009                	// #32777
   88a68:	72a00081 	movk	w1, #0x4, lsl #16
   88a6c:	9100c3a0 	add	x0, x29, #0x30
   88a70:	94000034 	bl	88b40 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   88a74:	72001c13 	ands	w19, w0, #0xff
   88a78:	540000a0 	b.eq	88a8c <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x5c>  // b.none
   88a7c:	b94047a0 	ldr	w0, [x29, #68]
   88a80:	52800013 	mov	w19, #0x0                   	// #0
   88a84:	6b14001f 	cmp	w0, w20
   88a88:	54000100 	b.eq	88aa8 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x78>  // b.none
   88a8c:	9100c3a0 	add	x0, x29, #0x30
   88a90:	94000028 	bl	88b30 <CBcmPropertyTags::~CBcmPropertyTags()>
   88a94:	2a1303e0 	mov	w0, w19
   88a98:	f94013f5 	ldr	x21, [sp, #32]
   88a9c:	a94153f3 	ldp	x19, x20, [sp, #16]
   88aa0:	a8c57bfd 	ldp	x29, x30, [sp], #80
   88aa4:	d65f03c0 	ret
   88aa8:	b9404ba0 	ldr	w0, [x29, #72]
   88aac:	6b15001f 	cmp	w0, w21
   88ab0:	9100c3a0 	add	x0, x29, #0x30
   88ab4:	1a9f17f3 	cset	w19, eq  // eq = none
   88ab8:	9400001e 	bl	88b30 <CBcmPropertyTags::~CBcmPropertyTags()>
   88abc:	f94013f5 	ldr	x21, [sp, #32]
   88ac0:	2a1303e0 	mov	w0, w19
   88ac4:	a94153f3 	ldp	x19, x20, [sp, #16]
   88ac8:	a8c57bfd 	ldp	x29, x30, [sp], #80
   88acc:	d65f03c0 	ret

0000000000088ad0 <CBcmFrameBuffer::WaitForVerticalSync()>:
   88ad0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   88ad4:	52800001 	mov	w1, #0x0                   	// #0
   88ad8:	910003fd 	mov	x29, sp
   88adc:	f9000bf3 	str	x19, [sp, #16]
   88ae0:	9100a3a0 	add	x0, x29, #0x28
   88ae4:	9400000f 	bl	88b20 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   88ae8:	9100c3a2 	add	x2, x29, #0x30
   88aec:	52800004 	mov	w4, #0x0                   	// #0
   88af0:	52800203 	mov	w3, #0x10                  	// #16
   88af4:	529001c1 	mov	w1, #0x800e                	// #32782
   88af8:	72a00081 	movk	w1, #0x4, lsl #16
   88afc:	9100a3a0 	add	x0, x29, #0x28
   88b00:	94000010 	bl	88b40 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   88b04:	2a0003f3 	mov	w19, w0
   88b08:	9100a3a0 	add	x0, x29, #0x28
   88b0c:	94000009 	bl	88b30 <CBcmPropertyTags::~CBcmPropertyTags()>
   88b10:	2a1303e0 	mov	w0, w19
   88b14:	f9400bf3 	ldr	x19, [sp, #16]
   88b18:	a8c47bfd 	ldp	x29, x30, [sp], #64
   88b1c:	d65f03c0 	ret

0000000000088b20 <CBcmPropertyTags::CBcmPropertyTags(bool)>:
   88b20:	2a0103e2 	mov	w2, w1
   88b24:	52800101 	mov	w1, #0x8                   	// #8
   88b28:	14000fa2 	b	8c9b0 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>
   88b2c:	d503201f 	nop

0000000000088b30 <CBcmPropertyTags::~CBcmPropertyTags()>:
   88b30:	14000fa4 	b	8c9c0 <CBcmMailBox::~CBcmMailBox()>
   88b34:	d503201f 	nop
   88b38:	d503201f 	nop
   88b3c:	d503201f 	nop

0000000000088b40 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
   88b40:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   88b44:	910003fd 	mov	x29, sp
   88b48:	a90153f3 	stp	x19, x20, [sp, #16]
   88b4c:	aa0203f3 	mov	x19, x2
   88b50:	a9025bf5 	stp	x21, x22, [sp, #32]
   88b54:	2a0303f4 	mov	w20, w3
   88b58:	f9001bf7 	str	x23, [sp, #48]
   88b5c:	aa0003f6 	mov	x22, x0
   88b60:	2a0403f5 	mov	w21, w4
   88b64:	2a0103f7 	mov	w23, w1
   88b68:	b4000482 	cbz	x2, 88bf8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xb8>
   88b6c:	71003e9f 	cmp	w20, #0xf
   88b70:	54000389 	b.ls	88be0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xa0>  // b.plast
   88b74:	51003280 	sub	w0, w20, #0xc
   88b78:	12007ab5 	and	w21, w21, #0x7fffffff
   88b7c:	29000277 	stp	w23, w0, [x19]
   88b80:	2a1403e2 	mov	w2, w20
   88b84:	b9000a75 	str	w21, [x19, #8]
   88b88:	aa1303e1 	mov	x1, x19
   88b8c:	aa1603e0 	mov	x0, x22
   88b90:	94000020 	bl	88c10 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   88b94:	72001c00 	ands	w0, w0, #0xff
   88b98:	54000080 	b.eq	88ba8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x68>  // b.none
   88b9c:	b9400a61 	ldr	w1, [x19, #8]
   88ba0:	52800000 	mov	w0, #0x0                   	// #0
   88ba4:	37f800c1 	tbnz	w1, #31, 88bbc <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x7c>
   88ba8:	a94153f3 	ldp	x19, x20, [sp, #16]
   88bac:	a9425bf5 	ldp	x21, x22, [sp, #32]
   88bb0:	f9401bf7 	ldr	x23, [sp, #48]
   88bb4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   88bb8:	d65f03c0 	ret
   88bbc:	12007821 	and	w1, w1, #0x7fffffff
   88bc0:	b9000a61 	str	w1, [x19, #8]
   88bc4:	7100003f 	cmp	w1, #0x0
   88bc8:	f9401bf7 	ldr	x23, [sp, #48]
   88bcc:	1a9f07e0 	cset	w0, ne  // ne = any
   88bd0:	a94153f3 	ldp	x19, x20, [sp, #16]
   88bd4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   88bd8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   88bdc:	d65f03c0 	ret
   88be0:	b0000021 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   88be4:	9125e021 	add	x1, x1, #0x978
   88be8:	52800682 	mov	w2, #0x34                  	// #52
   88bec:	9100a020 	add	x0, x1, #0x28
   88bf0:	97fffe90 	bl	88630 <assertion_failed>
   88bf4:	17ffffe0 	b	88b74 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x34>
   88bf8:	b0000021 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   88bfc:	9125e021 	add	x1, x1, #0x978
   88c00:	52800662 	mov	w2, #0x33                  	// #51
   88c04:	91006020 	add	x0, x1, #0x18
   88c08:	97fffe8a 	bl	88630 <assertion_failed>
   88c0c:	17ffffd8 	b	88b6c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x2c>

0000000000088c10 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
   88c10:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   88c14:	910003fd 	mov	x29, sp
   88c18:	a90153f3 	stp	x19, x20, [sp, #16]
   88c1c:	2a0203f4 	mov	w20, w2
   88c20:	a9025bf5 	stp	x21, x22, [sp, #32]
   88c24:	aa0103f5 	mov	x21, x1
   88c28:	a90363f7 	stp	x23, x24, [sp, #48]
   88c2c:	f90023f9 	str	x25, [sp, #64]
   88c30:	aa0003f9 	mov	x25, x0
   88c34:	b40006c1 	cbz	x1, 88d0c <CBcmPropertyTags::GetTags(void*, unsigned int)+0xfc>
   88c38:	71003e9f 	cmp	w20, #0xf
   88c3c:	540005c9 	b.ls	88cf4 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xe4>  // b.plast
   88c40:	11003297 	add	w23, w20, #0xc
   88c44:	f24006ff 	tst	x23, #0x3
   88c48:	540004a1 	b.ne	88cdc <CBcmPropertyTags::GetTags(void*, unsigned int)+0xcc>  // b.any
   88c4c:	52800000 	mov	w0, #0x0                   	// #0
   88c50:	97fffa74 	bl	87620 <CMemorySystem::GetCoherentPage(unsigned int)>
   88c54:	aa0003f3 	mov	x19, x0
   88c58:	91002016 	add	x22, x0, #0x8
   88c5c:	2a1403f8 	mov	w24, w20
   88c60:	aa1503e1 	mov	x1, x21
   88c64:	aa1803e2 	mov	x2, x24
   88c68:	aa1603e0 	mov	x0, x22
   88c6c:	29007e77 	stp	w23, wzr, [x19]
   88c70:	97fff8ba 	bl	86f58 <memcpy>
   88c74:	b8344adf 	str	wzr, [x22, w20, uxtw]
   88c78:	d5033f9f 	dsb	sy
   88c7c:	32020674 	orr	w20, w19, #0xc0000000
   88c80:	aa1903e0 	mov	x0, x25
   88c84:	2a1403e1 	mov	w1, w20
   88c88:	94000f92 	bl	8cad0 <CBcmMailBox::WriteRead(unsigned int)>
   88c8c:	6b14001f 	cmp	w0, w20
   88c90:	54000100 	b.eq	88cb0 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xa0>  // b.none
   88c94:	52800000 	mov	w0, #0x0                   	// #0
   88c98:	a94153f3 	ldp	x19, x20, [sp, #16]
   88c9c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   88ca0:	a94363f7 	ldp	x23, x24, [sp, #48]
   88ca4:	f94023f9 	ldr	x25, [sp, #64]
   88ca8:	a8c57bfd 	ldp	x29, x30, [sp], #80
   88cac:	d65f03c0 	ret
   88cb0:	d5033fbf 	dmb	sy
   88cb4:	b9400661 	ldr	w1, [x19, #4]
   88cb8:	52b00000 	mov	w0, #0x80000000            	// #-2147483648
   88cbc:	6b00003f 	cmp	w1, w0
   88cc0:	54fffea1 	b.ne	88c94 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x84>  // b.any
   88cc4:	aa1803e2 	mov	x2, x24
   88cc8:	aa1603e1 	mov	x1, x22
   88ccc:	aa1503e0 	mov	x0, x21
   88cd0:	97fff8a2 	bl	86f58 <memcpy>
   88cd4:	52800020 	mov	w0, #0x1                   	// #1
   88cd8:	17fffff0 	b	88c98 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x88>
   88cdc:	b0000021 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   88ce0:	9125e021 	add	x1, x1, #0x978
   88ce4:	52800a62 	mov	w2, #0x53                  	// #83
   88ce8:	91024020 	add	x0, x1, #0x90
   88cec:	97fffe51 	bl	88630 <assertion_failed>
   88cf0:	17ffffd7 	b	88c4c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x3c>
   88cf4:	b0000021 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   88cf8:	9125e021 	add	x1, x1, #0x978
   88cfc:	52800a22 	mov	w2, #0x51                  	// #81
   88d00:	91018020 	add	x0, x1, #0x60
   88d04:	97fffe4b 	bl	88630 <assertion_failed>
   88d08:	17ffffce 	b	88c40 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x30>
   88d0c:	b0000021 	adrp	x1, 8d000 <vtable for CGPIOPin+0x158>
   88d10:	9125e021 	add	x1, x1, #0x978
   88d14:	52800a02 	mov	w2, #0x50                  	// #80
   88d18:	91014020 	add	x0, x1, #0x50
   88d1c:	97fffe45 	bl	88630 <assertion_failed>
   88d20:	17ffffc6 	b	88c38 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x28>
	...

0000000000088d30 <CCharGenerator::CCharGenerator()>:
   88d30:	52800101 	mov	w1, #0x8                   	// #8
   88d34:	b9000001 	str	w1, [x0]
   88d38:	d65f03c0 	ret
   88d3c:	d503201f 	nop

0000000000088d40 <CCharGenerator::~CCharGenerator()>:
   88d40:	d65f03c0 	ret
   88d44:	d503201f 	nop
   88d48:	d503201f 	nop
   88d4c:	d503201f 	nop

0000000000088d50 <CCharGenerator::GetCharWidth() const>:
   88d50:	b9400000 	ldr	w0, [x0]
   88d54:	d65f03c0 	ret
   88d58:	d503201f 	nop
   88d5c:	d503201f 	nop

0000000000088d60 <CCharGenerator::GetCharHeight() const>:
   88d60:	52800260 	mov	w0, #0x13                  	// #19
   88d64:	d65f03c0 	ret
   88d68:	d503201f 	nop
   88d6c:	d503201f 	nop

0000000000088d70 <CCharGenerator::GetUnderline() const>:
   88d70:	52800200 	mov	w0, #0x10                  	// #16
   88d74:	d65f03c0 	ret
   88d78:	d503201f 	nop
   88d7c:	d503201f 	nop

0000000000088d80 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>:
   88d80:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   88d84:	12001c21 	and	w1, w1, #0xff
   88d88:	910003fd 	mov	x29, sp
   88d8c:	f9000bf3 	str	x19, [sp, #16]
   88d90:	51008433 	sub	w19, w1, #0x21
   88d94:	71037a7f 	cmp	w19, #0xde
   88d98:	540002e8 	b.hi	88df4 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x74>  // b.pmore
   88d9c:	a901d7b4 	stp	x20, x21, [x29, #24]
   88da0:	2a0303f4 	mov	w20, w3
   88da4:	b9400000 	ldr	w0, [x0]
   88da8:	2a0203f5 	mov	w21, w2
   88dac:	6b02001f 	cmp	w0, w2
   88db0:	540002a9 	b.ls	88e04 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x84>  // b.plast
   88db4:	71003e9f 	cmp	w20, #0xf
   88db8:	540001c8 	b.hi	88df0 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x70>  // b.pmore
   88dbc:	b0000020 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   88dc0:	91288000 	add	x0, x0, #0xa20
   88dc4:	d37c7e73 	ubfiz	x19, x19, #4, #32
   88dc8:	52801002 	mov	w2, #0x80                  	// #128
   88dcc:	8b130013 	add	x19, x0, x19
   88dd0:	1ad52842 	asr	w2, w2, w21
   88dd4:	38744a60 	ldrb	w0, [x19, w20, uxtw]
   88dd8:	a941d7b4 	ldp	x20, x21, [x29, #24]
   88ddc:	6a02001f 	tst	w0, w2
   88de0:	1a9f07e0 	cset	w0, ne  // ne = any
   88de4:	f9400bf3 	ldr	x19, [sp, #16]
   88de8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   88dec:	d65f03c0 	ret
   88df0:	a941d7b4 	ldp	x20, x21, [x29, #24]
   88df4:	52800000 	mov	w0, #0x0                   	// #0
   88df8:	f9400bf3 	ldr	x19, [sp, #16]
   88dfc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   88e00:	d65f03c0 	ret
   88e04:	d0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   88e08:	d0000020 	adrp	x0, 8e000 <font_data+0x5e0>
   88e0c:	528009c2 	mov	w2, #0x4e                  	// #78
   88e10:	91204021 	add	x1, x1, #0x810
   88e14:	9120a000 	add	x0, x0, #0x828
   88e18:	97fffe06 	bl	88630 <assertion_failed>
   88e1c:	71003e9f 	cmp	w20, #0xf
   88e20:	54fffce9 	b.ls	88dbc <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x3c>  // b.plast
   88e24:	17fffff3 	b	88df0 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x70>
	...

0000000000088e30 <debug_hexdump(void const*, unsigned int, char const*)>:
   88e30:	d102c3ff 	sub	sp, sp, #0xb0
   88e34:	a9077bfd 	stp	x29, x30, [sp, #112]
   88e38:	9101c3fd 	add	x29, sp, #0x70
   88e3c:	f9004bf5 	str	x21, [sp, #144]
   88e40:	aa0203f5 	mov	x21, x2
   88e44:	f10002bf 	cmp	x21, #0x0
   88e48:	d0000022 	adrp	x2, 8e000 <font_data+0x5e0>
   88e4c:	91210042 	add	x2, x2, #0x840
   88e50:	a90853f3 	stp	x19, x20, [sp, #128]
   88e54:	9a950055 	csel	x21, x2, x21, eq  // eq = none
   88e58:	2a0103f4 	mov	w20, w1
   88e5c:	aa0003f3 	mov	x19, x0
   88e60:	94000800 	bl	8ae60 <CLogger::Get()>
   88e64:	d0000023 	adrp	x3, 8e000 <font_data+0x5e0>
   88e68:	aa1303e5 	mov	x5, x19
   88e6c:	2a1403e4 	mov	w4, w20
   88e70:	91212063 	add	x3, x3, #0x848
   88e74:	52800082 	mov	w2, #0x4                   	// #4
   88e78:	aa1503e1 	mov	x1, x21
   88e7c:	94000719 	bl	8aae0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   88e80:	340005f4 	cbz	w20, 88f3c <debug_hexdump(void const*, unsigned int, char const*)+0x10c>
   88e84:	a902dfb6 	stp	x22, x23, [x29, #40]
   88e88:	d0000036 	adrp	x22, 8e000 <font_data+0x5e0>
   88e8c:	9121c2d6 	add	x22, x22, #0x870
   88e90:	12000e97 	and	w23, w20, #0xf
   88e94:	14000003 	b	88ea0 <debug_hexdump(void const*, unsigned int, char const*)+0x70>
   88e98:	71004294 	subs	w20, w20, #0x10
   88e9c:	540004e0 	b.eq	88f38 <debug_hexdump(void const*, unsigned int, char const*)+0x108>  // b.none
   88ea0:	940007f0 	bl	8ae60 <CLogger::Get()>
   88ea4:	39401661 	ldrb	w1, [x19, #5]
   88ea8:	12003e64 	and	w4, w19, #0xffff
   88eac:	39401262 	ldrb	w2, [x19, #4]
   88eb0:	91004273 	add	x19, x19, #0x10
   88eb4:	385f3263 	ldurb	w3, [x19, #-13]
   88eb8:	385f2267 	ldurb	w7, [x19, #-14]
   88ebc:	385f1266 	ldurb	w6, [x19, #-15]
   88ec0:	385f0265 	ldurb	w5, [x19, #-16]
   88ec4:	b90003e3 	str	w3, [sp]
   88ec8:	b9000be2 	str	w2, [sp, #8]
   88ecc:	b90013e1 	str	w1, [sp, #16]
   88ed0:	385fc268 	ldurb	w8, [x19, #-4]
   88ed4:	385fb269 	ldurb	w9, [x19, #-5]
   88ed8:	385fa26a 	ldurb	w10, [x19, #-6]
   88edc:	385f926b 	ldurb	w11, [x19, #-7]
   88ee0:	385f826c 	ldurb	w12, [x19, #-8]
   88ee4:	385f726d 	ldurb	w13, [x19, #-9]
   88ee8:	385f626e 	ldurb	w14, [x19, #-10]
   88eec:	385fe262 	ldurb	w2, [x19, #-2]
   88ef0:	385ff261 	ldurb	w1, [x19, #-1]
   88ef4:	385fd263 	ldurb	w3, [x19, #-3]
   88ef8:	b9001bee 	str	w14, [sp, #24]
   88efc:	b90023ed 	str	w13, [sp, #32]
   88f00:	b9002bec 	str	w12, [sp, #40]
   88f04:	b90033eb 	str	w11, [sp, #48]
   88f08:	b9003bea 	str	w10, [sp, #56]
   88f0c:	b90043e9 	str	w9, [sp, #64]
   88f10:	b9004be8 	str	w8, [sp, #72]
   88f14:	b90053e3 	str	w3, [sp, #80]
   88f18:	aa1603e3 	mov	x3, x22
   88f1c:	b9005be2 	str	w2, [sp, #88]
   88f20:	52800082 	mov	w2, #0x4                   	// #4
   88f24:	b90063e1 	str	w1, [sp, #96]
   88f28:	aa1503e1 	mov	x1, x21
   88f2c:	940006ed 	bl	8aae0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   88f30:	6b1402ff 	cmp	w23, w20
   88f34:	54fffb21 	b.ne	88e98 <debug_hexdump(void const*, unsigned int, char const*)+0x68>  // b.any
   88f38:	a942dfb6 	ldp	x22, x23, [x29, #40]
   88f3c:	a9477bfd 	ldp	x29, x30, [sp, #112]
   88f40:	a94853f3 	ldp	x19, x20, [sp, #128]
   88f44:	f9404bf5 	ldr	x21, [sp, #144]
   88f48:	9102c3ff 	add	sp, sp, #0xb0
   88f4c:	d65f03c0 	ret

0000000000088f50 <debug_stacktrace(unsigned long const*, char const*)>:
   88f50:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   88f54:	910003fd 	mov	x29, sp
   88f58:	a90363f7 	stp	x23, x24, [sp, #48]
   88f5c:	aa0103f7 	mov	x23, x1
   88f60:	f10002ff 	cmp	x23, #0x0
   88f64:	d0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   88f68:	91210021 	add	x1, x1, #0x840
   88f6c:	a90153f3 	stp	x19, x20, [sp, #16]
   88f70:	d0000038 	adrp	x24, 8e000 <font_data+0x5e0>
   88f74:	91232318 	add	x24, x24, #0x8c8
   88f78:	a9025bf5 	stp	x21, x22, [sp, #32]
   88f7c:	aa0003f4 	mov	x20, x0
   88f80:	90000036 	adrp	x22, 8c000 <VectorTable>
   88f84:	9137e2d6 	add	x22, x22, #0xdf8
   88f88:	9a970037 	csel	x23, x1, x23, eq  // eq = none
   88f8c:	d2800013 	mov	x19, #0x0                   	// #0
   88f90:	b2404bf5 	mov	x21, #0x7ffff               	// #524287
   88f94:	14000004 	b	88fa4 <debug_stacktrace(unsigned long const*, char const*)+0x54>
   88f98:	91000673 	add	x19, x19, #0x1
   88f9c:	f101027f 	cmp	x19, #0x40
   88fa0:	54000240 	b.eq	88fe8 <debug_stacktrace(unsigned long const*, char const*)+0x98>  // b.none
   88fa4:	f8737a80 	ldr	x0, [x20, x19, lsl #3]
   88fa8:	eb15001f 	cmp	x0, x21
   88fac:	54ffff69 	b.ls	88f98 <debug_stacktrace(unsigned long const*, char const*)+0x48>  // b.plast
   88fb0:	eb16001f 	cmp	x0, x22
   88fb4:	54ffff22 	b.cs	88f98 <debug_stacktrace(unsigned long const*, char const*)+0x48>  // b.hs, b.nlast
   88fb8:	f240041f 	tst	x0, #0x3
   88fbc:	54fffee1 	b.ne	88f98 <debug_stacktrace(unsigned long const*, char const*)+0x48>  // b.any
   88fc0:	940007a8 	bl	8ae60 <CLogger::Get()>
   88fc4:	f8737a85 	ldr	x5, [x20, x19, lsl #3]
   88fc8:	2a1303e4 	mov	w4, w19
   88fcc:	aa1803e3 	mov	x3, x24
   88fd0:	52800082 	mov	w2, #0x4                   	// #4
   88fd4:	aa1703e1 	mov	x1, x23
   88fd8:	91000673 	add	x19, x19, #0x1
   88fdc:	940006c1 	bl	8aae0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   88fe0:	f101027f 	cmp	x19, #0x40
   88fe4:	54fffe01 	b.ne	88fa4 <debug_stacktrace(unsigned long const*, char const*)+0x54>  // b.any
   88fe8:	a94153f3 	ldp	x19, x20, [sp, #16]
   88fec:	a9425bf5 	ldp	x21, x22, [sp, #32]
   88ff0:	a94363f7 	ldp	x23, x24, [sp, #48]
   88ff4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   88ff8:	d65f03c0 	ret
   88ffc:	00000000 	.inst	0x00000000 ; undefined

0000000000089000 <DelayLoop>:
   89000:	71000400 	subs	w0, w0, #0x1
   89004:	54ffffe1 	b.ne	89000 <DelayLoop>  // b.any
   89008:	d65f03c0 	ret
   8900c:	00000000 	.inst	0x00000000 ; undefined

0000000000089010 <CDevice::~CDevice()>:
   89010:	d65f03c0 	ret
   89014:	d503201f 	nop
   89018:	d503201f 	nop
   8901c:	d503201f 	nop

0000000000089020 <CDevice::Read(void*, unsigned long)>:
   89020:	12800000 	mov	w0, #0xffffffff            	// #-1
   89024:	d65f03c0 	ret
   89028:	d503201f 	nop
   8902c:	d503201f 	nop

0000000000089030 <CDevice::Seek(unsigned long)>:
   89030:	92800000 	mov	x0, #0xffffffffffffffff    	// #-1
   89034:	d65f03c0 	ret
   89038:	d503201f 	nop
   8903c:	d503201f 	nop

0000000000089040 <CDevice::~CDevice()>:
   89040:	d2800101 	mov	x1, #0x8                   	// #8
   89044:	17fffbe7 	b	87fe0 <operator delete(void*, unsigned long)>
   89048:	d503201f 	nop
   8904c:	d503201f 	nop

0000000000089050 <CDevice::CDevice()>:
   89050:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   89054:	9123c021 	add	x1, x1, #0x8f0
   89058:	f9000001 	str	x1, [x0]
   8905c:	d65f03c0 	ret

0000000000089060 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)>:
   89060:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   89064:	910003fd 	mov	x29, sp
   89068:	a90153f3 	stp	x19, x20, [sp, #16]
   8906c:	aa0003f3 	mov	x19, x0
   89070:	aa0203f4 	mov	x20, x2
   89074:	f90013f5 	str	x21, [sp, #32]
   89078:	2a0103f5 	mov	w21, w1
   8907c:	97ffe806 	bl	83094 <CMachineInfo::Get()>
   89080:	2a1503e1 	mov	w1, w21
   89084:	97ffe781 	bl	82e88 <CMachineInfo::AllocateDMAChannel(unsigned int)>
   89088:	b9000260 	str	w0, [x19]
   8908c:	7102001f 	cmp	w0, #0x80
   89090:	a900fe7f 	stp	xzr, xzr, [x19, #8]
   89094:	f9000e74 	str	x20, [x19, #24]
   89098:	3900827f 	strb	wzr, [x19, #32]
   8909c:	a902fe7f 	stp	xzr, xzr, [x19, #40]
   890a0:	3900e27f 	strb	wzr, [x19, #56]
   890a4:	54000560 	b.eq	89150 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xf0>  // b.none
   890a8:	7100301f 	cmp	w0, #0xc
   890ac:	54000468 	b.hi	89138 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xd8>  // b.pmore
   890b0:	d28007e0 	mov	x0, #0x3f                  	// #63
   890b4:	97fffbbf 	bl	87fb0 <operator new[](unsigned long)>
   890b8:	f9000660 	str	x0, [x19, #8]
   890bc:	91007c00 	add	x0, x0, #0x1f
   890c0:	927be801 	and	x1, x0, #0xffffffffffffffe0
   890c4:	b9400264 	ldr	w4, [x19]
   890c8:	f9000a61 	str	x1, [x19, #16]
   890cc:	d28ffe03 	mov	x3, #0x7ff0                	// #32752
   890d0:	f2a7e003 	movk	x3, #0x3f00, lsl #16
   890d4:	f9000c3f 	str	xzr, [x1, #24]
   890d8:	52800022 	mov	w2, #0x1                   	// #1
   890dc:	1ac42041 	lsl	w1, w2, w4
   890e0:	52807d00 	mov	w0, #0x3e8                 	// #1000
   890e4:	b9400062 	ldr	w2, [x3]
   890e8:	2a020021 	orr	w1, w1, w2
   890ec:	b9000061 	str	w1, [x3]
   890f0:	97fff5c0 	bl	867f0 <CTimer::SimpleusDelay(unsigned int)>
   890f4:	b9400260 	ldr	w0, [x19]
   890f8:	52800e02 	mov	w2, #0x70                  	// #112
   890fc:	72a007e2 	movk	w2, #0x3f, lsl #16
   89100:	0b020000 	add	w0, w0, w2
   89104:	52b00001 	mov	w1, #0x80000000            	// #-2147483648
   89108:	53185c00 	lsl	w0, w0, #8
   8910c:	b9000001 	str	w1, [x0]
   89110:	b9400261 	ldr	w1, [x19]
   89114:	0b020021 	add	w1, w1, w2
   89118:	53185c21 	lsl	w1, w1, #8
   8911c:	d503201f 	nop
   89120:	b9400020 	ldr	w0, [x1]
   89124:	37ffffe0 	tbnz	w0, #31, 89120 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xc0>
   89128:	a94153f3 	ldp	x19, x20, [sp, #16]
   8912c:	f94013f5 	ldr	x21, [sp, #32]
   89130:	a8c37bfd 	ldp	x29, x30, [sp], #48
   89134:	d65f03c0 	ret
   89138:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   8913c:	91246021 	add	x1, x1, #0x918
   89140:	52800ac2 	mov	w2, #0x56                  	// #86
   89144:	9100c020 	add	x0, x1, #0x30
   89148:	97fffd3a 	bl	88630 <assertion_failed>
   8914c:	17ffffd9 	b	890b0 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0x50>
   89150:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   89154:	91246021 	add	x1, x1, #0x918
   89158:	91004020 	add	x0, x1, #0x10
   8915c:	52800aa2 	mov	w2, #0x55                  	// #85
   89160:	97fffd34 	bl	88630 <assertion_failed>
   89164:	b9400260 	ldr	w0, [x19]
   89168:	17ffffd0 	b	890a8 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0x48>
   8916c:	d503201f 	nop

0000000000089170 <CDMAChannel::~CDMAChannel()>:
   89170:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   89174:	910003fd 	mov	x29, sp
   89178:	f9000bf3 	str	x19, [sp, #16]
   8917c:	aa0003f3 	mov	x19, x0
   89180:	b9400000 	ldr	w0, [x0]
   89184:	7100301f 	cmp	w0, #0xc
   89188:	54000568 	b.hi	89234 <CDMAChannel::~CDMAChannel()+0xc4>  // b.pmore
   8918c:	52800e01 	mov	w1, #0x70                  	// #112
   89190:	72a007e1 	movk	w1, #0x3f, lsl #16
   89194:	0b010000 	add	w0, w0, w1
   89198:	52b00002 	mov	w2, #0x80000000            	// #-2147483648
   8919c:	53185c00 	lsl	w0, w0, #8
   891a0:	b9000002 	str	w2, [x0]
   891a4:	b9400263 	ldr	w3, [x19]
   891a8:	0b010061 	add	w1, w3, w1
   891ac:	53185c21 	lsl	w1, w1, #8
   891b0:	b9400020 	ldr	w0, [x1]
   891b4:	37ffffe0 	tbnz	w0, #31, 891b0 <CDMAChannel::~CDMAChannel()+0x40>
   891b8:	d28ffe02 	mov	x2, #0x7ff0                	// #32752
   891bc:	f2a7e002 	movk	x2, #0x3f00, lsl #16
   891c0:	52800021 	mov	w1, #0x1                   	// #1
   891c4:	f9400e60 	ldr	x0, [x19, #24]
   891c8:	1ac32021 	lsl	w1, w1, w3
   891cc:	b9400043 	ldr	w3, [x2]
   891d0:	0a210061 	bic	w1, w3, w1
   891d4:	b9000041 	str	w1, [x2]
   891d8:	f900167f 	str	xzr, [x19, #40]
   891dc:	b4000080 	cbz	x0, 891ec <CDMAChannel::~CDMAChannel()+0x7c>
   891e0:	39408261 	ldrb	w1, [x19, #32]
   891e4:	35000161 	cbnz	w1, 89210 <CDMAChannel::~CDMAChannel()+0xa0>
   891e8:	f9000e7f 	str	xzr, [x19, #24]
   891ec:	97ffe7aa 	bl	83094 <CMachineInfo::Get()>
   891f0:	b9400261 	ldr	w1, [x19]
   891f4:	97ffe773 	bl	82fc0 <CMachineInfo::FreeDMAChannel(unsigned int)>
   891f8:	f9000a7f 	str	xzr, [x19, #16]
   891fc:	f9400660 	ldr	x0, [x19, #8]
   89200:	b4000140 	cbz	x0, 89228 <CDMAChannel::~CDMAChannel()+0xb8>
   89204:	f9400bf3 	ldr	x19, [sp, #16]
   89208:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8920c:	17fffb71 	b	87fd0 <operator delete[](void*)>
   89210:	b9400261 	ldr	w1, [x19]
   89214:	7100303f 	cmp	w1, #0xc
   89218:	540001c8 	b.hi	89250 <CDMAChannel::~CDMAChannel()+0xe0>  // b.pmore
   8921c:	11004021 	add	w1, w1, #0x10
   89220:	94000518 	bl	8a680 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   89224:	17fffff1 	b	891e8 <CDMAChannel::~CDMAChannel()+0x78>
   89228:	f9400bf3 	ldr	x19, [sp, #16]
   8922c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   89230:	d65f03c0 	ret
   89234:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   89238:	91246021 	add	x1, x1, #0x918
   8923c:	9100c020 	add	x0, x1, #0x30
   89240:	52800e02 	mov	w2, #0x70                  	// #112
   89244:	97fffcfb 	bl	88630 <assertion_failed>
   89248:	b9400260 	ldr	w0, [x19]
   8924c:	17ffffd0 	b	8918c <CDMAChannel::~CDMAChannel()+0x1c>
   89250:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   89254:	91246021 	add	x1, x1, #0x918
   89258:	91014020 	add	x0, x1, #0x50
   8925c:	52801042 	mov	w2, #0x82                  	// #130
   89260:	97fffcf4 	bl	88630 <assertion_failed>
   89264:	b9400261 	ldr	w1, [x19]
   89268:	f9400e60 	ldr	x0, [x19, #24]
   8926c:	17ffffec 	b	8921c <CDMAChannel::~CDMAChannel()+0xac>

0000000000089270 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)>:
   89270:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   89274:	910003fd 	mov	x29, sp
   89278:	a90153f3 	stp	x19, x20, [sp, #16]
   8927c:	aa0103f4 	mov	x20, x1
   89280:	a9025bf5 	stp	x21, x22, [sp, #32]
   89284:	aa0303f3 	mov	x19, x3
   89288:	a90363f7 	stp	x23, x24, [sp, #48]
   8928c:	aa0203f5 	mov	x21, x2
   89290:	aa0003f8 	mov	x24, x0
   89294:	2a0403f7 	mov	w23, w4
   89298:	12001cb6 	and	w22, w5, #0xff
   8929c:	b40009c1 	cbz	x1, 893d4 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0x164>
   892a0:	b40008f5 	cbz	x21, 893bc <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0x14c>
   892a4:	b40006b3 	cbz	x19, 89378 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0x108>
   892a8:	71003eff 	cmp	w23, #0xf
   892ac:	540004c8 	b.hi	89344 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0xd4>  // b.pmore
   892b0:	f9400b00 	ldr	x0, [x24, #16]
   892b4:	b4000560 	cbz	x0, 89360 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0xf0>
   892b8:	b24077e0 	mov	x0, #0x3fffffff            	// #1073741823
   892bc:	eb00027f 	cmp	x19, x0
   892c0:	54000368 	b.hi	8932c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0xbc>  // b.pmore
   892c4:	b9400300 	ldr	w0, [x24]
   892c8:	d29fffe1 	mov	x1, #0xffff                	// #65535
   892cc:	114fc000 	add	w0, w0, #0x3f0, lsl #12
   892d0:	1101c000 	add	w0, w0, #0x70
   892d4:	53185c00 	lsl	w0, w0, #8
   892d8:	11008000 	add	w0, w0, #0x20
   892dc:	2a0003e0 	mov	w0, w0
   892e0:	b9400000 	ldr	w0, [x0]
   892e4:	f264001f 	tst	x0, #0x10000000
   892e8:	fa411260 	ccmp	x19, x1, #0x0, ne  // ne = any
   892ec:	54000828 	b.hi	893f0 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0x180>  // b.pmore
   892f0:	f9400b00 	ldr	x0, [x24, #16]
   892f4:	52806604 	mov	w4, #0x330                 	// #816
   892f8:	2a173097 	orr	w23, w4, w23, lsl #12
   892fc:	320206a2 	orr	w2, w21, #0xc0000000
   89300:	32020681 	orr	w1, w20, #0xc0000000
   89304:	29000817 	stp	w23, w2, [x0]
   89308:	29014c01 	stp	w1, w19, [x0, #8]
   8930c:	f900081f 	str	xzr, [x0, #16]
   89310:	35000416 	cbnz	w22, 89390 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0x120>
   89314:	a94153f3 	ldp	x19, x20, [sp, #16]
   89318:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8931c:	f900231f 	str	xzr, [x24, #64]
   89320:	a94363f7 	ldp	x23, x24, [sp, #48]
   89324:	a8c47bfd 	ldp	x29, x30, [sp], #64
   89328:	d65f03c0 	ret
   8932c:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   89330:	91246021 	add	x1, x1, #0x918
   89334:	52801342 	mov	w2, #0x9a                  	// #154
   89338:	91034020 	add	x0, x1, #0xd0
   8933c:	97fffcbd 	bl	88630 <assertion_failed>
   89340:	17ffffe1 	b	892c4 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0x54>
   89344:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   89348:	91246021 	add	x1, x1, #0x918
   8934c:	91028020 	add	x0, x1, #0xa0
   89350:	528012e2 	mov	w2, #0x97                  	// #151
   89354:	97fffcb7 	bl	88630 <assertion_failed>
   89358:	f9400b00 	ldr	x0, [x24, #16]
   8935c:	b5fffae0 	cbnz	x0, 892b8 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0x48>
   89360:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   89364:	91246021 	add	x1, x1, #0x918
   89368:	52801322 	mov	w2, #0x99                  	// #153
   8936c:	9102e020 	add	x0, x1, #0xb8
   89370:	97fffcb0 	bl	88630 <assertion_failed>
   89374:	17ffffd1 	b	892b8 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0x48>
   89378:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   8937c:	91246021 	add	x1, x1, #0x918
   89380:	528012c2 	mov	w2, #0x96                  	// #150
   89384:	91024020 	add	x0, x1, #0x90
   89388:	97fffcaa 	bl	88630 <assertion_failed>
   8938c:	17ffffc7 	b	892a8 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0x38>
   89390:	a9044f14 	stp	x20, x19, [x24, #64]
   89394:	aa1303e1 	mov	x1, x19
   89398:	aa1503e0 	mov	x0, x21
   8939c:	97fff9e5 	bl	87b30 <CleanAndInvalidateDataCacheRange>
   893a0:	aa1303e1 	mov	x1, x19
   893a4:	aa1403e0 	mov	x0, x20
   893a8:	a94153f3 	ldp	x19, x20, [sp, #16]
   893ac:	a9425bf5 	ldp	x21, x22, [sp, #32]
   893b0:	a94363f7 	ldp	x23, x24, [sp, #48]
   893b4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   893b8:	17fff9de 	b	87b30 <CleanAndInvalidateDataCacheRange>
   893bc:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   893c0:	91246021 	add	x1, x1, #0x918
   893c4:	528012a2 	mov	w2, #0x95                  	// #149
   893c8:	91020020 	add	x0, x1, #0x80
   893cc:	97fffc99 	bl	88630 <assertion_failed>
   893d0:	17ffffb5 	b	892a4 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0x34>
   893d4:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   893d8:	91246021 	add	x1, x1, #0x918
   893dc:	52801282 	mov	w2, #0x94                  	// #148
   893e0:	9101a020 	add	x0, x1, #0x68
   893e4:	97fffc93 	bl	88630 <assertion_failed>
   893e8:	b5fff5f5 	cbnz	x21, 892a4 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0x34>
   893ec:	17fffff4 	b	893bc <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0x14c>
   893f0:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   893f4:	91246021 	add	x1, x1, #0x918
   893f8:	52801382 	mov	w2, #0x9c                  	// #156
   893fc:	9103a020 	add	x0, x1, #0xe8
   89400:	97fffc8c 	bl	88630 <assertion_failed>
   89404:	17ffffbb 	b	892f0 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0x80>
   89408:	d503201f 	nop
   8940c:	d503201f 	nop

0000000000089410 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned long, TDREQ)>:
   89410:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   89414:	910003fd 	mov	x29, sp
   89418:	a90153f3 	stp	x19, x20, [sp, #16]
   8941c:	2a0203f3 	mov	w19, w2
   89420:	a9025bf5 	stp	x21, x22, [sp, #32]
   89424:	2a0403f4 	mov	w20, w4
   89428:	f9001bf7 	str	x23, [sp, #48]
   8942c:	aa0003f6 	mov	x22, x0
   89430:	aa0303f5 	mov	x21, x3
   89434:	aa0103f7 	mov	x23, x1
   89438:	b4000901 	cbz	x1, 89558 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned long, TDREQ)+0x148>
   8943c:	b4000535 	cbz	x21, 894e0 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned long, TDREQ)+0xd0>
   89440:	b24077e0 	mov	x0, #0x3fffffff            	// #1073741823
   89444:	eb0002bf 	cmp	x21, x0
   89448:	54000408 	b.hi	894c8 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned long, TDREQ)+0xb8>  // b.pmore
   8944c:	b94002c0 	ldr	w0, [x22]
   89450:	d29fffe1 	mov	x1, #0xffff                	// #65535
   89454:	114fc000 	add	w0, w0, #0x3f0, lsl #12
   89458:	1101c000 	add	w0, w0, #0x70
   8945c:	53185c00 	lsl	w0, w0, #8
   89460:	11008000 	add	w0, w0, #0x20
   89464:	2a0003e0 	mov	w0, w0
   89468:	b9400000 	ldr	w0, [x0]
   8946c:	f264001f 	tst	x0, #0x10000000
   89470:	fa4112a0 	ccmp	x21, x1, #0x0, ne  // ne = any
   89474:	540007e8 	b.hi	89570 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned long, TDREQ)+0x160>  // b.pmore
   89478:	72005e73 	ands	w19, w19, #0xffffff
   8947c:	540004e0 	b.eq	89518 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned long, TDREQ)+0x108>  // b.none
   89480:	f9400ac0 	ldr	x0, [x22, #16]
   89484:	52afc001 	mov	w1, #0x7e000000            	// #2113929216
   89488:	0b010273 	add	w19, w19, w1
   8948c:	b4000580 	cbz	x0, 8953c <CDMAChannel::SetupIORead(void*, unsigned int, unsigned long, TDREQ)+0x12c>
   89490:	52808701 	mov	w1, #0x438                 	// #1080
   89494:	f900081f 	str	xzr, [x0, #16]
   89498:	2a144034 	orr	w20, w1, w20, lsl #16
   8949c:	320206e1 	orr	w1, w23, #0xc0000000
   894a0:	29004c14 	stp	w20, w19, [x0]
   894a4:	29015401 	stp	w1, w21, [x0, #8]
   894a8:	aa1503e1 	mov	x1, x21
   894ac:	a94153f3 	ldp	x19, x20, [sp, #16]
   894b0:	a90456d7 	stp	x23, x21, [x22, #64]
   894b4:	aa1703e0 	mov	x0, x23
   894b8:	f9401bf7 	ldr	x23, [sp, #48]
   894bc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   894c0:	a8c47bfd 	ldp	x29, x30, [sp], #64
   894c4:	17fff99b 	b	87b30 <CleanAndInvalidateDataCacheRange>
   894c8:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   894cc:	91246021 	add	x1, x1, #0x918
   894d0:	52801762 	mov	w2, #0xbb                  	// #187
   894d4:	91034020 	add	x0, x1, #0xd0
   894d8:	97fffc56 	bl	88630 <assertion_failed>
   894dc:	17ffffdc 	b	8944c <CDMAChannel::SetupIORead(void*, unsigned int, unsigned long, TDREQ)+0x3c>
   894e0:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   894e4:	91246021 	add	x1, x1, #0x918
   894e8:	91024020 	add	x0, x1, #0x90
   894ec:	52801742 	mov	w2, #0xba                  	// #186
   894f0:	97fffc50 	bl	88630 <assertion_failed>
   894f4:	b94002c0 	ldr	w0, [x22]
   894f8:	72005e73 	ands	w19, w19, #0xffffff
   894fc:	114fc000 	add	w0, w0, #0x3f0, lsl #12
   89500:	1101c000 	add	w0, w0, #0x70
   89504:	53185c00 	lsl	w0, w0, #8
   89508:	11008000 	add	w0, w0, #0x20
   8950c:	2a0003e0 	mov	w0, w0
   89510:	b9400000 	ldr	w0, [x0]
   89514:	54fffb61 	b.ne	89480 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned long, TDREQ)+0x70>  // b.any
   89518:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   8951c:	91246021 	add	x1, x1, #0x918
   89520:	91050020 	add	x0, x1, #0x140
   89524:	52801802 	mov	w2, #0xc0                  	// #192
   89528:	97fffc42 	bl	88630 <assertion_failed>
   8952c:	f9400ac0 	ldr	x0, [x22, #16]
   89530:	52afc001 	mov	w1, #0x7e000000            	// #2113929216
   89534:	0b010273 	add	w19, w19, w1
   89538:	b5fffac0 	cbnz	x0, 89490 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned long, TDREQ)+0x80>
   8953c:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   89540:	91246021 	add	x1, x1, #0x918
   89544:	9102e020 	add	x0, x1, #0xb8
   89548:	52801862 	mov	w2, #0xc3                  	// #195
   8954c:	97fffc39 	bl	88630 <assertion_failed>
   89550:	f9400ac0 	ldr	x0, [x22, #16]
   89554:	17ffffcf 	b	89490 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned long, TDREQ)+0x80>
   89558:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   8955c:	91246021 	add	x1, x1, #0x918
   89560:	52801722 	mov	w2, #0xb9                  	// #185
   89564:	9101a020 	add	x0, x1, #0x68
   89568:	97fffc32 	bl	88630 <assertion_failed>
   8956c:	17ffffb4 	b	8943c <CDMAChannel::SetupIORead(void*, unsigned int, unsigned long, TDREQ)+0x2c>
   89570:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   89574:	91246021 	add	x1, x1, #0x918
   89578:	528017a2 	mov	w2, #0xbd                  	// #189
   8957c:	9103a020 	add	x0, x1, #0xe8
   89580:	97fffc2c 	bl	88630 <assertion_failed>
   89584:	17ffffbd 	b	89478 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned long, TDREQ)+0x68>
   89588:	d503201f 	nop
   8958c:	d503201f 	nop

0000000000089590 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned long, TDREQ)>:
   89590:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   89594:	910003fd 	mov	x29, sp
   89598:	a90153f3 	stp	x19, x20, [sp, #16]
   8959c:	2a0103f3 	mov	w19, w1
   895a0:	a9025bf5 	stp	x21, x22, [sp, #32]
   895a4:	2a0403f4 	mov	w20, w4
   895a8:	f9001bf7 	str	x23, [sp, #48]
   895ac:	aa0003f6 	mov	x22, x0
   895b0:	aa0303f5 	mov	x21, x3
   895b4:	aa0203f7 	mov	x23, x2
   895b8:	b4000902 	cbz	x2, 896d8 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned long, TDREQ)+0x148>
   895bc:	b4000535 	cbz	x21, 89660 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned long, TDREQ)+0xd0>
   895c0:	b24077e0 	mov	x0, #0x3fffffff            	// #1073741823
   895c4:	eb0002bf 	cmp	x21, x0
   895c8:	54000408 	b.hi	89648 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned long, TDREQ)+0xb8>  // b.pmore
   895cc:	b94002c0 	ldr	w0, [x22]
   895d0:	d29fffe1 	mov	x1, #0xffff                	// #65535
   895d4:	114fc000 	add	w0, w0, #0x3f0, lsl #12
   895d8:	1101c000 	add	w0, w0, #0x70
   895dc:	53185c00 	lsl	w0, w0, #8
   895e0:	11008000 	add	w0, w0, #0x20
   895e4:	2a0003e0 	mov	w0, w0
   895e8:	b9400000 	ldr	w0, [x0]
   895ec:	f264001f 	tst	x0, #0x10000000
   895f0:	fa4112a0 	ccmp	x21, x1, #0x0, ne  // ne = any
   895f4:	540007e8 	b.hi	896f0 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned long, TDREQ)+0x160>  // b.pmore
   895f8:	72005e73 	ands	w19, w19, #0xffffff
   895fc:	540004e0 	b.eq	89698 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned long, TDREQ)+0x108>  // b.none
   89600:	f9400ac0 	ldr	x0, [x22, #16]
   89604:	52afc001 	mov	w1, #0x7e000000            	// #2113929216
   89608:	0b010273 	add	w19, w19, w1
   8960c:	b4000580 	cbz	x0, 896bc <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned long, TDREQ)+0x12c>
   89610:	52806902 	mov	w2, #0x348                 	// #840
   89614:	29015413 	stp	w19, w21, [x0, #8]
   89618:	f900081f 	str	xzr, [x0, #16]
   8961c:	320206e1 	orr	w1, w23, #0xc0000000
   89620:	2a144054 	orr	w20, w2, w20, lsl #16
   89624:	29000414 	stp	w20, w1, [x0]
   89628:	a94153f3 	ldp	x19, x20, [sp, #16]
   8962c:	aa1703e0 	mov	x0, x23
   89630:	f9401bf7 	ldr	x23, [sp, #48]
   89634:	aa1503e1 	mov	x1, x21
   89638:	f90022df 	str	xzr, [x22, #64]
   8963c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   89640:	a8c47bfd 	ldp	x29, x30, [sp], #64
   89644:	17fff93b 	b	87b30 <CleanAndInvalidateDataCacheRange>
   89648:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   8964c:	91246021 	add	x1, x1, #0x918
   89650:	52801b42 	mov	w2, #0xda                  	// #218
   89654:	91034020 	add	x0, x1, #0xd0
   89658:	97fffbf6 	bl	88630 <assertion_failed>
   8965c:	17ffffdc 	b	895cc <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned long, TDREQ)+0x3c>
   89660:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   89664:	91246021 	add	x1, x1, #0x918
   89668:	91024020 	add	x0, x1, #0x90
   8966c:	52801b22 	mov	w2, #0xd9                  	// #217
   89670:	97fffbf0 	bl	88630 <assertion_failed>
   89674:	b94002c0 	ldr	w0, [x22]
   89678:	72005e73 	ands	w19, w19, #0xffffff
   8967c:	114fc000 	add	w0, w0, #0x3f0, lsl #12
   89680:	1101c000 	add	w0, w0, #0x70
   89684:	53185c00 	lsl	w0, w0, #8
   89688:	11008000 	add	w0, w0, #0x20
   8968c:	2a0003e0 	mov	w0, w0
   89690:	b9400000 	ldr	w0, [x0]
   89694:	54fffb61 	b.ne	89600 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned long, TDREQ)+0x70>  // b.any
   89698:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   8969c:	91246021 	add	x1, x1, #0x918
   896a0:	91050020 	add	x0, x1, #0x140
   896a4:	52801be2 	mov	w2, #0xdf                  	// #223
   896a8:	97fffbe2 	bl	88630 <assertion_failed>
   896ac:	f9400ac0 	ldr	x0, [x22, #16]
   896b0:	52afc001 	mov	w1, #0x7e000000            	// #2113929216
   896b4:	0b010273 	add	w19, w19, w1
   896b8:	b5fffac0 	cbnz	x0, 89610 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned long, TDREQ)+0x80>
   896bc:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   896c0:	91246021 	add	x1, x1, #0x918
   896c4:	9102e020 	add	x0, x1, #0xb8
   896c8:	52801c42 	mov	w2, #0xe2                  	// #226
   896cc:	97fffbd9 	bl	88630 <assertion_failed>
   896d0:	f9400ac0 	ldr	x0, [x22, #16]
   896d4:	17ffffcf 	b	89610 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned long, TDREQ)+0x80>
   896d8:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   896dc:	91246021 	add	x1, x1, #0x918
   896e0:	52801b02 	mov	w2, #0xd8                  	// #216
   896e4:	91020020 	add	x0, x1, #0x80
   896e8:	97fffbd2 	bl	88630 <assertion_failed>
   896ec:	17ffffb4 	b	895bc <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned long, TDREQ)+0x2c>
   896f0:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   896f4:	91246021 	add	x1, x1, #0x918
   896f8:	52801b82 	mov	w2, #0xdc                  	// #220
   896fc:	9103a020 	add	x0, x1, #0xe8
   89700:	97fffbcc 	bl	88630 <assertion_failed>
   89704:	17ffffbd 	b	895f8 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned long, TDREQ)+0x68>
   89708:	d503201f 	nop
   8970c:	d503201f 	nop

0000000000089710 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)>:
   89710:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   89714:	910003fd 	mov	x29, sp
   89718:	a90153f3 	stp	x19, x20, [sp, #16]
   8971c:	2a0403f3 	mov	w19, w4
   89720:	a9025bf5 	stp	x21, x22, [sp, #32]
   89724:	aa0503f4 	mov	x20, x5
   89728:	a90363f7 	stp	x23, x24, [sp, #48]
   8972c:	aa0103f5 	mov	x21, x1
   89730:	f90023f9 	str	x25, [sp, #64]
   89734:	aa0003f8 	mov	x24, x0
   89738:	aa0303f7 	mov	x23, x3
   8973c:	2a0603f6 	mov	w22, w6
   89740:	aa0203f9 	mov	x25, x2
   89744:	b4000de1 	cbz	x1, 89900 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x1f0>
   89748:	b4000d19 	cbz	x25, 898e8 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x1d8>
   8974c:	b4000c37 	cbz	x23, 898d0 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x1c0>
   89750:	d29fffe0 	mov	x0, #0xffff                	// #65535
   89754:	eb0002ff 	cmp	x23, x0
   89758:	54000a48 	b.hi	898a0 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x190>  // b.pmore
   8975c:	34000af3 	cbz	w19, 898b8 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x1a8>
   89760:	5287ffe0 	mov	w0, #0x3fff                	// #16383
   89764:	6b00027f 	cmp	w19, w0
   89768:	54000488 	b.hi	897f8 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0xe8>  // b.pmore
   8976c:	d29fffe0 	mov	x0, #0xffff                	// #65535
   89770:	eb00029f 	cmp	x20, x0
   89774:	54000528 	b.hi	89818 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x108>  // b.pmore
   89778:	71003edf 	cmp	w22, #0xf
   8977c:	540005c8 	b.hi	89834 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x124>  // b.pmore
   89780:	b9400300 	ldr	w0, [x24]
   89784:	114fc000 	add	w0, w0, #0x3f0, lsl #12
   89788:	1101c000 	add	w0, w0, #0x70
   8978c:	53185c00 	lsl	w0, w0, #8
   89790:	11008000 	add	w0, w0, #0x20
   89794:	2a0003e0 	mov	w0, w0
   89798:	b9400000 	ldr	w0, [x0]
   8979c:	37e00660 	tbnz	w0, #28, 89868 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x158>
   897a0:	f9400b00 	ldr	x0, [x24, #16]
   897a4:	b4000700 	cbz	x0, 89884 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x174>
   897a8:	2a1303e1 	mov	w1, w19
   897ac:	51000673 	sub	w19, w19, #0x1
   897b0:	52806643 	mov	w3, #0x332                 	// #818
   897b4:	32020722 	orr	w2, w25, #0xc0000000
   897b8:	2a163076 	orr	w22, w3, w22, lsl #12
   897bc:	320206b5 	orr	w21, w21, #0xc0000000
   897c0:	29000816 	stp	w22, w2, [x0]
   897c4:	9b177c21 	mul	x1, x1, x23
   897c8:	53103e94 	lsl	w20, w20, #16
   897cc:	2a1342f7 	orr	w23, w23, w19, lsl #16
   897d0:	29015c15 	stp	w21, w23, [x0, #8]
   897d4:	29027c14 	stp	w20, wzr, [x0, #16]
   897d8:	aa1903e0 	mov	x0, x25
   897dc:	a94153f3 	ldp	x19, x20, [sp, #16]
   897e0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   897e4:	f94023f9 	ldr	x25, [sp, #64]
   897e8:	f900231f 	str	xzr, [x24, #64]
   897ec:	a94363f7 	ldp	x23, x24, [sp, #48]
   897f0:	a8c57bfd 	ldp	x29, x30, [sp], #80
   897f4:	17fff8cf 	b	87b30 <CleanAndInvalidateDataCacheRange>
   897f8:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   897fc:	91246021 	add	x1, x1, #0x918
   89800:	91064020 	add	x0, x1, #0x190
   89804:	52801fa2 	mov	w2, #0xfd                  	// #253
   89808:	97fffb8a 	bl	88630 <assertion_failed>
   8980c:	d29fffe0 	mov	x0, #0xffff                	// #65535
   89810:	eb00029f 	cmp	x20, x0
   89814:	54fffb29 	b.ls	89778 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x68>  // b.plast
   89818:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   8981c:	91246021 	add	x1, x1, #0x918
   89820:	52801fc2 	mov	w2, #0xfe                  	// #254
   89824:	9106a020 	add	x0, x1, #0x1a8
   89828:	97fffb82 	bl	88630 <assertion_failed>
   8982c:	71003edf 	cmp	w22, #0xf
   89830:	54fffa89 	b.ls	89780 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x70>  // b.plast
   89834:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   89838:	91246021 	add	x1, x1, #0x918
   8983c:	91028020 	add	x0, x1, #0xa0
   89840:	52801fe2 	mov	w2, #0xff                  	// #255
   89844:	97fffb7b 	bl	88630 <assertion_failed>
   89848:	b9400300 	ldr	w0, [x24]
   8984c:	114fc000 	add	w0, w0, #0x3f0, lsl #12
   89850:	1101c000 	add	w0, w0, #0x70
   89854:	53185c00 	lsl	w0, w0, #8
   89858:	11008000 	add	w0, w0, #0x20
   8985c:	2a0003e0 	mov	w0, w0
   89860:	b9400000 	ldr	w0, [x0]
   89864:	36e7f9e0 	tbz	w0, #28, 897a0 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x90>
   89868:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   8986c:	91246021 	add	x1, x1, #0x918
   89870:	91070020 	add	x0, x1, #0x1c0
   89874:	52802022 	mov	w2, #0x101                 	// #257
   89878:	97fffb6e 	bl	88630 <assertion_failed>
   8987c:	f9400b00 	ldr	x0, [x24, #16]
   89880:	b5fff940 	cbnz	x0, 897a8 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x98>
   89884:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   89888:	91246021 	add	x1, x1, #0x918
   8988c:	9102e020 	add	x0, x1, #0xb8
   89890:	52802062 	mov	w2, #0x103                 	// #259
   89894:	97fffb67 	bl	88630 <assertion_failed>
   89898:	f9400b00 	ldr	x0, [x24, #16]
   8989c:	17ffffc3 	b	897a8 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x98>
   898a0:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   898a4:	91246021 	add	x1, x1, #0x918
   898a8:	52801f62 	mov	w2, #0xfb                  	// #251
   898ac:	9105a020 	add	x0, x1, #0x168
   898b0:	97fffb60 	bl	88630 <assertion_failed>
   898b4:	35fff573 	cbnz	w19, 89760 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x50>
   898b8:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   898bc:	91246021 	add	x1, x1, #0x918
   898c0:	52801f82 	mov	w2, #0xfc                  	// #252
   898c4:	91060020 	add	x0, x1, #0x180
   898c8:	97fffb5a 	bl	88630 <assertion_failed>
   898cc:	17ffffa8 	b	8976c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x5c>
   898d0:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   898d4:	91246021 	add	x1, x1, #0x918
   898d8:	52801f42 	mov	w2, #0xfa                  	// #250
   898dc:	91054020 	add	x0, x1, #0x150
   898e0:	97fffb54 	bl	88630 <assertion_failed>
   898e4:	17ffff9e 	b	8975c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x4c>
   898e8:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   898ec:	91246021 	add	x1, x1, #0x918
   898f0:	52801f22 	mov	w2, #0xf9                  	// #249
   898f4:	91020020 	add	x0, x1, #0x80
   898f8:	97fffb4e 	bl	88630 <assertion_failed>
   898fc:	17ffff94 	b	8974c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x3c>
   89900:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   89904:	91246021 	add	x1, x1, #0x918
   89908:	52801f02 	mov	w2, #0xf8                  	// #248
   8990c:	9101a020 	add	x0, x1, #0x68
   89910:	97fffb48 	bl	88630 <assertion_failed>
   89914:	b5fff1d9 	cbnz	x25, 8974c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x3c>
   89918:	17fffff4 	b	898e8 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x1d8>
   8991c:	d503201f 	nop

0000000000089920 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)>:
   89920:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   89924:	910003fd 	mov	x29, sp
   89928:	a90153f3 	stp	x19, x20, [sp, #16]
   8992c:	aa0003f3 	mov	x19, x0
   89930:	b9400000 	ldr	w0, [x0]
   89934:	aa0103f4 	mov	x20, x1
   89938:	f90013f5 	str	x21, [sp, #32]
   8993c:	aa0203f5 	mov	x21, x2
   89940:	7100301f 	cmp	w0, #0xc
   89944:	54000188 	b.hi	89974 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x54>  // b.pmore
   89948:	f9400e60 	ldr	x0, [x19, #24]
   8994c:	b4000220 	cbz	x0, 89990 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x70>
   89950:	39408260 	ldrb	w0, [x19, #32]
   89954:	340002e0 	cbz	w0, 899b0 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x90>
   89958:	f9001674 	str	x20, [x19, #40]
   8995c:	b4000414 	cbz	x20, 899dc <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0xbc>
   89960:	f9001a75 	str	x21, [x19, #48]
   89964:	a94153f3 	ldp	x19, x20, [sp, #16]
   89968:	f94013f5 	ldr	x21, [sp, #32]
   8996c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   89970:	d65f03c0 	ret
   89974:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   89978:	91246021 	add	x1, x1, #0x918
   8997c:	91014020 	add	x0, x1, #0x50
   89980:	52802322 	mov	w2, #0x119                 	// #281
   89984:	97fffb2b 	bl	88630 <assertion_failed>
   89988:	f9400e60 	ldr	x0, [x19, #24]
   8998c:	b5fffe20 	cbnz	x0, 89950 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x30>
   89990:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   89994:	91246021 	add	x1, x1, #0x918
   89998:	9107e020 	add	x0, x1, #0x1f8
   8999c:	52802342 	mov	w2, #0x11a                 	// #282
   899a0:	97fffb24 	bl	88630 <assertion_failed>
   899a4:	39408260 	ldrb	w0, [x19, #32]
   899a8:	35fffd80 	cbnz	w0, 89958 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x38>
   899ac:	d503201f 	nop
   899b0:	f9400e60 	ldr	x0, [x19, #24]
   899b4:	90000002 	adrp	x2, 89000 <DelayLoop>
   899b8:	b9400261 	ldr	w1, [x19]
   899bc:	aa1303e3 	mov	x3, x19
   899c0:	91378042 	add	x2, x2, #0xde0
   899c4:	11004021 	add	w1, w1, #0x10
   899c8:	940002da 	bl	8a530 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   899cc:	f9001674 	str	x20, [x19, #40]
   899d0:	52800020 	mov	w0, #0x1                   	// #1
   899d4:	39008260 	strb	w0, [x19, #32]
   899d8:	b5fffc54 	cbnz	x20, 89960 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x40>
   899dc:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   899e0:	91246021 	add	x1, x1, #0x918
   899e4:	52802482 	mov	w2, #0x124                 	// #292
   899e8:	91084020 	add	x0, x1, #0x210
   899ec:	97fffb11 	bl	88630 <assertion_failed>
   899f0:	f9001a75 	str	x21, [x19, #48]
   899f4:	a94153f3 	ldp	x19, x20, [sp, #16]
   899f8:	f94013f5 	ldr	x21, [sp, #32]
   899fc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   89a00:	d65f03c0 	ret
   89a04:	d503201f 	nop
   89a08:	d503201f 	nop
   89a0c:	d503201f 	nop

0000000000089a10 <CDMAChannel::Start()>:
   89a10:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   89a14:	910003fd 	mov	x29, sp
   89a18:	a90153f3 	stp	x19, x20, [sp, #16]
   89a1c:	aa0003f3 	mov	x19, x0
   89a20:	b9400000 	ldr	w0, [x0]
   89a24:	7100301f 	cmp	w0, #0xc
   89a28:	54000828 	b.hi	89b2c <CDMAChannel::Start()+0x11c>  // b.pmore
   89a2c:	f9400a60 	ldr	x0, [x19, #16]
   89a30:	b40008c0 	cbz	x0, 89b48 <CDMAChannel::Start()+0x138>
   89a34:	f9401660 	ldr	x0, [x19, #40]
   89a38:	b4000120 	cbz	x0, 89a5c <CDMAChannel::Start()+0x4c>
   89a3c:	f9400e60 	ldr	x0, [x19, #24]
   89a40:	b4000900 	cbz	x0, 89b60 <CDMAChannel::Start()+0x150>
   89a44:	39408260 	ldrb	w0, [x19, #32]
   89a48:	34000580 	cbz	w0, 89af8 <CDMAChannel::Start()+0xe8>
   89a4c:	f9400a61 	ldr	x1, [x19, #16]
   89a50:	b9400020 	ldr	w0, [x1]
   89a54:	32000000 	orr	w0, w0, #0x1
   89a58:	b9000020 	str	w0, [x1]
   89a5c:	b9400260 	ldr	w0, [x19]
   89a60:	114fc001 	add	w1, w0, #0x3f0, lsl #12
   89a64:	1101c021 	add	w1, w1, #0x70
   89a68:	53185c21 	lsl	w1, w1, #8
   89a6c:	b9400021 	ldr	w1, [x1]
   89a70:	37100501 	tbnz	w1, #2, 89b10 <CDMAChannel::Start()+0x100>
   89a74:	d28ffc02 	mov	x2, #0x7fe0                	// #32736
   89a78:	f2a7e002 	movk	x2, #0x3f00, lsl #16
   89a7c:	52800021 	mov	w1, #0x1                   	// #1
   89a80:	b9400042 	ldr	w2, [x2]
   89a84:	1ac02021 	lsl	w1, w1, w0
   89a88:	6a02003f 	tst	w1, w2
   89a8c:	540000e0 	b.eq	89aa8 <CDMAChannel::Start()+0x98>  // b.none
   89a90:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   89a94:	91246021 	add	x1, x1, #0x918
   89a98:	9109e020 	add	x0, x1, #0x278
   89a9c:	52802702 	mov	w2, #0x138                 	// #312
   89aa0:	97fffae4 	bl	88630 <assertion_failed>
   89aa4:	b9400260 	ldr	w0, [x19]
   89aa8:	52800e14 	mov	w20, #0x70                  	// #112
   89aac:	72a007f4 	movk	w20, #0x3f, lsl #16
   89ab0:	0b140002 	add	w2, w0, w20
   89ab4:	f9400a60 	ldr	x0, [x19, #16]
   89ab8:	d2800401 	mov	x1, #0x20                  	// #32
   89abc:	53185c42 	lsl	w2, w2, #8
   89ac0:	32020403 	orr	w3, w0, #0xc0000000
   89ac4:	11001042 	add	w2, w2, #0x4
   89ac8:	2a0203e2 	mov	w2, w2
   89acc:	b9000043 	str	w3, [x2]
   89ad0:	97fff818 	bl	87b30 <CleanAndInvalidateDataCacheRange>
   89ad4:	b9400260 	ldr	w0, [x19]
   89ad8:	52800021 	mov	w1, #0x1                   	// #1
   89adc:	72a21e21 	movk	w1, #0x10f1, lsl #16
   89ae0:	0b140000 	add	w0, w0, w20
   89ae4:	a94153f3 	ldp	x19, x20, [sp, #16]
   89ae8:	53185c00 	lsl	w0, w0, #8
   89aec:	b9000001 	str	w1, [x0]
   89af0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   89af4:	d65f03c0 	ret
   89af8:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   89afc:	91246021 	add	x1, x1, #0x918
   89b00:	52802622 	mov	w2, #0x131                 	// #305
   89b04:	9108c020 	add	x0, x1, #0x230
   89b08:	97fffaca 	bl	88630 <assertion_failed>
   89b0c:	17ffffd0 	b	89a4c <CDMAChannel::Start()+0x3c>
   89b10:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   89b14:	91246021 	add	x1, x1, #0x918
   89b18:	91090020 	add	x0, x1, #0x240
   89b1c:	528026e2 	mov	w2, #0x137                 	// #311
   89b20:	97fffac4 	bl	88630 <assertion_failed>
   89b24:	b9400260 	ldr	w0, [x19]
   89b28:	17ffffd3 	b	89a74 <CDMAChannel::Start()+0x64>
   89b2c:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   89b30:	91246021 	add	x1, x1, #0x918
   89b34:	9100c020 	add	x0, x1, #0x30
   89b38:	52802562 	mov	w2, #0x12b                 	// #299
   89b3c:	97fffabd 	bl	88630 <assertion_failed>
   89b40:	f9400a60 	ldr	x0, [x19, #16]
   89b44:	b5fff780 	cbnz	x0, 89a34 <CDMAChannel::Start()+0x24>
   89b48:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   89b4c:	91246021 	add	x1, x1, #0x918
   89b50:	52802582 	mov	w2, #0x12c                 	// #300
   89b54:	9102e020 	add	x0, x1, #0xb8
   89b58:	97fffab6 	bl	88630 <assertion_failed>
   89b5c:	17ffffb6 	b	89a34 <CDMAChannel::Start()+0x24>
   89b60:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   89b64:	91246021 	add	x1, x1, #0x918
   89b68:	52802602 	mov	w2, #0x130                 	// #304
   89b6c:	9107e020 	add	x0, x1, #0x1f8
   89b70:	97fffab0 	bl	88630 <assertion_failed>
   89b74:	17ffffb4 	b	89a44 <CDMAChannel::Start()+0x34>
   89b78:	d503201f 	nop
   89b7c:	d503201f 	nop

0000000000089b80 <CDMAChannel::Wait()>:
   89b80:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   89b84:	910003fd 	mov	x29, sp
   89b88:	f9000bf3 	str	x19, [sp, #16]
   89b8c:	aa0003f3 	mov	x19, x0
   89b90:	b9400000 	ldr	w0, [x0]
   89b94:	7100301f 	cmp	w0, #0xc
   89b98:	54000348 	b.hi	89c00 <CDMAChannel::Wait()+0x80>  // b.pmore
   89b9c:	f9401660 	ldr	x0, [x19, #40]
   89ba0:	b40000c0 	cbz	x0, 89bb8 <CDMAChannel::Wait()+0x38>
   89ba4:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   89ba8:	91246021 	add	x1, x1, #0x918
   89bac:	52802922 	mov	w2, #0x149                 	// #329
   89bb0:	910ac020 	add	x0, x1, #0x2b0
   89bb4:	97fffa9f 	bl	88630 <assertion_failed>
   89bb8:	b9400261 	ldr	w1, [x19]
   89bbc:	114fc021 	add	w1, w1, #0x3f0, lsl #12
   89bc0:	1101c021 	add	w1, w1, #0x70
   89bc4:	53185c21 	lsl	w1, w1, #8
   89bc8:	b9400020 	ldr	w0, [x1]
   89bcc:	3707ffe0 	tbnz	w0, #0, 89bc8 <CDMAChannel::Wait()+0x48>
   89bd0:	d2780001 	eor	x1, x0, #0x100
   89bd4:	f9402262 	ldr	x2, [x19, #64]
   89bd8:	53082020 	ubfx	w0, w1, #8, #1
   89bdc:	3900e260 	strb	w0, [x19, #56]
   89be0:	b40000a2 	cbz	x2, 89bf4 <CDMAChannel::Wait()+0x74>
   89be4:	f9402661 	ldr	x1, [x19, #72]
   89be8:	aa0203e0 	mov	x0, x2
   89bec:	97fff7d1 	bl	87b30 <CleanAndInvalidateDataCacheRange>
   89bf0:	3940e260 	ldrb	w0, [x19, #56]
   89bf4:	f9400bf3 	ldr	x19, [sp, #16]
   89bf8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   89bfc:	d65f03c0 	ret
   89c00:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   89c04:	91246021 	add	x1, x1, #0x918
   89c08:	52802902 	mov	w2, #0x148                 	// #328
   89c0c:	9100c020 	add	x0, x1, #0x30
   89c10:	97fffa88 	bl	88630 <assertion_failed>
   89c14:	17ffffe2 	b	89b9c <CDMAChannel::Wait()+0x1c>
   89c18:	d503201f 	nop
   89c1c:	d503201f 	nop

0000000000089c20 <CDMAChannel::GetStatus()>:
   89c20:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   89c24:	910003fd 	mov	x29, sp
   89c28:	f9000bf3 	str	x19, [sp, #16]
   89c2c:	aa0003f3 	mov	x19, x0
   89c30:	b9400000 	ldr	w0, [x0]
   89c34:	7100301f 	cmp	w0, #0xc
   89c38:	540001e8 	b.hi	89c74 <CDMAChannel::GetStatus()+0x54>  // b.pmore
   89c3c:	114fc000 	add	w0, w0, #0x3f0, lsl #12
   89c40:	1101c000 	add	w0, w0, #0x70
   89c44:	53185c00 	lsl	w0, w0, #8
   89c48:	b9400000 	ldr	w0, [x0]
   89c4c:	360000c0 	tbz	w0, #0, 89c64 <CDMAChannel::GetStatus()+0x44>
   89c50:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   89c54:	91246021 	add	x1, x1, #0x918
   89c58:	52802c42 	mov	w2, #0x162                 	// #354
   89c5c:	910b4020 	add	x0, x1, #0x2d0
   89c60:	97fffa74 	bl	88630 <assertion_failed>
   89c64:	3940e260 	ldrb	w0, [x19, #56]
   89c68:	f9400bf3 	ldr	x19, [sp, #16]
   89c6c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   89c70:	d65f03c0 	ret
   89c74:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   89c78:	91246021 	add	x1, x1, #0x918
   89c7c:	9100c020 	add	x0, x1, #0x30
   89c80:	52802c22 	mov	w2, #0x161                 	// #353
   89c84:	97fffa6b 	bl	88630 <assertion_failed>
   89c88:	b9400260 	ldr	w0, [x19]
   89c8c:	17ffffec 	b	89c3c <CDMAChannel::GetStatus()+0x1c>

0000000000089c90 <CDMAChannel::InterruptHandler()>:
   89c90:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   89c94:	910003fd 	mov	x29, sp
   89c98:	a90153f3 	stp	x19, x20, [sp, #16]
   89c9c:	aa0003f3 	mov	x19, x0
   89ca0:	f9402000 	ldr	x0, [x0, #64]
   89ca4:	b50007c0 	cbnz	x0, 89d9c <CDMAChannel::InterruptHandler()+0x10c>
   89ca8:	b9400260 	ldr	w0, [x19]
   89cac:	7100301f 	cmp	w0, #0xc
   89cb0:	54000688 	b.hi	89d80 <CDMAChannel::InterruptHandler()+0xf0>  // b.pmore
   89cb4:	d28ffc01 	mov	x1, #0x7fe0                	// #32736
   89cb8:	f2a7e001 	movk	x1, #0x3f00, lsl #16
   89cbc:	52800034 	mov	w20, #0x1                   	// #1
   89cc0:	1ac02294 	lsl	w20, w20, w0
   89cc4:	b9400020 	ldr	w0, [x1]
   89cc8:	6a00029f 	tst	w20, w0
   89ccc:	540004e0 	b.eq	89d68 <CDMAChannel::InterruptHandler()+0xd8>  // b.none
   89cd0:	d28ffc00 	mov	x0, #0x7fe0                	// #32736
   89cd4:	f2a7e000 	movk	x0, #0x3f00, lsl #16
   89cd8:	b9000014 	str	w20, [x0]
   89cdc:	b9400260 	ldr	w0, [x19]
   89ce0:	114fc000 	add	w0, w0, #0x3f0, lsl #12
   89ce4:	1101c000 	add	w0, w0, #0x70
   89ce8:	53185c00 	lsl	w0, w0, #8
   89cec:	b9400014 	ldr	w20, [x0]
   89cf0:	36100254 	tbz	w20, #2, 89d38 <CDMAChannel::InterruptHandler()+0xa8>
   89cf4:	370002f4 	tbnz	w20, #0, 89d50 <CDMAChannel::InterruptHandler()+0xc0>
   89cf8:	b9400260 	ldr	w0, [x19]
   89cfc:	d2780281 	eor	x1, x20, #0x100
   89d00:	f9401663 	ldr	x3, [x19, #40]
   89d04:	52800082 	mov	w2, #0x4                   	// #4
   89d08:	114fc000 	add	w0, w0, #0x3f0, lsl #12
   89d0c:	53082021 	ubfx	w1, w1, #8, #1
   89d10:	1101c000 	add	w0, w0, #0x70
   89d14:	53185c00 	lsl	w0, w0, #8
   89d18:	b9000002 	str	w2, [x0]
   89d1c:	3900e261 	strb	w1, [x19, #56]
   89d20:	b4000443 	cbz	x3, 89da8 <CDMAChannel::InterruptHandler()+0x118>
   89d24:	b9400260 	ldr	w0, [x19]
   89d28:	f9401a62 	ldr	x2, [x19, #48]
   89d2c:	a94153f3 	ldp	x19, x20, [sp, #16]
   89d30:	a8c27bfd 	ldp	x29, x30, [sp], #32
   89d34:	d61f0060 	br	x3
   89d38:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   89d3c:	91246021 	add	x1, x1, #0x918
   89d40:	52802f42 	mov	w2, #0x17a                 	// #378
   89d44:	910c8020 	add	x0, x1, #0x320
   89d48:	97fffa3a 	bl	88630 <assertion_failed>
   89d4c:	3607fd74 	tbz	w20, #0, 89cf8 <CDMAChannel::InterruptHandler()+0x68>
   89d50:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   89d54:	91246021 	add	x1, x1, #0x918
   89d58:	52802f62 	mov	w2, #0x17b                 	// #379
   89d5c:	910cc020 	add	x0, x1, #0x330
   89d60:	97fffa34 	bl	88630 <assertion_failed>
   89d64:	17ffffe5 	b	89cf8 <CDMAChannel::InterruptHandler()+0x68>
   89d68:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   89d6c:	91246021 	add	x1, x1, #0x918
   89d70:	52802ec2 	mov	w2, #0x176                 	// #374
   89d74:	910c2020 	add	x0, x1, #0x308
   89d78:	97fffa2e 	bl	88630 <assertion_failed>
   89d7c:	17ffffd5 	b	89cd0 <CDMAChannel::InterruptHandler()+0x40>
   89d80:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   89d84:	91246021 	add	x1, x1, #0x918
   89d88:	9100c020 	add	x0, x1, #0x30
   89d8c:	52802e02 	mov	w2, #0x170                 	// #368
   89d90:	97fffa28 	bl	88630 <assertion_failed>
   89d94:	b9400260 	ldr	w0, [x19]
   89d98:	17ffffc7 	b	89cb4 <CDMAChannel::InterruptHandler()+0x24>
   89d9c:	f9402661 	ldr	x1, [x19, #72]
   89da0:	97fff764 	bl	87b30 <CleanAndInvalidateDataCacheRange>
   89da4:	17ffffc1 	b	89ca8 <CDMAChannel::InterruptHandler()+0x18>
   89da8:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   89dac:	91246021 	add	x1, x1, #0x918
   89db0:	91084020 	add	x0, x1, #0x210
   89db4:	52803042 	mov	w2, #0x182                 	// #386
   89db8:	97fffa1e 	bl	88630 <assertion_failed>
   89dbc:	3940e261 	ldrb	w1, [x19, #56]
   89dc0:	f9401663 	ldr	x3, [x19, #40]
   89dc4:	b9400260 	ldr	w0, [x19]
   89dc8:	f9401a62 	ldr	x2, [x19, #48]
   89dcc:	a94153f3 	ldp	x19, x20, [sp, #16]
   89dd0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   89dd4:	d61f0060 	br	x3
   89dd8:	d503201f 	nop
   89ddc:	d503201f 	nop

0000000000089de0 <CDMAChannel::InterruptStub(void*)>:
   89de0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   89de4:	910003fd 	mov	x29, sp
   89de8:	f9000bf3 	str	x19, [sp, #16]
   89dec:	aa0003f3 	mov	x19, x0
   89df0:	b40000a0 	cbz	x0, 89e04 <CDMAChannel::InterruptStub(void*)+0x24>
   89df4:	aa1303e0 	mov	x0, x19
   89df8:	f9400bf3 	ldr	x19, [sp, #16]
   89dfc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   89e00:	17ffffa4 	b	89c90 <CDMAChannel::InterruptHandler()>
   89e04:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   89e08:	91246021 	add	x1, x1, #0x918
   89e0c:	910d2020 	add	x0, x1, #0x348
   89e10:	52803122 	mov	w2, #0x189                 	// #393
   89e14:	97fffa07 	bl	88630 <assertion_failed>
   89e18:	aa1303e0 	mov	x0, x19
   89e1c:	f9400bf3 	ldr	x19, [sp, #16]
   89e20:	a8c27bfd 	ldp	x29, x30, [sp], #32
   89e24:	17ffff9b 	b	89c90 <CDMAChannel::InterruptHandler()>
	...

0000000000089e30 <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
   89e30:	91004002 	add	x2, x0, #0x10
   89e34:	91070003 	add	x3, x0, #0x1c0
   89e38:	f9000001 	str	x1, [x0]
   89e3c:	3900201f 	strb	wzr, [x0, #8]
   89e40:	f800845f 	str	xzr, [x2], #8
   89e44:	eb03005f 	cmp	x2, x3
   89e48:	54ffffc1 	b.ne	89e40 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x10>  // b.any
   89e4c:	d65f03c0 	ret

0000000000089e50 <CGPIOManager::~CGPIOManager()>:
   89e50:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   89e54:	910003fd 	mov	x29, sp
   89e58:	a90153f3 	stp	x19, x20, [sp, #16]
   89e5c:	b0000034 	adrp	x20, 8e000 <font_data+0x5e0>
   89e60:	91320294 	add	x20, x20, #0xc80
   89e64:	a9025bf5 	stp	x21, x22, [sp, #32]
   89e68:	91004013 	add	x19, x0, #0x10
   89e6c:	b0000035 	adrp	x21, 8e000 <font_data+0x5e0>
   89e70:	9131c2b5 	add	x21, x21, #0xc70
   89e74:	f9001bf7 	str	x23, [sp, #48]
   89e78:	91070016 	add	x22, x0, #0x1c0
   89e7c:	aa0003f7 	mov	x23, x0
   89e80:	f9400263 	ldr	x3, [x19]
   89e84:	52800582 	mov	w2, #0x2c                  	// #44
   89e88:	aa1503e1 	mov	x1, x21
   89e8c:	aa1403e0 	mov	x0, x20
   89e90:	91002273 	add	x19, x19, #0x8
   89e94:	b4000043 	cbz	x3, 89e9c <CGPIOManager::~CGPIOManager()+0x4c>
   89e98:	97fff9e6 	bl	88630 <assertion_failed>
   89e9c:	eb16027f 	cmp	x19, x22
   89ea0:	54ffff01 	b.ne	89e80 <CGPIOManager::~CGPIOManager()+0x30>  // b.any
   89ea4:	394022e0 	ldrb	w0, [x23, #8]
   89ea8:	34000120 	cbz	w0, 89ecc <CGPIOManager::~CGPIOManager()+0x7c>
   89eac:	f94002e0 	ldr	x0, [x23]
   89eb0:	b4000180 	cbz	x0, 89ee0 <CGPIOManager::~CGPIOManager()+0x90>
   89eb4:	a94153f3 	ldp	x19, x20, [sp, #16]
   89eb8:	52800681 	mov	w1, #0x34                  	// #52
   89ebc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   89ec0:	f9401bf7 	ldr	x23, [sp, #48]
   89ec4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   89ec8:	140001ee 	b	8a680 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   89ecc:	a94153f3 	ldp	x19, x20, [sp, #16]
   89ed0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   89ed4:	f9401bf7 	ldr	x23, [sp, #48]
   89ed8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   89edc:	d65f03c0 	ret
   89ee0:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   89ee4:	b0000020 	adrp	x0, 8e000 <font_data+0x5e0>
   89ee8:	52800642 	mov	w2, #0x32                  	// #50
   89eec:	91326000 	add	x0, x0, #0xc98
   89ef0:	9131c021 	add	x1, x1, #0xc70
   89ef4:	97fff9cf 	bl	88630 <assertion_failed>
   89ef8:	f94002e0 	ldr	x0, [x23]
   89efc:	17ffffee 	b	89eb4 <CGPIOManager::~CGPIOManager()+0x64>

0000000000089f00 <CGPIOManager::Initialize()>:
   89f00:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   89f04:	910003fd 	mov	x29, sp
   89f08:	f9000bf3 	str	x19, [sp, #16]
   89f0c:	aa0003f3 	mov	x19, x0
   89f10:	39402000 	ldrb	w0, [x0, #8]
   89f14:	350001a0 	cbnz	w0, 89f48 <CGPIOManager::Initialize()+0x48>
   89f18:	f9400260 	ldr	x0, [x19]
   89f1c:	b4000260 	cbz	x0, 89f68 <CGPIOManager::Initialize()+0x68>
   89f20:	aa1303e3 	mov	x3, x19
   89f24:	52800681 	mov	w1, #0x34                  	// #52
   89f28:	b0000002 	adrp	x2, 8a000 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x70>
   89f2c:	91080042 	add	x2, x2, #0x200
   89f30:	94000180 	bl	8a530 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   89f34:	52800020 	mov	w0, #0x1                   	// #1
   89f38:	39002260 	strb	w0, [x19, #8]
   89f3c:	f9400bf3 	ldr	x19, [sp, #16]
   89f40:	a8c27bfd 	ldp	x29, x30, [sp], #32
   89f44:	d65f03c0 	ret
   89f48:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   89f4c:	b0000020 	adrp	x0, 8e000 <font_data+0x5e0>
   89f50:	52800762 	mov	w2, #0x3b                  	// #59
   89f54:	9132c000 	add	x0, x0, #0xcb0
   89f58:	9131c021 	add	x1, x1, #0xc70
   89f5c:	97fff9b5 	bl	88630 <assertion_failed>
   89f60:	f9400260 	ldr	x0, [x19]
   89f64:	b5fffde0 	cbnz	x0, 89f20 <CGPIOManager::Initialize()+0x20>
   89f68:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   89f6c:	b0000020 	adrp	x0, 8e000 <font_data+0x5e0>
   89f70:	52800782 	mov	w2, #0x3c                  	// #60
   89f74:	91326000 	add	x0, x0, #0xc98
   89f78:	9131c021 	add	x1, x1, #0xc70
   89f7c:	97fff9ad 	bl	88630 <assertion_failed>
   89f80:	f9400260 	ldr	x0, [x19]
   89f84:	17ffffe7 	b	89f20 <CGPIOManager::Initialize()+0x20>
   89f88:	d503201f 	nop
   89f8c:	d503201f 	nop

0000000000089f90 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
   89f90:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   89f94:	910003fd 	mov	x29, sp
   89f98:	f90013f5 	str	x21, [sp, #32]
   89f9c:	aa0003f5 	mov	x21, x0
   89fa0:	39402000 	ldrb	w0, [x0, #8]
   89fa4:	a90153f3 	stp	x19, x20, [sp, #16]
   89fa8:	aa0103f4 	mov	x20, x1
   89fac:	34000260 	cbz	w0, 89ff8 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x68>
   89fb0:	b4000334 	cbz	x20, 8a014 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x84>
   89fb4:	b9400a93 	ldr	w19, [x20, #8]
   89fb8:	7100d67f 	cmp	w19, #0x35
   89fbc:	540003e8 	b.hi	8a038 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0xa8>  // b.pmore
   89fc0:	8b334eb3 	add	x19, x21, w19, uxtw #3
   89fc4:	f9400a60 	ldr	x0, [x19, #16]
   89fc8:	b40000e0 	cbz	x0, 89fe4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x54>
   89fcc:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   89fd0:	b0000020 	adrp	x0, 8e000 <font_data+0x5e0>
   89fd4:	52800962 	mov	w2, #0x4b                  	// #75
   89fd8:	9131c021 	add	x1, x1, #0xc70
   89fdc:	91320000 	add	x0, x0, #0xc80
   89fe0:	97fff994 	bl	88630 <assertion_failed>
   89fe4:	f94013f5 	ldr	x21, [sp, #32]
   89fe8:	f9000a74 	str	x20, [x19, #16]
   89fec:	a94153f3 	ldp	x19, x20, [sp, #16]
   89ff0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   89ff4:	d65f03c0 	ret
   89ff8:	b0000021 	adrp	x1, 8e000 <font_data+0x5e0>
   89ffc:	b0000020 	adrp	x0, 8e000 <font_data+0x5e0>
   8a000:	528008a2 	mov	w2, #0x45                  	// #69
   8a004:	9131c021 	add	x1, x1, #0xc70
   8a008:	91332000 	add	x0, x0, #0xcc8
   8a00c:	97fff989 	bl	88630 <assertion_failed>
   8a010:	b5fffd34 	cbnz	x20, 89fb4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x24>
   8a014:	90000021 	adrp	x1, 8e000 <font_data+0x5e0>
   8a018:	90000020 	adrp	x0, 8e000 <font_data+0x5e0>
   8a01c:	528008e2 	mov	w2, #0x47                  	// #71
   8a020:	9131c021 	add	x1, x1, #0xc70
   8a024:	91336000 	add	x0, x0, #0xcd8
   8a028:	97fff982 	bl	88630 <assertion_failed>
   8a02c:	b9400a93 	ldr	w19, [x20, #8]
   8a030:	7100d67f 	cmp	w19, #0x35
   8a034:	54fffc69 	b.ls	89fc0 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x30>  // b.plast
   8a038:	90000021 	adrp	x1, 8e000 <font_data+0x5e0>
   8a03c:	90000020 	adrp	x0, 8e000 <font_data+0x5e0>
   8a040:	52800922 	mov	w2, #0x49                  	// #73
   8a044:	9131c021 	add	x1, x1, #0xc70
   8a048:	9133a000 	add	x0, x0, #0xce8
   8a04c:	97fff979 	bl	88630 <assertion_failed>
   8a050:	17ffffdc 	b	89fc0 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x30>
   8a054:	d503201f 	nop
   8a058:	d503201f 	nop
   8a05c:	d503201f 	nop

000000000008a060 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
   8a060:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8a064:	910003fd 	mov	x29, sp
   8a068:	a90153f3 	stp	x19, x20, [sp, #16]
   8a06c:	aa0003f4 	mov	x20, x0
   8a070:	39402000 	ldrb	w0, [x0, #8]
   8a074:	aa0103f3 	mov	x19, x1
   8a078:	34000180 	cbz	w0, 8a0a8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x48>
   8a07c:	b4000253 	cbz	x19, 8a0c4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x64>
   8a080:	b9400a73 	ldr	w19, [x19, #8]
   8a084:	7100d67f 	cmp	w19, #0x35
   8a088:	54000308 	b.hi	8a0e8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x88>  // b.pmore
   8a08c:	8b334e93 	add	x19, x20, w19, uxtw #3
   8a090:	f9400a60 	ldr	x0, [x19, #16]
   8a094:	b40003c0 	cbz	x0, 8a10c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xac>
   8a098:	f9000a7f 	str	xzr, [x19, #16]
   8a09c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a0a0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8a0a4:	d65f03c0 	ret
   8a0a8:	90000021 	adrp	x1, 8e000 <font_data+0x5e0>
   8a0ac:	90000020 	adrp	x0, 8e000 <font_data+0x5e0>
   8a0b0:	52800a42 	mov	w2, #0x52                  	// #82
   8a0b4:	9131c021 	add	x1, x1, #0xc70
   8a0b8:	91332000 	add	x0, x0, #0xcc8
   8a0bc:	97fff95d 	bl	88630 <assertion_failed>
   8a0c0:	b5fffe13 	cbnz	x19, 8a080 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x20>
   8a0c4:	90000021 	adrp	x1, 8e000 <font_data+0x5e0>
   8a0c8:	90000020 	adrp	x0, 8e000 <font_data+0x5e0>
   8a0cc:	52800a82 	mov	w2, #0x54                  	// #84
   8a0d0:	9131c021 	add	x1, x1, #0xc70
   8a0d4:	91336000 	add	x0, x0, #0xcd8
   8a0d8:	97fff956 	bl	88630 <assertion_failed>
   8a0dc:	b9400a73 	ldr	w19, [x19, #8]
   8a0e0:	7100d67f 	cmp	w19, #0x35
   8a0e4:	54fffd49 	b.ls	8a08c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x2c>  // b.plast
   8a0e8:	8b334e93 	add	x19, x20, w19, uxtw #3
   8a0ec:	90000021 	adrp	x1, 8e000 <font_data+0x5e0>
   8a0f0:	90000020 	adrp	x0, 8e000 <font_data+0x5e0>
   8a0f4:	52800ac2 	mov	w2, #0x56                  	// #86
   8a0f8:	9133a000 	add	x0, x0, #0xce8
   8a0fc:	9131c021 	add	x1, x1, #0xc70
   8a100:	97fff94c 	bl	88630 <assertion_failed>
   8a104:	f9400a60 	ldr	x0, [x19, #16]
   8a108:	b5fffc80 	cbnz	x0, 8a098 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x38>
   8a10c:	52800b02 	mov	w2, #0x58                  	// #88
   8a110:	90000021 	adrp	x1, 8e000 <font_data+0x5e0>
   8a114:	90000020 	adrp	x0, 8e000 <font_data+0x5e0>
   8a118:	9131c021 	add	x1, x1, #0xc70
   8a11c:	91340000 	add	x0, x0, #0xd00
   8a120:	97fff944 	bl	88630 <assertion_failed>
   8a124:	f9000a7f 	str	xzr, [x19, #16]
   8a128:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a12c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8a130:	d65f03c0 	ret
   8a134:	d503201f 	nop
   8a138:	d503201f 	nop
   8a13c:	d503201f 	nop

000000000008a140 <CGPIOManager::InterruptHandler()>:
   8a140:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8a144:	910003fd 	mov	x29, sp
   8a148:	a90153f3 	stp	x19, x20, [sp, #16]
   8a14c:	aa0003f4 	mov	x20, x0
   8a150:	39402000 	ldrb	w0, [x0, #8]
   8a154:	34000420 	cbz	w0, 8a1d8 <CGPIOManager::InterruptHandler()+0x98>
   8a158:	d2800800 	mov	x0, #0x40                  	// #64
   8a15c:	f2a7e400 	movk	x0, #0x3f20, lsl #16
   8a160:	d2800881 	mov	x1, #0x44                  	// #68
   8a164:	f2a7e401 	movk	x1, #0x3f20, lsl #16
   8a168:	b9400000 	ldr	w0, [x0]
   8a16c:	52800013 	mov	w19, #0x0                   	// #0
   8a170:	37000160 	tbnz	w0, #0, 8a19c <CGPIOManager::InterruptHandler()+0x5c>
   8a174:	11000673 	add	w19, w19, #0x1
   8a178:	53017c00 	lsr	w0, w0, #1
   8a17c:	f240127f 	tst	x19, #0x1f
   8a180:	54000041 	b.ne	8a188 <CGPIOManager::InterruptHandler()+0x48>  // b.any
   8a184:	b9400020 	ldr	w0, [x1]
   8a188:	7100da7f 	cmp	w19, #0x36
   8a18c:	54ffff21 	b.ne	8a170 <CGPIOManager::InterruptHandler()+0x30>  // b.any
   8a190:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a194:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8a198:	d65f03c0 	ret
   8a19c:	8b334e94 	add	x20, x20, w19, uxtw #3
   8a1a0:	f9400a80 	ldr	x0, [x20, #16]
   8a1a4:	b4000280 	cbz	x0, 8a1f4 <CGPIOManager::InterruptHandler()+0xb4>
   8a1a8:	97ffdfce 	bl	820e0 <CGPIOPin::InterruptHandler()>
   8a1ac:	52800200 	mov	w0, #0x10                  	// #16
   8a1b0:	72a1f900 	movk	w0, #0xfc8, lsl #16
   8a1b4:	12001261 	and	w1, w19, #0x1f
   8a1b8:	0b531413 	add	w19, w0, w19, lsr #5
   8a1bc:	52800020 	mov	w0, #0x1                   	// #1
   8a1c0:	d37e7273 	ubfiz	x19, x19, #2, #29
   8a1c4:	1ac12000 	lsl	w0, w0, w1
   8a1c8:	b9000260 	str	w0, [x19]
   8a1cc:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a1d0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8a1d4:	d65f03c0 	ret
   8a1d8:	90000021 	adrp	x1, 8e000 <font_data+0x5e0>
   8a1dc:	90000020 	adrp	x0, 8e000 <font_data+0x5e0>
   8a1e0:	52800bc2 	mov	w2, #0x5e                  	// #94
   8a1e4:	9131c021 	add	x1, x1, #0xc70
   8a1e8:	91332000 	add	x0, x0, #0xcc8
   8a1ec:	97fff911 	bl	88630 <assertion_failed>
   8a1f0:	17ffffda 	b	8a158 <CGPIOManager::InterruptHandler()+0x18>
   8a1f4:	2a1303e0 	mov	w0, w19
   8a1f8:	97ffdfe6 	bl	82190 <CGPIOPin::DisableAllInterrupts(unsigned int)>
   8a1fc:	17ffffec 	b	8a1ac <CGPIOManager::InterruptHandler()+0x6c>

000000000008a200 <CGPIOManager::InterruptStub(void*)>:
   8a200:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8a204:	910003fd 	mov	x29, sp
   8a208:	f9000bf3 	str	x19, [sp, #16]
   8a20c:	aa0003f3 	mov	x19, x0
   8a210:	b40000a0 	cbz	x0, 8a224 <CGPIOManager::InterruptStub(void*)+0x24>
   8a214:	aa1303e0 	mov	x0, x19
   8a218:	f9400bf3 	ldr	x19, [sp, #16]
   8a21c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8a220:	17ffffc8 	b	8a140 <CGPIOManager::InterruptHandler()>
   8a224:	52801142 	mov	w2, #0x8a                  	// #138
   8a228:	90000021 	adrp	x1, 8e000 <font_data+0x5e0>
   8a22c:	90000020 	adrp	x0, 8e000 <font_data+0x5e0>
   8a230:	9131c021 	add	x1, x1, #0xc70
   8a234:	91346000 	add	x0, x0, #0xd18
   8a238:	97fff8fe 	bl	88630 <assertion_failed>
   8a23c:	aa1303e0 	mov	x0, x19
   8a240:	f9400bf3 	ldr	x19, [sp, #16]
   8a244:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8a248:	17ffffbe 	b	8a140 <CGPIOManager::InterruptHandler()>
   8a24c:	00000000 	.inst	0x00000000 ; undefined

000000000008a250 <CInterruptSystem::CInterruptSystem()>:
   8a250:	aa0003e1 	mov	x1, x0
   8a254:	910a8002 	add	x2, x0, #0x2a0
   8a258:	f900003f 	str	xzr, [x1]
   8a25c:	91002021 	add	x1, x1, #0x8
   8a260:	f9014c3f 	str	xzr, [x1, #664]
   8a264:	eb02003f 	cmp	x1, x2
   8a268:	54ffff81 	b.ne	8a258 <CInterruptSystem::CInterruptSystem()+0x8>  // b.any
   8a26c:	b0000021 	adrp	x1, 8f000 <vtable for CDevice+0x720>
   8a270:	f9031020 	str	x0, [x1, #1568]
   8a274:	d65f03c0 	ret
   8a278:	d503201f 	nop
   8a27c:	d503201f 	nop

000000000008a280 <CInterruptSystem::~CInterruptSystem()>:
   8a280:	d50342df 	msr	daifset, #0x2
   8a284:	d2964183 	mov	x3, #0xb20c                	// #45580
   8a288:	f2a7e003 	movk	x3, #0x3f00, lsl #16
   8a28c:	d2964382 	mov	x2, #0xb21c                	// #45596
   8a290:	f2a7e002 	movk	x2, #0x3f00, lsl #16
   8a294:	b900007f 	str	wzr, [x3]
   8a298:	d2964401 	mov	x1, #0xb220                	// #45600
   8a29c:	f2a7e001 	movk	x1, #0x3f00, lsl #16
   8a2a0:	12800000 	mov	w0, #0xffffffff            	// #-1
   8a2a4:	b9000040 	str	w0, [x2]
   8a2a8:	b9000020 	str	w0, [x1]
   8a2ac:	d2800802 	mov	x2, #0x40                  	// #64
   8a2b0:	f2a80002 	movk	x2, #0x4000, lsl #16
   8a2b4:	b9001860 	str	w0, [x3, #24]
   8a2b8:	b0000021 	adrp	x1, 8f000 <vtable for CDevice+0x720>
   8a2bc:	b900005f 	str	wzr, [x2]
   8a2c0:	f903103f 	str	xzr, [x1, #1568]
   8a2c4:	d65f03c0 	ret
   8a2c8:	d503201f 	nop
   8a2cc:	d503201f 	nop

000000000008a2d0 <CInterruptSystem::Initialize()>:
   8a2d0:	d2964182 	mov	x2, #0xb20c                	// #45580
   8a2d4:	f2a7e002 	movk	x2, #0x3f00, lsl #16
   8a2d8:	d2964381 	mov	x1, #0xb21c                	// #45596
   8a2dc:	f2a7e001 	movk	x1, #0x3f00, lsl #16
   8a2e0:	b900005f 	str	wzr, [x2]
   8a2e4:	d2964403 	mov	x3, #0xb220                	// #45600
   8a2e8:	f2a7e003 	movk	x3, #0x3f00, lsl #16
   8a2ec:	12800000 	mov	w0, #0xffffffff            	// #-1
   8a2f0:	b9000020 	str	w0, [x1]
   8a2f4:	b9000060 	str	w0, [x3]
   8a2f8:	d2800801 	mov	x1, #0x40                  	// #64
   8a2fc:	f2a80001 	movk	x1, #0x4000, lsl #16
   8a300:	b9001840 	str	w0, [x2, #24]
   8a304:	b900003f 	str	wzr, [x1]
   8a308:	d50342ff 	msr	daifclr, #0x2
   8a30c:	52800020 	mov	w0, #0x1                   	// #1
   8a310:	d65f03c0 	ret
   8a314:	d503201f 	nop
   8a318:	d503201f 	nop
   8a31c:	d503201f 	nop

000000000008a320 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
   8a320:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8a324:	71011c3f 	cmp	w1, #0x47
   8a328:	910003fd 	mov	x29, sp
   8a32c:	a90153f3 	stp	x19, x20, [sp, #16]
   8a330:	2a0103f3 	mov	w19, w1
   8a334:	a9025bf5 	stp	x21, x22, [sp, #32]
   8a338:	aa0203f5 	mov	x21, x2
   8a33c:	aa0303f6 	mov	x22, x3
   8a340:	540003c8 	b.hi	8a3b8 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x98>  // b.pmore
   8a344:	b4000495 	cbz	x21, 8a3d4 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xb4>
   8a348:	b0000034 	adrp	x20, 8f000 <vtable for CDevice+0x720>
   8a34c:	91140280 	add	x0, x20, #0x500
   8a350:	f9400000 	ldr	x0, [x0]
   8a354:	b40000e0 	cbz	x0, 8a370 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x50>
   8a358:	90000021 	adrp	x1, 8e000 <font_data+0x5e0>
   8a35c:	90000020 	adrp	x0, 8e000 <font_data+0x5e0>
   8a360:	52801222 	mov	w2, #0x91                  	// #145
   8a364:	9134a021 	add	x1, x1, #0xd28
   8a368:	91354000 	add	x0, x0, #0xd50
   8a36c:	97fff8b1 	bl	88630 <assertion_failed>
   8a370:	91140294 	add	x20, x20, #0x500
   8a374:	71011e7f 	cmp	w19, #0x47
   8a378:	a9005a95 	stp	x21, x22, [x20]
   8a37c:	540000e9 	b.ls	8a398 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x78>  // b.plast
   8a380:	90000021 	adrp	x1, 8e000 <font_data+0x5e0>
   8a384:	90000020 	adrp	x0, 8e000 <font_data+0x5e0>
   8a388:	52801ae2 	mov	w2, #0xd7                  	// #215
   8a38c:	9134a021 	add	x1, x1, #0xd28
   8a390:	9134e000 	add	x0, x0, #0xd38
   8a394:	97fff8a7 	bl	88630 <assertion_failed>
   8a398:	d2964180 	mov	x0, #0xb20c                	// #45580
   8a39c:	f2a7e000 	movk	x0, #0x3f00, lsl #16
   8a3a0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8a3a4:	32190273 	orr	w19, w19, #0x80
   8a3a8:	b9000013 	str	w19, [x0]
   8a3ac:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a3b0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8a3b4:	d65f03c0 	ret
   8a3b8:	90000021 	adrp	x1, 8e000 <font_data+0x5e0>
   8a3bc:	90000020 	adrp	x0, 8e000 <font_data+0x5e0>
   8a3c0:	528011e2 	mov	w2, #0x8f                  	// #143
   8a3c4:	9134a021 	add	x1, x1, #0xd28
   8a3c8:	9134e000 	add	x0, x0, #0xd38
   8a3cc:	97fff899 	bl	88630 <assertion_failed>
   8a3d0:	b5fffbd5 	cbnz	x21, 8a348 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x28>
   8a3d4:	90000021 	adrp	x1, 8e000 <font_data+0x5e0>
   8a3d8:	90000020 	adrp	x0, 8e000 <font_data+0x5e0>
   8a3dc:	52801202 	mov	w2, #0x90                  	// #144
   8a3e0:	9134a021 	add	x1, x1, #0xd28
   8a3e4:	9135c000 	add	x0, x0, #0xd70
   8a3e8:	97fff892 	bl	88630 <assertion_failed>
   8a3ec:	17ffffd7 	b	8a348 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x28>

000000000008a3f0 <CInterruptSystem::DisconnectFIQ()>:
   8a3f0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8a3f4:	910003fd 	mov	x29, sp
   8a3f8:	f9000bf3 	str	x19, [sp, #16]
   8a3fc:	b0000033 	adrp	x19, 8f000 <vtable for CDevice+0x720>
   8a400:	91140260 	add	x0, x19, #0x500
   8a404:	f9400000 	ldr	x0, [x0]
   8a408:	b4000120 	cbz	x0, 8a42c <CInterruptSystem::DisconnectFIQ()+0x3c>
   8a40c:	d2964180 	mov	x0, #0xb20c                	// #45580
   8a410:	f2a7e000 	movk	x0, #0x3f00, lsl #16
   8a414:	91140273 	add	x19, x19, #0x500
   8a418:	b900001f 	str	wzr, [x0]
   8a41c:	a9007e7f 	stp	xzr, xzr, [x19]
   8a420:	f9400bf3 	ldr	x19, [sp, #16]
   8a424:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8a428:	d65f03c0 	ret
   8a42c:	52801362 	mov	w2, #0x9b                  	// #155
   8a430:	90000021 	adrp	x1, 8e000 <font_data+0x5e0>
   8a434:	90000020 	adrp	x0, 8e000 <font_data+0x5e0>
   8a438:	9134a021 	add	x1, x1, #0xd28
   8a43c:	9135a000 	add	x0, x0, #0xd68
   8a440:	97fff87c 	bl	88630 <assertion_failed>
   8a444:	d2964180 	mov	x0, #0xb20c                	// #45580
   8a448:	f2a7e000 	movk	x0, #0x3f00, lsl #16
   8a44c:	91140273 	add	x19, x19, #0x500
   8a450:	b900001f 	str	wzr, [x0]
   8a454:	a9007e7f 	stp	xzr, xzr, [x19]
   8a458:	f9400bf3 	ldr	x19, [sp, #16]
   8a45c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8a460:	d65f03c0 	ret
   8a464:	d503201f 	nop
   8a468:	d503201f 	nop
   8a46c:	d503201f 	nop

000000000008a470 <CInterruptSystem::EnableIRQ(unsigned int)>:
   8a470:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8a474:	71014c1f 	cmp	w0, #0x53
   8a478:	910003fd 	mov	x29, sp
   8a47c:	54000288 	b.hi	8a4cc <CInterruptSystem::EnableIRQ(unsigned int)+0x5c>  // b.pmore
   8a480:	71011c1f 	cmp	w0, #0x47
   8a484:	540004c8 	b.hi	8a51c <CInterruptSystem::EnableIRQ(unsigned int)+0xac>  // b.pmore
   8a488:	71007c1f 	cmp	w0, #0x1f
   8a48c:	540001a9 	b.ls	8a4c0 <CInterruptSystem::EnableIRQ(unsigned int)+0x50>  // b.plast
   8a490:	7100fc1f 	cmp	w0, #0x3f
   8a494:	d2964302 	mov	x2, #0xb218                	// #45592
   8a498:	f2a7e002 	movk	x2, #0x3f00, lsl #16
   8a49c:	d2964281 	mov	x1, #0xb214                	// #45588
   8a4a0:	f2a7e001 	movk	x1, #0x3f00, lsl #16
   8a4a4:	9a818042 	csel	x2, x2, x1, hi  // hi = pmore
   8a4a8:	12001000 	and	w0, w0, #0x1f
   8a4ac:	52800021 	mov	w1, #0x1                   	// #1
   8a4b0:	1ac02020 	lsl	w0, w1, w0
   8a4b4:	b9000040 	str	w0, [x2]
   8a4b8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8a4bc:	d65f03c0 	ret
   8a4c0:	d2964202 	mov	x2, #0xb210                	// #45584
   8a4c4:	f2a7e002 	movk	x2, #0x3f00, lsl #16
   8a4c8:	17fffff8 	b	8a4a8 <CInterruptSystem::EnableIRQ(unsigned int)+0x38>
   8a4cc:	90000020 	adrp	x0, 8e000 <font_data+0x5e0>
   8a4d0:	f9000bb3 	str	x19, [x29, #16]
   8a4d4:	528014e2 	mov	w2, #0xa7                  	// #167
   8a4d8:	90000033 	adrp	x19, 8e000 <font_data+0x5e0>
   8a4dc:	9134a261 	add	x1, x19, #0xd28
   8a4e0:	91360000 	add	x0, x0, #0xd80
   8a4e4:	97fff853 	bl	88630 <assertion_failed>
   8a4e8:	9134a261 	add	x1, x19, #0xd28
   8a4ec:	90000020 	adrp	x0, 8e000 <font_data+0x5e0>
   8a4f0:	52801602 	mov	w2, #0xb0                  	// #176
   8a4f4:	91366000 	add	x0, x0, #0xd98
   8a4f8:	97fff84e 	bl	88630 <assertion_failed>
   8a4fc:	f9400bb3 	ldr	x19, [x29, #16]
   8a500:	d2800801 	mov	x1, #0x40                  	// #64
   8a504:	f2a80001 	movk	x1, #0x4000, lsl #16
   8a508:	b9400020 	ldr	w0, [x1]
   8a50c:	321f0000 	orr	w0, w0, #0x2
   8a510:	b9000020 	str	w0, [x1]
   8a514:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8a518:	d65f03c0 	ret
   8a51c:	7101241f 	cmp	w0, #0x49
   8a520:	54ffff00 	b.eq	8a500 <CInterruptSystem::EnableIRQ(unsigned int)+0x90>  // b.none
   8a524:	f9000bb3 	str	x19, [x29, #16]
   8a528:	90000033 	adrp	x19, 8e000 <font_data+0x5e0>
   8a52c:	17ffffef 	b	8a4e8 <CInterruptSystem::EnableIRQ(unsigned int)+0x78>

000000000008a530 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
   8a530:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   8a534:	71014c3f 	cmp	w1, #0x53
   8a538:	910003fd 	mov	x29, sp
   8a53c:	a90153f3 	stp	x19, x20, [sp, #16]
   8a540:	2a0103f3 	mov	w19, w1
   8a544:	a9025bf5 	stp	x21, x22, [sp, #32]
   8a548:	aa0003f4 	mov	x20, x0
   8a54c:	a90363f7 	stp	x23, x24, [sp, #48]
   8a550:	aa0203f8 	mov	x24, x2
   8a554:	aa0303f7 	mov	x23, x3
   8a558:	54000268 	b.hi	8a5a4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x74>  // b.pmore
   8a55c:	2a1303f5 	mov	w21, w19
   8a560:	8b150e96 	add	x22, x20, x21, lsl #3
   8a564:	f8757a80 	ldr	x0, [x20, x21, lsl #3]
   8a568:	b40000e0 	cbz	x0, 8a584 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x54>
   8a56c:	90000021 	adrp	x1, 8e000 <font_data+0x5e0>
   8a570:	90000020 	adrp	x0, 8e000 <font_data+0x5e0>
   8a574:	52800ee2 	mov	w2, #0x77                  	// #119
   8a578:	9134a021 	add	x1, x1, #0xd28
   8a57c:	9136e000 	add	x0, x0, #0xdb8
   8a580:	97fff82c 	bl	88630 <assertion_failed>
   8a584:	f8357a98 	str	x24, [x20, x21, lsl #3]
   8a588:	2a1303e0 	mov	w0, w19
   8a58c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a590:	f90152d7 	str	x23, [x22, #672]
   8a594:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8a598:	a94363f7 	ldp	x23, x24, [sp, #48]
   8a59c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8a5a0:	17ffffb4 	b	8a470 <CInterruptSystem::EnableIRQ(unsigned int)>
   8a5a4:	90000021 	adrp	x1, 8e000 <font_data+0x5e0>
   8a5a8:	90000020 	adrp	x0, 8e000 <font_data+0x5e0>
   8a5ac:	52800ec2 	mov	w2, #0x76                  	// #118
   8a5b0:	9134a021 	add	x1, x1, #0xd28
   8a5b4:	91360000 	add	x0, x0, #0xd80
   8a5b8:	97fff81e 	bl	88630 <assertion_failed>
   8a5bc:	17ffffe8 	b	8a55c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x2c>

000000000008a5c0 <CInterruptSystem::DisableIRQ(unsigned int)>:
   8a5c0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8a5c4:	71014c1f 	cmp	w0, #0x53
   8a5c8:	910003fd 	mov	x29, sp
   8a5cc:	54000288 	b.hi	8a61c <CInterruptSystem::DisableIRQ(unsigned int)+0x5c>  // b.pmore
   8a5d0:	71011c1f 	cmp	w0, #0x47
   8a5d4:	540004c8 	b.hi	8a66c <CInterruptSystem::DisableIRQ(unsigned int)+0xac>  // b.pmore
   8a5d8:	71007c1f 	cmp	w0, #0x1f
   8a5dc:	540001a9 	b.ls	8a610 <CInterruptSystem::DisableIRQ(unsigned int)+0x50>  // b.plast
   8a5e0:	7100fc1f 	cmp	w0, #0x3f
   8a5e4:	d2964482 	mov	x2, #0xb224                	// #45604
   8a5e8:	f2a7e002 	movk	x2, #0x3f00, lsl #16
   8a5ec:	d2964401 	mov	x1, #0xb220                	// #45600
   8a5f0:	f2a7e001 	movk	x1, #0x3f00, lsl #16
   8a5f4:	9a818042 	csel	x2, x2, x1, hi  // hi = pmore
   8a5f8:	12001000 	and	w0, w0, #0x1f
   8a5fc:	52800021 	mov	w1, #0x1                   	// #1
   8a600:	1ac02020 	lsl	w0, w1, w0
   8a604:	b9000040 	str	w0, [x2]
   8a608:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8a60c:	d65f03c0 	ret
   8a610:	d2964382 	mov	x2, #0xb21c                	// #45596
   8a614:	f2a7e002 	movk	x2, #0x3f00, lsl #16
   8a618:	17fffff8 	b	8a5f8 <CInterruptSystem::DisableIRQ(unsigned int)+0x38>
   8a61c:	90000020 	adrp	x0, 8e000 <font_data+0x5e0>
   8a620:	f9000bb3 	str	x19, [x29, #16]
   8a624:	528017e2 	mov	w2, #0xbf                  	// #191
   8a628:	90000033 	adrp	x19, 8e000 <font_data+0x5e0>
   8a62c:	9134a261 	add	x1, x19, #0xd28
   8a630:	91360000 	add	x0, x0, #0xd80
   8a634:	97fff7ff 	bl	88630 <assertion_failed>
   8a638:	9134a261 	add	x1, x19, #0xd28
   8a63c:	90000020 	adrp	x0, 8e000 <font_data+0x5e0>
   8a640:	52801902 	mov	w2, #0xc8                  	// #200
   8a644:	91366000 	add	x0, x0, #0xd98
   8a648:	97fff7fa 	bl	88630 <assertion_failed>
   8a64c:	f9400bb3 	ldr	x19, [x29, #16]
   8a650:	d2800801 	mov	x1, #0x40                  	// #64
   8a654:	f2a80001 	movk	x1, #0x4000, lsl #16
   8a658:	b9400020 	ldr	w0, [x1]
   8a65c:	121e7800 	and	w0, w0, #0xfffffffd
   8a660:	b9000020 	str	w0, [x1]
   8a664:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8a668:	d65f03c0 	ret
   8a66c:	7101241f 	cmp	w0, #0x49
   8a670:	54ffff00 	b.eq	8a650 <CInterruptSystem::DisableIRQ(unsigned int)+0x90>  // b.none
   8a674:	f9000bb3 	str	x19, [x29, #16]
   8a678:	90000033 	adrp	x19, 8e000 <font_data+0x5e0>
   8a67c:	17ffffef 	b	8a638 <CInterruptSystem::DisableIRQ(unsigned int)+0x78>

000000000008a680 <CInterruptSystem::DisconnectIRQ(unsigned int)>:
   8a680:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8a684:	71014c3f 	cmp	w1, #0x53
   8a688:	910003fd 	mov	x29, sp
   8a68c:	a90153f3 	stp	x19, x20, [sp, #16]
   8a690:	aa0003f3 	mov	x19, x0
   8a694:	a9025bf5 	stp	x21, x22, [sp, #32]
   8a698:	2a0103f5 	mov	w21, w1
   8a69c:	540001a8 	b.hi	8a6d0 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x50>  // b.pmore
   8a6a0:	2a1503f4 	mov	w20, w21
   8a6a4:	8b140e76 	add	x22, x19, x20, lsl #3
   8a6a8:	f8747a60 	ldr	x0, [x19, x20, lsl #3]
   8a6ac:	b4000260 	cbz	x0, 8a6f8 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x78>
   8a6b0:	2a1503e0 	mov	w0, w21
   8a6b4:	97ffffc3 	bl	8a5c0 <CInterruptSystem::DisableIRQ(unsigned int)>
   8a6b8:	f8347a7f 	str	xzr, [x19, x20, lsl #3]
   8a6bc:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a6c0:	f90152df 	str	xzr, [x22, #672]
   8a6c4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8a6c8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8a6cc:	d65f03c0 	ret
   8a6d0:	2a1503f4 	mov	w20, w21
   8a6d4:	90000021 	adrp	x1, 8e000 <font_data+0x5e0>
   8a6d8:	90000020 	adrp	x0, 8e000 <font_data+0x5e0>
   8a6dc:	52801022 	mov	w2, #0x81                  	// #129
   8a6e0:	91360000 	add	x0, x0, #0xd80
   8a6e4:	9134a021 	add	x1, x1, #0xd28
   8a6e8:	97fff7d2 	bl	88630 <assertion_failed>
   8a6ec:	8b140e76 	add	x22, x19, x20, lsl #3
   8a6f0:	f8747a60 	ldr	x0, [x19, x20, lsl #3]
   8a6f4:	b5fffde0 	cbnz	x0, 8a6b0 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x30>
   8a6f8:	90000021 	adrp	x1, 8e000 <font_data+0x5e0>
   8a6fc:	9134a021 	add	x1, x1, #0xd28
   8a700:	52801042 	mov	w2, #0x82                  	// #130
   8a704:	90000020 	adrp	x0, 8e000 <font_data+0x5e0>
   8a708:	91376000 	add	x0, x0, #0xdd8
   8a70c:	97fff7c9 	bl	88630 <assertion_failed>
   8a710:	2a1503e0 	mov	w0, w21
   8a714:	97ffffab 	bl	8a5c0 <CInterruptSystem::DisableIRQ(unsigned int)>
   8a718:	f8347a7f 	str	xzr, [x19, x20, lsl #3]
   8a71c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a720:	f90152df 	str	xzr, [x22, #672]
   8a724:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8a728:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8a72c:	d65f03c0 	ret

000000000008a730 <CInterruptSystem::EnableFIQ(unsigned int)>:
   8a730:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8a734:	71011c1f 	cmp	w0, #0x47
   8a738:	910003fd 	mov	x29, sp
   8a73c:	f9000bf3 	str	x19, [sp, #16]
   8a740:	2a0003f3 	mov	w19, w0
   8a744:	540000e9 	b.ls	8a760 <CInterruptSystem::EnableFIQ(unsigned int)+0x30>  // b.plast
   8a748:	90000021 	adrp	x1, 8e000 <font_data+0x5e0>
   8a74c:	90000020 	adrp	x0, 8e000 <font_data+0x5e0>
   8a750:	52801ae2 	mov	w2, #0xd7                  	// #215
   8a754:	9134a021 	add	x1, x1, #0xd28
   8a758:	9134e000 	add	x0, x0, #0xd38
   8a75c:	97fff7b5 	bl	88630 <assertion_failed>
   8a760:	d2964180 	mov	x0, #0xb20c                	// #45580
   8a764:	f2a7e000 	movk	x0, #0x3f00, lsl #16
   8a768:	32190273 	orr	w19, w19, #0x80
   8a76c:	b9000013 	str	w19, [x0]
   8a770:	f9400bf3 	ldr	x19, [sp, #16]
   8a774:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8a778:	d65f03c0 	ret
   8a77c:	d503201f 	nop

000000000008a780 <CInterruptSystem::DisableFIQ()>:
   8a780:	d2964180 	mov	x0, #0xb20c                	// #45580
   8a784:	f2a7e000 	movk	x0, #0x3f00, lsl #16
   8a788:	b900001f 	str	wzr, [x0]
   8a78c:	d65f03c0 	ret

000000000008a790 <CInterruptSystem::Get()>:
   8a790:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8a794:	910003fd 	mov	x29, sp
   8a798:	f9000bf3 	str	x19, [sp, #16]
   8a79c:	b0000033 	adrp	x19, 8f000 <vtable for CDevice+0x720>
   8a7a0:	f9431260 	ldr	x0, [x19, #1568]
   8a7a4:	b4000080 	cbz	x0, 8a7b4 <CInterruptSystem::Get()+0x24>
   8a7a8:	f9400bf3 	ldr	x19, [sp, #16]
   8a7ac:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8a7b0:	d65f03c0 	ret
   8a7b4:	52801d22 	mov	w2, #0xe9                  	// #233
   8a7b8:	90000021 	adrp	x1, 8e000 <font_data+0x5e0>
   8a7bc:	f0000000 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   8a7c0:	9134a021 	add	x1, x1, #0xd28
   8a7c4:	91196000 	add	x0, x0, #0x658
   8a7c8:	97fff79a 	bl	88630 <assertion_failed>
   8a7cc:	f9431260 	ldr	x0, [x19, #1568]
   8a7d0:	f9400bf3 	ldr	x19, [sp, #16]
   8a7d4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8a7d8:	d65f03c0 	ret
   8a7dc:	d503201f 	nop

000000000008a7e0 <CInterruptSystem::CallIRQHandler(unsigned int)>:
   8a7e0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8a7e4:	71014c3f 	cmp	w1, #0x53
   8a7e8:	910003fd 	mov	x29, sp
   8a7ec:	a90153f3 	stp	x19, x20, [sp, #16]
   8a7f0:	2a0103f3 	mov	w19, w1
   8a7f4:	aa0003f4 	mov	x20, x0
   8a7f8:	54000168 	b.hi	8a824 <CInterruptSystem::CallIRQHandler(unsigned int)+0x44>  // b.pmore
   8a7fc:	2a1303e0 	mov	w0, w19
   8a800:	8b000e82 	add	x2, x20, x0, lsl #3
   8a804:	f8607a81 	ldr	x1, [x20, x0, lsl #3]
   8a808:	b40001c1 	cbz	x1, 8a840 <CInterruptSystem::CallIRQHandler(unsigned int)+0x60>
   8a80c:	f9415040 	ldr	x0, [x2, #672]
   8a810:	d63f0020 	blr	x1
   8a814:	52800020 	mov	w0, #0x1                   	// #1
   8a818:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a81c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8a820:	d65f03c0 	ret
   8a824:	90000021 	adrp	x1, 8e000 <font_data+0x5e0>
   8a828:	90000020 	adrp	x0, 8e000 <font_data+0x5e0>
   8a82c:	52801de2 	mov	w2, #0xef                  	// #239
   8a830:	9134a021 	add	x1, x1, #0xd28
   8a834:	91360000 	add	x0, x0, #0xd80
   8a838:	97fff77e 	bl	88630 <assertion_failed>
   8a83c:	17fffff0 	b	8a7fc <CInterruptSystem::CallIRQHandler(unsigned int)+0x1c>
   8a840:	2a1303e0 	mov	w0, w19
   8a844:	97ffff5f 	bl	8a5c0 <CInterruptSystem::DisableIRQ(unsigned int)>
   8a848:	52800000 	mov	w0, #0x0                   	// #0
   8a84c:	17fffff3 	b	8a818 <CInterruptSystem::CallIRQHandler(unsigned int)+0x38>

000000000008a850 <CInterruptSystem::InterruptHandler()>:
   8a850:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   8a854:	910003fd 	mov	x29, sp
   8a858:	f90017f6 	str	x22, [sp, #40]
   8a85c:	b0000036 	adrp	x22, 8f000 <vtable for CDevice+0x720>
   8a860:	f94312c0 	ldr	x0, [x22, #1568]
   8a864:	f9000bf3 	str	x19, [sp, #16]
   8a868:	b4000920 	cbz	x0, 8a98c <CInterruptSystem::InterruptHandler()+0x13c>
   8a86c:	d2800c01 	mov	x1, #0x60                  	// #96
   8a870:	f2a80001 	movk	x1, #0x4000, lsl #16
   8a874:	12802040 	mov	w0, #0xfffffefd            	// #-259
   8a878:	b9400033 	ldr	w19, [x1]
   8a87c:	6a00027f 	tst	w19, w0
   8a880:	540006c1 	b.ne	8a958 <CInterruptSystem::InterruptHandler()+0x108>  // b.any
   8a884:	37080793 	tbnz	w19, #1, 8a974 <CInterruptSystem::InterruptHandler()+0x124>
   8a888:	d2964082 	mov	x2, #0xb204                	// #45572
   8a88c:	f2a7e002 	movk	x2, #0x3f00, lsl #16
   8a890:	d2964101 	mov	x1, #0xb208                	// #45576
   8a894:	f2a7e001 	movk	x1, #0x3f00, lsl #16
   8a898:	b9400053 	ldr	w19, [x2]
   8a89c:	d2964000 	mov	x0, #0xb200                	// #45568
   8a8a0:	f2a7e000 	movk	x0, #0x3f00, lsl #16
   8a8a4:	b90043b3 	str	w19, [x29, #64]
   8a8a8:	f90013b5 	str	x21, [x29, #32]
   8a8ac:	d2800015 	mov	x21, #0x0                   	// #0
   8a8b0:	b9400021 	ldr	w1, [x1]
   8a8b4:	b90047a1 	str	w1, [x29, #68]
   8a8b8:	f9001bb7 	str	x23, [x29, #48]
   8a8bc:	910103b7 	add	x23, x29, #0x40
   8a8c0:	b9400000 	ldr	w0, [x0]
   8a8c4:	12001c00 	and	w0, w0, #0xff
   8a8c8:	b9004ba0 	str	w0, [x29, #72]
   8a8cc:	350000d3 	cbnz	w19, 8a8e4 <CInterruptSystem::InterruptHandler()+0x94>
   8a8d0:	910012b5 	add	x21, x21, #0x4
   8a8d4:	f10032bf 	cmp	x21, #0xc
   8a8d8:	540001c0 	b.eq	8a910 <CInterruptSystem::InterruptHandler()+0xc0>  // b.none
   8a8dc:	b8776ab3 	ldr	w19, [x21, x23]
   8a8e0:	34ffff93 	cbz	w19, 8a8d0 <CInterruptSystem::InterruptHandler()+0x80>
   8a8e4:	f9000fb4 	str	x20, [x29, #24]
   8a8e8:	531d72b4 	lsl	w20, w21, #3
   8a8ec:	d503201f 	nop
   8a8f0:	370001d3 	tbnz	w19, #0, 8a928 <CInterruptSystem::InterruptHandler()+0xd8>
   8a8f4:	53017e73 	lsr	w19, w19, #1
   8a8f8:	11000694 	add	w20, w20, #0x1
   8a8fc:	35ffffb3 	cbnz	w19, 8a8f0 <CInterruptSystem::InterruptHandler()+0xa0>
   8a900:	910012b5 	add	x21, x21, #0x4
   8a904:	f9400fb4 	ldr	x20, [x29, #24]
   8a908:	f10032bf 	cmp	x21, #0xc
   8a90c:	54fffe81 	b.ne	8a8dc <CInterruptSystem::InterruptHandler()+0x8c>  // b.any
   8a910:	f94013b5 	ldr	x21, [x29, #32]
   8a914:	f9401bb7 	ldr	x23, [x29, #48]
   8a918:	f9400bf3 	ldr	x19, [sp, #16]
   8a91c:	f94017f6 	ldr	x22, [sp, #40]
   8a920:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8a924:	d65f03c0 	ret
   8a928:	f94312c0 	ldr	x0, [x22, #1568]
   8a92c:	2a1403e1 	mov	w1, w20
   8a930:	97ffffac 	bl	8a7e0 <CInterruptSystem::CallIRQHandler(unsigned int)>
   8a934:	72001c1f 	tst	w0, #0xff
   8a938:	54fffde0 	b.eq	8a8f4 <CInterruptSystem::InterruptHandler()+0xa4>  // b.none
   8a93c:	f9400fb4 	ldr	x20, [x29, #24]
   8a940:	f94013b5 	ldr	x21, [x29, #32]
   8a944:	f9401bb7 	ldr	x23, [x29, #48]
   8a948:	f9400bf3 	ldr	x19, [sp, #16]
   8a94c:	f94017f6 	ldr	x22, [sp, #40]
   8a950:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8a954:	d65f03c0 	ret
   8a958:	90000021 	adrp	x1, 8e000 <font_data+0x5e0>
   8a95c:	90000020 	adrp	x0, 8e000 <font_data+0x5e0>
   8a960:	528020c2 	mov	w2, #0x106                 	// #262
   8a964:	9134a021 	add	x1, x1, #0xd28
   8a968:	9137e000 	add	x0, x0, #0xdf8
   8a96c:	97fff731 	bl	88630 <assertion_failed>
   8a970:	360ff8d3 	tbz	w19, #1, 8a888 <CInterruptSystem::InterruptHandler()+0x38>
   8a974:	f94312c0 	ldr	x0, [x22, #1568]
   8a978:	52800921 	mov	w1, #0x49                  	// #73
   8a97c:	f9400bf3 	ldr	x19, [sp, #16]
   8a980:	f94017f6 	ldr	x22, [sp, #40]
   8a984:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8a988:	17ffff96 	b	8a7e0 <CInterruptSystem::CallIRQHandler(unsigned int)>
   8a98c:	90000021 	adrp	x1, 8e000 <font_data+0x5e0>
   8a990:	f0000000 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   8a994:	52802042 	mov	w2, #0x102                 	// #258
   8a998:	9134a021 	add	x1, x1, #0xd28
   8a99c:	91196000 	add	x0, x0, #0x658
   8a9a0:	97fff724 	bl	88630 <assertion_failed>
   8a9a4:	17ffffb2 	b	8a86c <CInterruptSystem::InterruptHandler()+0x1c>
   8a9a8:	d503201f 	nop
   8a9ac:	d503201f 	nop

000000000008a9b0 <InterruptHandler>:
   8a9b0:	17ffffa8 	b	8a850 <CInterruptSystem::InterruptHandler()>
	...

000000000008a9c0 <CLogger::CLogger(unsigned int, CTimer*)>:
   8a9c0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8a9c4:	52800023 	mov	w3, #0x1                   	// #1
   8a9c8:	910003fd 	mov	x29, sp
   8a9cc:	f9000bf3 	str	x19, [sp, #16]
   8a9d0:	aa0003f3 	mov	x19, x0
   8a9d4:	d2880000 	mov	x0, #0x4000                	// #16384
   8a9d8:	b9000261 	str	w1, [x19]
   8a9dc:	a900fe62 	stp	x2, xzr, [x19, #8]
   8a9e0:	a901fe7f 	stp	xzr, xzr, [x19, #24]
   8a9e4:	b9002a63 	str	w3, [x19, #40]
   8a9e8:	f900e27f 	str	xzr, [x19, #448]
   8a9ec:	b901ca63 	str	w3, [x19, #456]
   8a9f0:	a91d7e7f 	stp	xzr, xzr, [x19, #464]
   8a9f4:	97fff56f 	bl	87fb0 <operator new[](unsigned long)>
   8a9f8:	f9000e60 	str	x0, [x19, #24]
   8a9fc:	b0000021 	adrp	x1, 8f000 <vtable for CDevice+0x720>
   8aa00:	f9031433 	str	x19, [x1, #1576]
   8aa04:	f9400bf3 	ldr	x19, [sp, #16]
   8aa08:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8aa0c:	d65f03c0 	ret

000000000008aa10 <CLogger::~CLogger()>:
   8aa10:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8aa14:	910003fd 	mov	x29, sp
   8aa18:	f9000bf3 	str	x19, [sp, #16]
   8aa1c:	aa0003f3 	mov	x19, x0
   8aa20:	b0000020 	adrp	x0, 8f000 <vtable for CDevice+0x720>
   8aa24:	f903141f 	str	xzr, [x0, #1576]
   8aa28:	b941c660 	ldr	w0, [x19, #452]
   8aa2c:	14000008 	b	8aa4c <CLogger::~CLogger()+0x3c>
   8aa30:	f9401860 	ldr	x0, [x3, #48]
   8aa34:	97fff56b 	bl	87fe0 <operator delete(void*, unsigned long)>
   8aa38:	b941c660 	ldr	w0, [x19, #452]
   8aa3c:	11000400 	add	w0, w0, #0x1
   8aa40:	b901c660 	str	w0, [x19, #452]
   8aa44:	7100c81f 	cmp	w0, #0x32
   8aa48:	54000160 	b.eq	8aa74 <CLogger::~CLogger()+0x64>  // b.none
   8aa4c:	b941c262 	ldr	w2, [x19, #448]
   8aa50:	8b204e63 	add	x3, x19, w0, uxtw #3
   8aa54:	d2802201 	mov	x1, #0x110                 	// #272
   8aa58:	6b00005f 	cmp	w2, w0
   8aa5c:	54fffea1 	b.ne	8aa30 <CLogger::~CLogger()+0x20>  // b.any
   8aa60:	f9400e60 	ldr	x0, [x19, #24]
   8aa64:	b40000e0 	cbz	x0, 8aa80 <CLogger::~CLogger()+0x70>
   8aa68:	f9400bf3 	ldr	x19, [sp, #16]
   8aa6c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8aa70:	17fff558 	b	87fd0 <operator delete[](void*)>
   8aa74:	52800000 	mov	w0, #0x0                   	// #0
   8aa78:	b901c67f 	str	wzr, [x19, #452]
   8aa7c:	17fffff4 	b	8aa4c <CLogger::~CLogger()+0x3c>
   8aa80:	f9400bf3 	ldr	x19, [sp, #16]
   8aa84:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8aa88:	d65f03c0 	ret
   8aa8c:	d503201f 	nop

000000000008aa90 <CLogger::Initialize(CDevice*)>:
   8aa90:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8aa94:	910003fd 	mov	x29, sp
   8aa98:	f9000bf3 	str	x19, [sp, #16]
   8aa9c:	aa0003f3 	mov	x19, x0
   8aaa0:	f9000801 	str	x1, [x0, #16]
   8aaa4:	97ffe17c 	bl	83094 <CMachineInfo::Get()>
   8aaa8:	97ffe061 	bl	82c2c <CMachineInfo::GetMachineName() const>
   8aaac:	aa0003e4 	mov	x4, x0
   8aab0:	90000023 	adrp	x3, 8e000 <font_data+0x5e0>
   8aab4:	91388063 	add	x3, x3, #0xe20
   8aab8:	aa1303e0 	mov	x0, x19
   8aabc:	52800062 	mov	w2, #0x3                   	// #3
   8aac0:	9100a061 	add	x1, x3, #0x28
   8aac4:	94000007 	bl	8aae0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8aac8:	52800020 	mov	w0, #0x1                   	// #1
   8aacc:	f9400bf3 	ldr	x19, [sp, #16]
   8aad0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8aad4:	d65f03c0 	ret
   8aad8:	d503201f 	nop
   8aadc:	d503201f 	nop

000000000008aae0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
   8aae0:	a9b17bfd 	stp	x29, x30, [sp, #-240]!
   8aae4:	910003fd 	mov	x29, sp
   8aae8:	9103c3a8 	add	x8, x29, #0xf0
   8aaec:	910343a9 	add	x9, x29, #0xd0
   8aaf0:	a90323a8 	stp	x8, x8, [x29, #48]
   8aaf4:	128003e8 	mov	w8, #0xffffffe0            	// #-32
   8aaf8:	f90023a9 	str	x9, [x29, #64]
   8aafc:	b9004ba8 	str	w8, [x29, #72]
   8ab00:	12800fe8 	mov	w8, #0xffffff80            	// #-128
   8ab04:	b9004fa8 	str	w8, [x29, #76]
   8ab08:	a9432faa 	ldp	x10, x11, [x29, #48]
   8ab0c:	a9012faa 	stp	x10, x11, [x29, #16]
   8ab10:	a94427a8 	ldp	x8, x9, [x29, #64]
   8ab14:	a90227a8 	stp	x8, x9, [x29, #32]
   8ab18:	3d8017a0 	str	q0, [x29, #80]
   8ab1c:	3d801ba1 	str	q1, [x29, #96]
   8ab20:	3d801fa2 	str	q2, [x29, #112]
   8ab24:	3d8023a3 	str	q3, [x29, #128]
   8ab28:	3d8027a4 	str	q4, [x29, #144]
   8ab2c:	3d802ba5 	str	q5, [x29, #160]
   8ab30:	3d802fa6 	str	q6, [x29, #176]
   8ab34:	3d8033a7 	str	q7, [x29, #192]
   8ab38:	a90d17a4 	stp	x4, x5, [x29, #208]
   8ab3c:	910043a4 	add	x4, x29, #0x10
   8ab40:	a90e1fa6 	stp	x6, x7, [x29, #224]
   8ab44:	94000003 	bl	8ab50 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
   8ab48:	a8cf7bfd 	ldp	x29, x30, [sp], #240
   8ab4c:	d65f03c0 	ret

000000000008ab50 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
   8ab50:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
   8ab54:	910003fd 	mov	x29, sp
   8ab58:	a9025bf5 	stp	x21, x22, [sp, #32]
   8ab5c:	aa0403f5 	mov	x21, x4
   8ab60:	a90153f3 	stp	x19, x20, [sp, #16]
   8ab64:	aa0103f6 	mov	x22, x1
   8ab68:	2a0203f4 	mov	w20, w2
   8ab6c:	aa0003f3 	mov	x19, x0
   8ab70:	f9001bf7 	str	x23, [sp, #48]
   8ab74:	910183a0 	add	x0, x29, #0x60
   8ab78:	aa0303f7 	mov	x23, x3
   8ab7c:	97ffe671 	bl	84540 <CString::CString()>
   8ab80:	a9401ea6 	ldp	x6, x7, [x21]
   8ab84:	910103a2 	add	x2, x29, #0x40
   8ab88:	a94116a4 	ldp	x4, x5, [x21, #16]
   8ab8c:	aa1703e1 	mov	x1, x23
   8ab90:	a9041fa6 	stp	x6, x7, [x29, #64]
   8ab94:	910183a0 	add	x0, x29, #0x60
   8ab98:	a90517a4 	stp	x4, x5, [x29, #80]
   8ab9c:	97ffe875 	bl	84d70 <CString::FormatV(char const*, std::__va_list)>
   8aba0:	910183a0 	add	x0, x29, #0x60
   8aba4:	97ffe683 	bl	845b0 <CString::operator char const*() const>
   8aba8:	2a1403e2 	mov	w2, w20
   8abac:	aa0003e3 	mov	x3, x0
   8abb0:	aa1603e1 	mov	x1, x22
   8abb4:	aa1303e0 	mov	x0, x19
   8abb8:	9400011a 	bl	8b020 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>
   8abbc:	b9400260 	ldr	w0, [x19]
   8abc0:	6b14001f 	cmp	w0, w20
   8abc4:	54000583 	b.cc	8ac74 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x124>  // b.lo, b.ul, b.last
   8abc8:	910203a0 	add	x0, x29, #0x80
   8abcc:	97ffe65d 	bl	84540 <CString::CString()>
   8abd0:	34000614 	cbz	w20, 8ac90 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x140>
   8abd4:	f9400660 	ldr	x0, [x19, #8]
   8abd8:	b4000a60 	cbz	x0, 8ad24 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d4>
   8abdc:	97ffecb5 	bl	85eb0 <CTimer::GetTimeString()>
   8abe0:	aa0003f5 	mov	x21, x0
   8abe4:	b4000a00 	cbz	x0, 8ad24 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d4>
   8abe8:	97ffe672 	bl	845b0 <CString::operator char const*() const>
   8abec:	90000034 	adrp	x20, 8e000 <font_data+0x5e0>
   8abf0:	91388297 	add	x23, x20, #0xe20
   8abf4:	aa0003e1 	mov	x1, x0
   8abf8:	910203a0 	add	x0, x29, #0x80
   8abfc:	97ffe6ad 	bl	846b0 <CString::Append(char const*)>
   8ac00:	910142e1 	add	x1, x23, #0x50
   8ac04:	910203a0 	add	x0, x29, #0x80
   8ac08:	97ffe6aa 	bl	846b0 <CString::Append(char const*)>
   8ac0c:	f94002a1 	ldr	x1, [x21]
   8ac10:	aa1503e0 	mov	x0, x21
   8ac14:	f9400421 	ldr	x1, [x1, #8]
   8ac18:	d63f0020 	blr	x1
   8ac1c:	aa1603e1 	mov	x1, x22
   8ac20:	910203a0 	add	x0, x29, #0x80
   8ac24:	97ffe6a3 	bl	846b0 <CString::Append(char const*)>
   8ac28:	910122e1 	add	x1, x23, #0x48
   8ac2c:	910203a0 	add	x0, x29, #0x80
   8ac30:	97ffe6a0 	bl	846b0 <CString::Append(char const*)>
   8ac34:	910183a0 	add	x0, x29, #0x60
   8ac38:	97ffe65e 	bl	845b0 <CString::operator char const*() const>
   8ac3c:	aa0003e1 	mov	x1, x0
   8ac40:	910203a0 	add	x0, x29, #0x80
   8ac44:	97ffe69b 	bl	846b0 <CString::Append(char const*)>
   8ac48:	91388281 	add	x1, x20, #0xe20
   8ac4c:	910203a0 	add	x0, x29, #0x80
   8ac50:	91010021 	add	x1, x1, #0x40
   8ac54:	97ffe697 	bl	846b0 <CString::Append(char const*)>
   8ac58:	910203a0 	add	x0, x29, #0x80
   8ac5c:	97ffe655 	bl	845b0 <CString::operator char const*() const>
   8ac60:	aa0003e1 	mov	x1, x0
   8ac64:	aa1303e0 	mov	x0, x19
   8ac68:	94000082 	bl	8ae70 <CLogger::Write(char const*)>
   8ac6c:	910203a0 	add	x0, x29, #0x80
   8ac70:	97ffe5f4 	bl	84440 <CString::~CString()>
   8ac74:	910183a0 	add	x0, x29, #0x60
   8ac78:	97ffe5f2 	bl	84440 <CString::~CString()>
   8ac7c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8ac80:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8ac84:	f9401bf7 	ldr	x23, [sp, #48]
   8ac88:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   8ac8c:	d65f03c0 	ret
   8ac90:	90000034 	adrp	x20, 8e000 <font_data+0x5e0>
   8ac94:	91388295 	add	x21, x20, #0xe20
   8ac98:	9100c2a1 	add	x1, x21, #0x30
   8ac9c:	910203a0 	add	x0, x29, #0x80
   8aca0:	97ffe64c 	bl	845d0 <CString::operator=(char const*)>
   8aca4:	f9400660 	ldr	x0, [x19, #8]
   8aca8:	b4000080 	cbz	x0, 8acb8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x168>
   8acac:	97ffec81 	bl	85eb0 <CTimer::GetTimeString()>
   8acb0:	aa0003f7 	mov	x23, x0
   8acb4:	b5000460 	cbnz	x0, 8ad40 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1f0>
   8acb8:	aa1603e1 	mov	x1, x22
   8acbc:	910203a0 	add	x0, x29, #0x80
   8acc0:	97ffe67c 	bl	846b0 <CString::Append(char const*)>
   8acc4:	91388294 	add	x20, x20, #0xe20
   8acc8:	910122a1 	add	x1, x21, #0x48
   8accc:	910203a0 	add	x0, x29, #0x80
   8acd0:	97ffe678 	bl	846b0 <CString::Append(char const*)>
   8acd4:	910183a0 	add	x0, x29, #0x60
   8acd8:	97ffe636 	bl	845b0 <CString::operator char const*() const>
   8acdc:	aa0003e1 	mov	x1, x0
   8ace0:	910203a0 	add	x0, x29, #0x80
   8ace4:	97ffe673 	bl	846b0 <CString::Append(char const*)>
   8ace8:	910203a0 	add	x0, x29, #0x80
   8acec:	9100e281 	add	x1, x20, #0x38
   8acf0:	97ffe670 	bl	846b0 <CString::Append(char const*)>
   8acf4:	91010281 	add	x1, x20, #0x40
   8acf8:	910203a0 	add	x0, x29, #0x80
   8acfc:	97ffe66d 	bl	846b0 <CString::Append(char const*)>
   8ad00:	910203a0 	add	x0, x29, #0x80
   8ad04:	97ffe62b 	bl	845b0 <CString::operator char const*() const>
   8ad08:	aa0003e1 	mov	x1, x0
   8ad0c:	aa1303e0 	mov	x0, x19
   8ad10:	94000058 	bl	8ae70 <CLogger::Write(char const*)>
   8ad14:	f940ee60 	ldr	x0, [x19, #472]
   8ad18:	b4000040 	cbz	x0, 8ad20 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d0>
   8ad1c:	d63f0000 	blr	x0
   8ad20:	97ffeaf0 	bl	858e0 <halt>
   8ad24:	aa1603e1 	mov	x1, x22
   8ad28:	910203a0 	add	x0, x29, #0x80
   8ad2c:	97ffe661 	bl	846b0 <CString::Append(char const*)>
   8ad30:	90000034 	adrp	x20, 8e000 <font_data+0x5e0>
   8ad34:	91388281 	add	x1, x20, #0xe20
   8ad38:	91012021 	add	x1, x1, #0x48
   8ad3c:	17ffffbc 	b	8ac2c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xdc>
   8ad40:	97ffe61c 	bl	845b0 <CString::operator char const*() const>
   8ad44:	aa0003e1 	mov	x1, x0
   8ad48:	910203a0 	add	x0, x29, #0x80
   8ad4c:	97ffe659 	bl	846b0 <CString::Append(char const*)>
   8ad50:	910142a1 	add	x1, x21, #0x50
   8ad54:	910203a0 	add	x0, x29, #0x80
   8ad58:	97ffe656 	bl	846b0 <CString::Append(char const*)>
   8ad5c:	f94002e1 	ldr	x1, [x23]
   8ad60:	aa1703e0 	mov	x0, x23
   8ad64:	f9400421 	ldr	x1, [x1, #8]
   8ad68:	d63f0020 	blr	x1
   8ad6c:	17ffffd3 	b	8acb8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x168>

000000000008ad70 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)>:
   8ad70:	b9400005 	ldr	w5, [x0]
   8ad74:	6b0200bf 	cmp	w5, w2
   8ad78:	540003a3 	b.cc	8adec <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x7c>  // b.lo, b.ul, b.last
   8ad7c:	a9b07bfd 	stp	x29, x30, [sp, #-256]!
   8ad80:	910003fd 	mov	x29, sp
   8ad84:	a90153f3 	stp	x19, x20, [sp, #16]
   8ad88:	aa0003f3 	mov	x19, x0
   8ad8c:	f90013f5 	str	x21, [sp, #32]
   8ad90:	aa0303f5 	mov	x21, x3
   8ad94:	3900e3bf 	strb	wzr, [x29, #56]
   8ad98:	340002c2 	cbz	w2, 8adf0 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x80>
   8ad9c:	9100e3a0 	add	x0, x29, #0x38
   8ada0:	90000034 	adrp	x20, 8e000 <font_data+0x5e0>
   8ada4:	91388294 	add	x20, x20, #0xe20
   8ada8:	97ffefa6 	bl	86c40 <strcat>
   8adac:	91012281 	add	x1, x20, #0x48
   8adb0:	9100e3a0 	add	x0, x29, #0x38
   8adb4:	97ffefa3 	bl	86c40 <strcat>
   8adb8:	aa1503e1 	mov	x1, x21
   8adbc:	9100e3a0 	add	x0, x29, #0x38
   8adc0:	97ffefa0 	bl	86c40 <strcat>
   8adc4:	91010281 	add	x1, x20, #0x40
   8adc8:	9100e3a0 	add	x0, x29, #0x38
   8adcc:	97ffef9d 	bl	86c40 <strcat>
   8add0:	9100e3a1 	add	x1, x29, #0x38
   8add4:	aa1303e0 	mov	x0, x19
   8add8:	94000026 	bl	8ae70 <CLogger::Write(char const*)>
   8addc:	f94013f5 	ldr	x21, [sp, #32]
   8ade0:	a94153f3 	ldp	x19, x20, [sp, #16]
   8ade4:	a8d07bfd 	ldp	x29, x30, [sp], #256
   8ade8:	d65f03c0 	ret
   8adec:	d65f03c0 	ret
   8adf0:	f90017b6 	str	x22, [x29, #40]
   8adf4:	90000036 	adrp	x22, 8e000 <font_data+0x5e0>
   8adf8:	913882d6 	add	x22, x22, #0xe20
   8adfc:	aa0103f4 	mov	x20, x1
   8ae00:	9100e3a0 	add	x0, x29, #0x38
   8ae04:	9100c2c1 	add	x1, x22, #0x30
   8ae08:	97ffef72 	bl	86bd0 <strcpy>
   8ae0c:	aa1403e1 	mov	x1, x20
   8ae10:	9100e3a0 	add	x0, x29, #0x38
   8ae14:	97ffef8b 	bl	86c40 <strcat>
   8ae18:	910122c1 	add	x1, x22, #0x48
   8ae1c:	9100e3a0 	add	x0, x29, #0x38
   8ae20:	97ffef88 	bl	86c40 <strcat>
   8ae24:	aa1503e1 	mov	x1, x21
   8ae28:	9100e3a0 	add	x0, x29, #0x38
   8ae2c:	97ffef85 	bl	86c40 <strcat>
   8ae30:	9100e2c1 	add	x1, x22, #0x38
   8ae34:	9100e3a0 	add	x0, x29, #0x38
   8ae38:	97ffef82 	bl	86c40 <strcat>
   8ae3c:	910102c1 	add	x1, x22, #0x40
   8ae40:	9100e3a0 	add	x0, x29, #0x38
   8ae44:	97ffef7f 	bl	86c40 <strcat>
   8ae48:	9100e3a1 	add	x1, x29, #0x38
   8ae4c:	aa1303e0 	mov	x0, x19
   8ae50:	94000008 	bl	8ae70 <CLogger::Write(char const*)>
   8ae54:	97ffeaa3 	bl	858e0 <halt>
   8ae58:	d503201f 	nop
   8ae5c:	d503201f 	nop

000000000008ae60 <CLogger::Get()>:
   8ae60:	b0000020 	adrp	x0, 8f000 <vtable for CDevice+0x720>
   8ae64:	f9431400 	ldr	x0, [x0, #1576]
   8ae68:	d65f03c0 	ret
   8ae6c:	d503201f 	nop

000000000008ae70 <CLogger::Write(char const*)>:
   8ae70:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8ae74:	910003fd 	mov	x29, sp
   8ae78:	a90153f3 	stp	x19, x20, [sp, #16]
   8ae7c:	aa0003f3 	mov	x19, x0
   8ae80:	aa0103f4 	mov	x20, x1
   8ae84:	aa0103e0 	mov	x0, x1
   8ae88:	f90013f5 	str	x21, [sp, #32]
   8ae8c:	97ffeee5 	bl	86a20 <strlen>
   8ae90:	f9400a63 	ldr	x3, [x19, #16]
   8ae94:	aa0003e2 	mov	x2, x0
   8ae98:	aa0003f5 	mov	x21, x0
   8ae9c:	aa1403e1 	mov	x1, x20
   8aea0:	aa0303e0 	mov	x0, x3
   8aea4:	f9400063 	ldr	x3, [x3]
   8aea8:	f9400c63 	ldr	x3, [x3, #24]
   8aeac:	d63f0060 	blr	x3
   8aeb0:	b9402a60 	ldr	w0, [x19, #40]
   8aeb4:	35000340 	cbnz	w0, 8af1c <CLogger::Write(char const*)+0xac>
   8aeb8:	8b150280 	add	x0, x20, x21
   8aebc:	d503201f 	nop
   8aec0:	eb14001f 	cmp	x0, x20
   8aec4:	54000200 	b.eq	8af04 <CLogger::Write(char const*)+0x94>  // b.none
   8aec8:	38c01681 	ldrsb	w1, [x20], #1
   8aecc:	7100343f 	cmp	w1, #0xd
   8aed0:	54ffff80 	b.eq	8aec0 <CLogger::Write(char const*)+0x50>  // b.none
   8aed4:	b9402262 	ldr	w2, [x19, #32]
   8aed8:	f9400e63 	ldr	x3, [x19, #24]
   8aedc:	38226861 	strb	w1, [x3, x2]
   8aee0:	29440a61 	ldp	w1, w2, [x19, #32]
   8aee4:	11000421 	add	w1, w1, #0x1
   8aee8:	12003421 	and	w1, w1, #0x3fff
   8aeec:	b9002261 	str	w1, [x19, #32]
   8aef0:	6b02003f 	cmp	w1, w2
   8aef4:	54fffe61 	b.ne	8aec0 <CLogger::Write(char const*)+0x50>  // b.any
   8aef8:	51000421 	sub	w1, w1, #0x1
   8aefc:	12003421 	and	w1, w1, #0x3fff
   8af00:	b9002261 	str	w1, [x19, #32]
   8af04:	b9402a60 	ldr	w0, [x19, #40]
   8af08:	350000e0 	cbnz	w0, 8af24 <CLogger::Write(char const*)+0xb4>
   8af0c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8af10:	f94013f5 	ldr	x21, [sp, #32]
   8af14:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8af18:	d65f03c0 	ret
   8af1c:	97fff1dd 	bl	87690 <EnterCritical>
   8af20:	17ffffe6 	b	8aeb8 <CLogger::Write(char const*)+0x48>
   8af24:	a94153f3 	ldp	x19, x20, [sp, #16]
   8af28:	f94013f5 	ldr	x21, [sp, #32]
   8af2c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8af30:	17fff210 	b	87770 <LeaveCritical>
   8af34:	d503201f 	nop
   8af38:	d503201f 	nop
   8af3c:	d503201f 	nop

000000000008af40 <CLogger::Read(void*, unsigned int)>:
   8af40:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   8af44:	910003fd 	mov	x29, sp
   8af48:	a90153f3 	stp	x19, x20, [sp, #16]
   8af4c:	aa0003f3 	mov	x19, x0
   8af50:	b9402800 	ldr	w0, [x0, #40]
   8af54:	2a0203f4 	mov	w20, w2
   8af58:	f90013f5 	str	x21, [sp, #32]
   8af5c:	aa0103f5 	mov	x21, x1
   8af60:	35000460 	cbnz	w0, 8afec <CLogger::Read(void*, unsigned int)+0xac>
   8af64:	29440261 	ldp	w1, w0, [x19, #32]
   8af68:	6b00003f 	cmp	w1, w0
   8af6c:	540004e0 	b.eq	8b008 <CLogger::Read(void*, unsigned int)+0xc8>  // b.none
   8af70:	2a1403e2 	mov	w2, w20
   8af74:	d2800004 	mov	x4, #0x0                   	// #0
   8af78:	1400000d 	b	8afac <CLogger::Read(void*, unsigned int)+0x6c>
   8af7c:	b9402663 	ldr	w3, [x19, #36]
   8af80:	11000480 	add	w0, w4, #0x1
   8af84:	f9400e65 	ldr	x5, [x19, #24]
   8af88:	38e368a3 	ldrsb	w3, [x5, x3]
   8af8c:	38246aa3 	strb	w3, [x21, x4]
   8af90:	91000484 	add	x4, x4, #0x1
   8af94:	29440e65 	ldp	w5, w3, [x19, #32]
   8af98:	11000463 	add	w3, w3, #0x1
   8af9c:	12003463 	and	w3, w3, #0x3fff
   8afa0:	b9002663 	str	w3, [x19, #36]
   8afa4:	6b05007f 	cmp	w3, w5
   8afa8:	54000080 	b.eq	8afb8 <CLogger::Read(void*, unsigned int)+0x78>  // b.none
   8afac:	2a0403e0 	mov	w0, w4
   8afb0:	eb04005f 	cmp	x2, x4
   8afb4:	54fffe41 	b.ne	8af7c <CLogger::Read(void*, unsigned int)+0x3c>  // b.any
   8afb8:	b9402a61 	ldr	w1, [x19, #40]
   8afbc:	350000a1 	cbnz	w1, 8afd0 <CLogger::Read(void*, unsigned int)+0x90>
   8afc0:	a94153f3 	ldp	x19, x20, [sp, #16]
   8afc4:	f94013f5 	ldr	x21, [sp, #32]
   8afc8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8afcc:	d65f03c0 	ret
   8afd0:	b9003fa0 	str	w0, [x29, #60]
   8afd4:	97fff1e7 	bl	87770 <LeaveCritical>
   8afd8:	b9403fa0 	ldr	w0, [x29, #60]
   8afdc:	a94153f3 	ldp	x19, x20, [sp, #16]
   8afe0:	f94013f5 	ldr	x21, [sp, #32]
   8afe4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8afe8:	d65f03c0 	ret
   8afec:	97fff1a9 	bl	87690 <EnterCritical>
   8aff0:	29440261 	ldp	w1, w0, [x19, #32]
   8aff4:	6b00003f 	cmp	w1, w0
   8aff8:	54fffbc1 	b.ne	8af70 <CLogger::Read(void*, unsigned int)+0x30>  // b.any
   8affc:	b9402a60 	ldr	w0, [x19, #40]
   8b000:	34000040 	cbz	w0, 8b008 <CLogger::Read(void*, unsigned int)+0xc8>
   8b004:	97fff1db 	bl	87770 <LeaveCritical>
   8b008:	a94153f3 	ldp	x19, x20, [sp, #16]
   8b00c:	12800000 	mov	w0, #0xffffffff            	// #-1
   8b010:	f94013f5 	ldr	x21, [sp, #32]
   8b014:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8b018:	d65f03c0 	ret
   8b01c:	d503201f 	nop

000000000008b020 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>:
   8b020:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   8b024:	910003fd 	mov	x29, sp
   8b028:	a90153f3 	stp	x19, x20, [sp, #16]
   8b02c:	aa0003f3 	mov	x19, x0
   8b030:	a9025bf5 	stp	x21, x22, [sp, #32]
   8b034:	d2802200 	mov	x0, #0x110                 	// #272
   8b038:	aa0303f5 	mov	x21, x3
   8b03c:	2a0203f6 	mov	w22, w2
   8b040:	f9001bf7 	str	x23, [sp, #48]
   8b044:	aa0103f7 	mov	x23, x1
   8b048:	97fff3d6 	bl	87fa0 <operator new(unsigned long)>
   8b04c:	aa0003f4 	mov	x20, x0
   8b050:	b8004416 	str	w22, [x0], #4
   8b054:	d2800642 	mov	x2, #0x32                  	// #50
   8b058:	aa1703e1 	mov	x1, x23
   8b05c:	97ffeee9 	bl	86c00 <strncpy>
   8b060:	3900d69f 	strb	wzr, [x20, #53]
   8b064:	d2801902 	mov	x2, #0xc8                  	// #200
   8b068:	aa1503e1 	mov	x1, x21
   8b06c:	9100da80 	add	x0, x20, #0x36
   8b070:	97ffeee4 	bl	86c00 <strncpy>
   8b074:	f9400660 	ldr	x0, [x19, #8]
   8b078:	3903f69f 	strb	wzr, [x20, #253]
   8b07c:	b40000c0 	cbz	x0, 8b094 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x74>
   8b080:	910173a2 	add	x2, x29, #0x5c
   8b084:	910163a1 	add	x1, x29, #0x58
   8b088:	97ffeb0e 	bl	85cc0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>
   8b08c:	72001c1f 	tst	w0, #0xff
   8b090:	54000561 	b.ne	8b13c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x11c>  // b.any
   8b094:	a9107e9f 	stp	xzr, xzr, [x20, #256]
   8b098:	b941ca63 	ldr	w3, [x19, #456]
   8b09c:	35000483 	cbnz	w3, 8b12c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x10c>
   8b0a0:	b941c262 	ldr	w2, [x19, #448]
   8b0a4:	11000441 	add	w1, w2, #0x1
   8b0a8:	8b224e62 	add	x2, x19, w2, uxtw #3
   8b0ac:	7100c83f 	cmp	w1, #0x32
   8b0b0:	f9001854 	str	x20, [x2, #48]
   8b0b4:	54000360 	b.eq	8b120 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x100>  // b.none
   8b0b8:	b901c261 	str	w1, [x19, #448]
   8b0bc:	b941c660 	ldr	w0, [x19, #452]
   8b0c0:	6b01001f 	cmp	w0, w1
   8b0c4:	54000180 	b.eq	8b0f4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xd4>  // b.none
   8b0c8:	35000123 	cbnz	w3, 8b0ec <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xcc>
   8b0cc:	f940ea60 	ldr	x0, [x19, #464]
   8b0d0:	b4000040 	cbz	x0, 8b0d8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xb8>
   8b0d4:	d63f0000 	blr	x0
   8b0d8:	a94153f3 	ldp	x19, x20, [sp, #16]
   8b0dc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8b0e0:	f9401bf7 	ldr	x23, [sp, #48]
   8b0e4:	a8c67bfd 	ldp	x29, x30, [sp], #96
   8b0e8:	d65f03c0 	ret
   8b0ec:	97fff1a1 	bl	87770 <LeaveCritical>
   8b0f0:	17fffff7 	b	8b0cc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xac>
   8b0f4:	8b214e60 	add	x0, x19, w1, uxtw #3
   8b0f8:	11000421 	add	w1, w1, #0x1
   8b0fc:	7100c83f 	cmp	w1, #0x32
   8b100:	1a9f1021 	csel	w1, w1, wzr, ne  // ne = any
   8b104:	f9401800 	ldr	x0, [x0, #48]
   8b108:	b901c661 	str	w1, [x19, #452]
   8b10c:	350002e3 	cbnz	w3, 8b168 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x148>
   8b110:	b4fffde0 	cbz	x0, 8b0cc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xac>
   8b114:	d2802201 	mov	x1, #0x110                 	// #272
   8b118:	97fff3b2 	bl	87fe0 <operator delete(void*, unsigned long)>
   8b11c:	17ffffec 	b	8b0cc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xac>
   8b120:	52800001 	mov	w1, #0x0                   	// #0
   8b124:	b901c27f 	str	wzr, [x19, #448]
   8b128:	17ffffe5 	b	8b0bc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x9c>
   8b12c:	2a0303e0 	mov	w0, w3
   8b130:	97fff158 	bl	87690 <EnterCritical>
   8b134:	b941ca63 	ldr	w3, [x19, #456]
   8b138:	17ffffda 	b	8b0a0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x80>
   8b13c:	294b07a3 	ldp	w3, w1, [x29, #88]
   8b140:	5282eb22 	mov	w2, #0x1759                	// #5977
   8b144:	72ba36e2 	movk	w2, #0xd1b7, lsl #16
   8b148:	f9400660 	ldr	x0, [x19, #8]
   8b14c:	9ba27c21 	umull	x1, w1, w2
   8b150:	f9008283 	str	x3, [x20, #256]
   8b154:	d36dfc21 	lsr	x1, x1, #45
   8b158:	b9010a81 	str	w1, [x20, #264]
   8b15c:	97ffea9d 	bl	85bd0 <CTimer::GetTimeZone() const>
   8b160:	b9010e80 	str	w0, [x20, #268]
   8b164:	17ffffcd 	b	8b098 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x78>
   8b168:	f90027a0 	str	x0, [x29, #72]
   8b16c:	97fff181 	bl	87770 <LeaveCritical>
   8b170:	f94027a0 	ldr	x0, [x29, #72]
   8b174:	17ffffe7 	b	8b110 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf0>
   8b178:	d503201f 	nop
   8b17c:	d503201f 	nop

000000000008b180 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)>:
   8b180:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   8b184:	910003fd 	mov	x29, sp
   8b188:	f9000bf3 	str	x19, [sp, #16]
   8b18c:	aa0003f3 	mov	x19, x0
   8b190:	b941c800 	ldr	w0, [x0, #456]
   8b194:	a9025bf5 	stp	x21, x22, [sp, #32]
   8b198:	aa0303f5 	mov	x21, x3
   8b19c:	a90363f7 	stp	x23, x24, [sp, #48]
   8b1a0:	aa0403f6 	mov	x22, x4
   8b1a4:	a9046bf9 	stp	x25, x26, [sp, #64]
   8b1a8:	aa0503f7 	mov	x23, x5
   8b1ac:	aa0103f9 	mov	x25, x1
   8b1b0:	aa0203fa 	mov	x26, x2
   8b1b4:	aa0603f8 	mov	x24, x6
   8b1b8:	35000620 	cbnz	w0, 8b27c <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xfc>
   8b1bc:	b941c261 	ldr	w1, [x19, #448]
   8b1c0:	b941c663 	ldr	w3, [x19, #452]
   8b1c4:	6b01007f 	cmp	w3, w1
   8b1c8:	540004c0 	b.eq	8b260 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xe0>  // b.none
   8b1cc:	8b234e61 	add	x1, x19, w3, uxtw #3
   8b1d0:	11000463 	add	w3, w3, #0x1
   8b1d4:	f9000fb4 	str	x20, [x29, #24]
   8b1d8:	7100c87f 	cmp	w3, #0x32
   8b1dc:	1a9f1063 	csel	w3, w3, wzr, ne  // ne = any
   8b1e0:	f9401834 	ldr	x20, [x1, #48]
   8b1e4:	b901c663 	str	w3, [x19, #452]
   8b1e8:	35000660 	cbnz	w0, 8b2b4 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x134>
   8b1ec:	aa1403e3 	mov	x3, x20
   8b1f0:	aa1a03e0 	mov	x0, x26
   8b1f4:	b8404461 	ldr	w1, [x3], #4
   8b1f8:	b9000321 	str	w1, [x25]
   8b1fc:	aa0303e1 	mov	x1, x3
   8b200:	97ffee74 	bl	86bd0 <strcpy>
   8b204:	9100da81 	add	x1, x20, #0x36
   8b208:	aa1503e0 	mov	x0, x21
   8b20c:	97ffee71 	bl	86bd0 <strcpy>
   8b210:	f9408280 	ldr	x0, [x20, #256]
   8b214:	d2802201 	mov	x1, #0x110                 	// #272
   8b218:	f90002c0 	str	x0, [x22]
   8b21c:	aa1403e0 	mov	x0, x20
   8b220:	b9410a82 	ldr	w2, [x20, #264]
   8b224:	b90002e2 	str	w2, [x23]
   8b228:	b9410e82 	ldr	w2, [x20, #268]
   8b22c:	b9000302 	str	w2, [x24]
   8b230:	97fff36c 	bl	87fe0 <operator delete(void*, unsigned long)>
   8b234:	f9400fb4 	ldr	x20, [x29, #24]
   8b238:	52800020 	mov	w0, #0x1                   	// #1
   8b23c:	f9400bf3 	ldr	x19, [sp, #16]
   8b240:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8b244:	a94363f7 	ldp	x23, x24, [sp, #48]
   8b248:	a9446bf9 	ldp	x25, x26, [sp, #64]
   8b24c:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8b250:	d65f03c0 	ret
   8b254:	b941ca60 	ldr	w0, [x19, #456]
   8b258:	34000040 	cbz	w0, 8b260 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xe0>
   8b25c:	97fff145 	bl	87770 <LeaveCritical>
   8b260:	52800000 	mov	w0, #0x0                   	// #0
   8b264:	f9400bf3 	ldr	x19, [sp, #16]
   8b268:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8b26c:	a94363f7 	ldp	x23, x24, [sp, #48]
   8b270:	a9446bf9 	ldp	x25, x26, [sp, #64]
   8b274:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8b278:	d65f03c0 	ret
   8b27c:	97fff105 	bl	87690 <EnterCritical>
   8b280:	b941c260 	ldr	w0, [x19, #448]
   8b284:	b941c663 	ldr	w3, [x19, #452]
   8b288:	6b03001f 	cmp	w0, w3
   8b28c:	54fffe40 	b.eq	8b254 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd4>  // b.none
   8b290:	8b234e61 	add	x1, x19, w3, uxtw #3
   8b294:	b941ca60 	ldr	w0, [x19, #456]
   8b298:	11000463 	add	w3, w3, #0x1
   8b29c:	f9000fb4 	str	x20, [x29, #24]
   8b2a0:	7100c87f 	cmp	w3, #0x32
   8b2a4:	1a9f1063 	csel	w3, w3, wzr, ne  // ne = any
   8b2a8:	f9401834 	ldr	x20, [x1, #48]
   8b2ac:	b901c663 	str	w3, [x19, #452]
   8b2b0:	34fff9e0 	cbz	w0, 8b1ec <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x6c>
   8b2b4:	97fff12f 	bl	87770 <LeaveCritical>
   8b2b8:	17ffffcd 	b	8b1ec <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x6c>
   8b2bc:	d503201f 	nop

000000000008b2c0 <CLogger::RegisterEventNotificationHandler(void (*)())>:
   8b2c0:	f900e801 	str	x1, [x0, #464]
   8b2c4:	d65f03c0 	ret
   8b2c8:	d503201f 	nop
   8b2cc:	d503201f 	nop

000000000008b2d0 <CLogger::RegisterPanicHandler(void (*)())>:
   8b2d0:	f900ec01 	str	x1, [x0, #472]
   8b2d4:	d65f03c0 	ret
	...

000000000008b2e0 <CPtrList::CPtrList()>:
   8b2e0:	f900001f 	str	xzr, [x0]
   8b2e4:	d65f03c0 	ret
   8b2e8:	d503201f 	nop
   8b2ec:	d503201f 	nop

000000000008b2f0 <CPtrList::~CPtrList()>:
   8b2f0:	f9400000 	ldr	x0, [x0]
   8b2f4:	b40000e0 	cbz	x0, 8b310 <CPtrList::~CPtrList()+0x20>
   8b2f8:	f0000001 	adrp	x1, 8e000 <font_data+0x5e0>
   8b2fc:	f0000000 	adrp	x0, 8e000 <font_data+0x5e0>
   8b300:	52800542 	mov	w2, #0x2a                  	// #42
   8b304:	9139e021 	add	x1, x1, #0xe78
   8b308:	913a2000 	add	x0, x0, #0xe88
   8b30c:	17fff4c9 	b	88630 <assertion_failed>
   8b310:	d65f03c0 	ret
   8b314:	d503201f 	nop
   8b318:	d503201f 	nop
   8b31c:	d503201f 	nop

000000000008b320 <CPtrList::GetFirst()>:
   8b320:	f9400000 	ldr	x0, [x0]
   8b324:	d65f03c0 	ret
   8b328:	d503201f 	nop
   8b32c:	d503201f 	nop

000000000008b330 <CPtrList::GetNext(TPtrListElement*)>:
   8b330:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8b334:	910003fd 	mov	x29, sp
   8b338:	f9000bf3 	str	x19, [sp, #16]
   8b33c:	aa0103f3 	mov	x19, x1
   8b340:	b4000201 	cbz	x1, 8b380 <CPtrList::GetNext(TPtrListElement*)+0x50>
   8b344:	b9400261 	ldr	w1, [x19]
   8b348:	5289a860 	mov	w0, #0x4d43                	// #19779
   8b34c:	72aa0980 	movk	w0, #0x504c, lsl #16
   8b350:	6b00003f 	cmp	w1, w0
   8b354:	540000e0 	b.eq	8b370 <CPtrList::GetNext(TPtrListElement*)+0x40>  // b.none
   8b358:	f0000001 	adrp	x1, 8e000 <font_data+0x5e0>
   8b35c:	f0000000 	adrp	x0, 8e000 <font_data+0x5e0>
   8b360:	528006a2 	mov	w2, #0x35                  	// #53
   8b364:	9139e021 	add	x1, x1, #0xe78
   8b368:	913aa000 	add	x0, x0, #0xea8
   8b36c:	97fff4b1 	bl	88630 <assertion_failed>
   8b370:	f9400a60 	ldr	x0, [x19, #16]
   8b374:	f9400bf3 	ldr	x19, [sp, #16]
   8b378:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8b37c:	d65f03c0 	ret
   8b380:	f0000001 	adrp	x1, 8e000 <font_data+0x5e0>
   8b384:	f0000000 	adrp	x0, 8e000 <font_data+0x5e0>
   8b388:	52800682 	mov	w2, #0x34                  	// #52
   8b38c:	9139e021 	add	x1, x1, #0xe78
   8b390:	913a6000 	add	x0, x0, #0xe98
   8b394:	97fff4a7 	bl	88630 <assertion_failed>
   8b398:	17ffffeb 	b	8b344 <CPtrList::GetNext(TPtrListElement*)+0x14>
   8b39c:	d503201f 	nop

000000000008b3a0 <CPtrList::GetPtr(TPtrListElement*)>:
   8b3a0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8b3a4:	910003fd 	mov	x29, sp
   8b3a8:	f9000bf3 	str	x19, [sp, #16]
   8b3ac:	aa0103f3 	mov	x19, x1
   8b3b0:	b4000201 	cbz	x1, 8b3f0 <CPtrList::GetPtr(TPtrListElement*)+0x50>
   8b3b4:	b9400261 	ldr	w1, [x19]
   8b3b8:	5289a860 	mov	w0, #0x4d43                	// #19779
   8b3bc:	72aa0980 	movk	w0, #0x504c, lsl #16
   8b3c0:	6b00003f 	cmp	w1, w0
   8b3c4:	540000e0 	b.eq	8b3e0 <CPtrList::GetPtr(TPtrListElement*)+0x40>  // b.none
   8b3c8:	f0000001 	adrp	x1, 8e000 <font_data+0x5e0>
   8b3cc:	f0000000 	adrp	x0, 8e000 <font_data+0x5e0>
   8b3d0:	528007a2 	mov	w2, #0x3d                  	// #61
   8b3d4:	9139e021 	add	x1, x1, #0xe78
   8b3d8:	913aa000 	add	x0, x0, #0xea8
   8b3dc:	97fff495 	bl	88630 <assertion_failed>
   8b3e0:	f9400e60 	ldr	x0, [x19, #24]
   8b3e4:	f9400bf3 	ldr	x19, [sp, #16]
   8b3e8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8b3ec:	d65f03c0 	ret
   8b3f0:	f0000001 	adrp	x1, 8e000 <font_data+0x5e0>
   8b3f4:	f0000000 	adrp	x0, 8e000 <font_data+0x5e0>
   8b3f8:	52800782 	mov	w2, #0x3c                  	// #60
   8b3fc:	9139e021 	add	x1, x1, #0xe78
   8b400:	913a6000 	add	x0, x0, #0xe98
   8b404:	97fff48b 	bl	88630 <assertion_failed>
   8b408:	17ffffeb 	b	8b3b4 <CPtrList::GetPtr(TPtrListElement*)+0x14>
   8b40c:	d503201f 	nop

000000000008b410 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
   8b410:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8b414:	910003fd 	mov	x29, sp
   8b418:	a9025bf5 	stp	x21, x22, [sp, #32]
   8b41c:	aa0003f5 	mov	x21, x0
   8b420:	a90153f3 	stp	x19, x20, [sp, #16]
   8b424:	aa0203f6 	mov	x22, x2
   8b428:	aa0103f3 	mov	x19, x1
   8b42c:	d2800400 	mov	x0, #0x20                  	// #32
   8b430:	97fff2dc 	bl	87fa0 <operator new(unsigned long)>
   8b434:	aa0003f4 	mov	x20, x0
   8b438:	f94002a0 	ldr	x0, [x21]
   8b43c:	5289a861 	mov	w1, #0x4d43                	// #19779
   8b440:	72aa0981 	movk	w1, #0x504c, lsl #16
   8b444:	b9000281 	str	w1, [x20]
   8b448:	f9000e96 	str	x22, [x20, #24]
   8b44c:	b40005c0 	cbz	x0, 8b504 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf4>
   8b450:	b4000693 	cbz	x19, 8b520 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x110>
   8b454:	b9400261 	ldr	w1, [x19]
   8b458:	5289a860 	mov	w0, #0x4d43                	// #19779
   8b45c:	72aa0980 	movk	w0, #0x504c, lsl #16
   8b460:	6b00003f 	cmp	w1, w0
   8b464:	540000e0 	b.eq	8b480 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x70>  // b.none
   8b468:	f0000001 	adrp	x1, 8e000 <font_data+0x5e0>
   8b46c:	f0000000 	adrp	x0, 8e000 <font_data+0x5e0>
   8b470:	528009c2 	mov	w2, #0x4e                  	// #78
   8b474:	9139e021 	add	x1, x1, #0xe78
   8b478:	913bc000 	add	x0, x0, #0xef0
   8b47c:	97fff46d 	bl	88630 <assertion_failed>
   8b480:	f94002a0 	ldr	x0, [x21]
   8b484:	eb13001f 	cmp	x0, x19
   8b488:	54000300 	b.eq	8b4e8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd8>  // b.none
   8b48c:	f9400660 	ldr	x0, [x19, #8]
   8b490:	a900ce80 	stp	x0, x19, [x20, #8]
   8b494:	b40000e0 	cbz	x0, 8b4b0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa0>
   8b498:	b9400002 	ldr	w2, [x0]
   8b49c:	5289a861 	mov	w1, #0x4d43                	// #19779
   8b4a0:	72aa0981 	movk	w1, #0x504c, lsl #16
   8b4a4:	6b01005f 	cmp	w2, w1
   8b4a8:	540000e1 	b.ne	8b4c4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xb4>  // b.any
   8b4ac:	f9000814 	str	x20, [x0, #16]
   8b4b0:	f9000674 	str	x20, [x19, #8]
   8b4b4:	a94153f3 	ldp	x19, x20, [sp, #16]
   8b4b8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8b4bc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8b4c0:	d65f03c0 	ret
   8b4c4:	f0000001 	adrp	x1, 8e000 <font_data+0x5e0>
   8b4c8:	f0000000 	adrp	x0, 8e000 <font_data+0x5e0>
   8b4cc:	52800c02 	mov	w2, #0x60                  	// #96
   8b4d0:	913c6000 	add	x0, x0, #0xf18
   8b4d4:	9139e021 	add	x1, x1, #0xe78
   8b4d8:	97fff456 	bl	88630 <assertion_failed>
   8b4dc:	f9400660 	ldr	x0, [x19, #8]
   8b4e0:	f9000814 	str	x20, [x0, #16]
   8b4e4:	17fffff3 	b	8b4b0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa0>
   8b4e8:	f9000674 	str	x20, [x19, #8]
   8b4ec:	f90002b4 	str	x20, [x21]
   8b4f0:	a900ce9f 	stp	xzr, x19, [x20, #8]
   8b4f4:	a94153f3 	ldp	x19, x20, [sp, #16]
   8b4f8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8b4fc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8b500:	d65f03c0 	ret
   8b504:	f0000001 	adrp	x1, 8e000 <font_data+0x5e0>
   8b508:	f0000000 	adrp	x0, 8e000 <font_data+0x5e0>
   8b50c:	52800982 	mov	w2, #0x4c                  	// #76
   8b510:	9139e021 	add	x1, x1, #0xe78
   8b514:	913b4000 	add	x0, x0, #0xed0
   8b518:	97fff446 	bl	88630 <assertion_failed>
   8b51c:	b5fff9d3 	cbnz	x19, 8b454 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x44>
   8b520:	f0000001 	adrp	x1, 8e000 <font_data+0x5e0>
   8b524:	f0000000 	adrp	x0, 8e000 <font_data+0x5e0>
   8b528:	528009a2 	mov	w2, #0x4d                  	// #77
   8b52c:	9139e021 	add	x1, x1, #0xe78
   8b530:	913b8000 	add	x0, x0, #0xee0
   8b534:	97fff43f 	bl	88630 <assertion_failed>
   8b538:	17ffffc7 	b	8b454 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x44>
   8b53c:	d503201f 	nop

000000000008b540 <CPtrList::InsertAfter(TPtrListElement*, void*)>:
   8b540:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8b544:	910003fd 	mov	x29, sp
   8b548:	a90153f3 	stp	x19, x20, [sp, #16]
   8b54c:	aa0103f4 	mov	x20, x1
   8b550:	a9025bf5 	stp	x21, x22, [sp, #32]
   8b554:	aa0203f6 	mov	x22, x2
   8b558:	aa0003f5 	mov	x21, x0
   8b55c:	d2800400 	mov	x0, #0x20                  	// #32
   8b560:	97fff290 	bl	87fa0 <operator new(unsigned long)>
   8b564:	aa0003f3 	mov	x19, x0
   8b568:	5289a860 	mov	w0, #0x4d43                	// #19779
   8b56c:	72aa0980 	movk	w0, #0x504c, lsl #16
   8b570:	b9000260 	str	w0, [x19]
   8b574:	f9000e76 	str	x22, [x19, #24]
   8b578:	f94002a0 	ldr	x0, [x21]
   8b57c:	b40004d4 	cbz	x20, 8b614 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd4>
   8b580:	b4000640 	cbz	x0, 8b648 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x108>
   8b584:	b9400281 	ldr	w1, [x20]
   8b588:	5289a860 	mov	w0, #0x4d43                	// #19779
   8b58c:	72aa0980 	movk	w0, #0x504c, lsl #16
   8b590:	6b00003f 	cmp	w1, w0
   8b594:	540002c1 	b.ne	8b5ec <CPtrList::InsertAfter(TPtrListElement*, void*)+0xac>  // b.any
   8b598:	f9400a80 	ldr	x0, [x20, #16]
   8b59c:	a9008274 	stp	x20, x0, [x19, #8]
   8b5a0:	b40001c0 	cbz	x0, 8b5d8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x98>
   8b5a4:	b9400002 	ldr	w2, [x0]
   8b5a8:	5289a861 	mov	w1, #0x4d43                	// #19779
   8b5ac:	72aa0981 	movk	w1, #0x504c, lsl #16
   8b5b0:	6b01005f 	cmp	w2, w1
   8b5b4:	54000100 	b.eq	8b5d4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x94>  // b.none
   8b5b8:	f0000001 	adrp	x1, 8e000 <font_data+0x5e0>
   8b5bc:	f0000000 	adrp	x0, 8e000 <font_data+0x5e0>
   8b5c0:	528010a2 	mov	w2, #0x85                  	// #133
   8b5c4:	913da000 	add	x0, x0, #0xf68
   8b5c8:	9139e021 	add	x1, x1, #0xe78
   8b5cc:	97fff419 	bl	88630 <assertion_failed>
   8b5d0:	f9400a80 	ldr	x0, [x20, #16]
   8b5d4:	f9000413 	str	x19, [x0, #8]
   8b5d8:	f9000a93 	str	x19, [x20, #16]
   8b5dc:	a94153f3 	ldp	x19, x20, [sp, #16]
   8b5e0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8b5e4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8b5e8:	d65f03c0 	ret
   8b5ec:	f0000001 	adrp	x1, 8e000 <font_data+0x5e0>
   8b5f0:	f0000000 	adrp	x0, 8e000 <font_data+0x5e0>
   8b5f4:	52800fc2 	mov	w2, #0x7e                  	// #126
   8b5f8:	913d0000 	add	x0, x0, #0xf40
   8b5fc:	9139e021 	add	x1, x1, #0xe78
   8b600:	97fff40c 	bl	88630 <assertion_failed>
   8b604:	f9400a80 	ldr	x0, [x20, #16]
   8b608:	a9008274 	stp	x20, x0, [x19, #8]
   8b60c:	b5fffcc0 	cbnz	x0, 8b5a4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x64>
   8b610:	17fffff2 	b	8b5d8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x98>
   8b614:	b40000e0 	cbz	x0, 8b630 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xf0>
   8b618:	f0000001 	adrp	x1, 8e000 <font_data+0x5e0>
   8b61c:	f0000000 	adrp	x0, 8e000 <font_data+0x5e0>
   8b620:	52800e82 	mov	w2, #0x74                  	// #116
   8b624:	9139e021 	add	x1, x1, #0xe78
   8b628:	913a2000 	add	x0, x0, #0xe88
   8b62c:	97fff401 	bl	88630 <assertion_failed>
   8b630:	f90002b3 	str	x19, [x21]
   8b634:	a900fe7f 	stp	xzr, xzr, [x19, #8]
   8b638:	a94153f3 	ldp	x19, x20, [sp, #16]
   8b63c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8b640:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8b644:	d65f03c0 	ret
   8b648:	f0000001 	adrp	x1, 8e000 <font_data+0x5e0>
   8b64c:	f0000000 	adrp	x0, 8e000 <font_data+0x5e0>
   8b650:	52800fa2 	mov	w2, #0x7d                  	// #125
   8b654:	9139e021 	add	x1, x1, #0xe78
   8b658:	913b4000 	add	x0, x0, #0xed0
   8b65c:	97fff3f5 	bl	88630 <assertion_failed>
   8b660:	17ffffc9 	b	8b584 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x44>
   8b664:	d503201f 	nop
   8b668:	d503201f 	nop
   8b66c:	d503201f 	nop

000000000008b670 <CPtrList::Remove(TPtrListElement*)>:
   8b670:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8b674:	910003fd 	mov	x29, sp
   8b678:	a90153f3 	stp	x19, x20, [sp, #16]
   8b67c:	aa0003f4 	mov	x20, x0
   8b680:	aa0103f3 	mov	x19, x1
   8b684:	b4000981 	cbz	x1, 8b7b4 <CPtrList::Remove(TPtrListElement*)+0x144>
   8b688:	b9400261 	ldr	w1, [x19]
   8b68c:	5289a860 	mov	w0, #0x4d43                	// #19779
   8b690:	72aa0980 	movk	w0, #0x504c, lsl #16
   8b694:	6b00003f 	cmp	w1, w0
   8b698:	540000e0 	b.eq	8b6b4 <CPtrList::Remove(TPtrListElement*)+0x44>  // b.none
   8b69c:	f0000001 	adrp	x1, 8e000 <font_data+0x5e0>
   8b6a0:	f0000000 	adrp	x0, 8e000 <font_data+0x5e0>
   8b6a4:	52801202 	mov	w2, #0x90                  	// #144
   8b6a8:	9139e021 	add	x1, x1, #0xe78
   8b6ac:	913aa000 	add	x0, x0, #0xea8
   8b6b0:	97fff3e0 	bl	88630 <assertion_failed>
   8b6b4:	f9400280 	ldr	x0, [x20]
   8b6b8:	eb13001f 	cmp	x0, x19
   8b6bc:	54000500 	b.eq	8b75c <CPtrList::Remove(TPtrListElement*)+0xec>  // b.none
   8b6c0:	f9400660 	ldr	x0, [x19, #8]
   8b6c4:	b4000860 	cbz	x0, 8b7d0 <CPtrList::Remove(TPtrListElement*)+0x160>
   8b6c8:	b9400002 	ldr	w2, [x0]
   8b6cc:	5289a861 	mov	w1, #0x4d43                	// #19779
   8b6d0:	72aa0981 	movk	w1, #0x504c, lsl #16
   8b6d4:	6b01005f 	cmp	w2, w1
   8b6d8:	54000221 	b.ne	8b71c <CPtrList::Remove(TPtrListElement*)+0xac>  // b.any
   8b6dc:	f9400a61 	ldr	x1, [x19, #16]
   8b6e0:	f9000801 	str	x1, [x0, #16]
   8b6e4:	f9400a61 	ldr	x1, [x19, #16]
   8b6e8:	b40000e1 	cbz	x1, 8b704 <CPtrList::Remove(TPtrListElement*)+0x94>
   8b6ec:	b9400023 	ldr	w3, [x1]
   8b6f0:	5289a862 	mov	w2, #0x4d43                	// #19779
   8b6f4:	72aa0982 	movk	w2, #0x504c, lsl #16
   8b6f8:	6b02007f 	cmp	w3, w2
   8b6fc:	54000201 	b.ne	8b73c <CPtrList::Remove(TPtrListElement*)+0xcc>  // b.any
   8b700:	f9000420 	str	x0, [x1, #8]
   8b704:	b900027f 	str	wzr, [x19]
   8b708:	aa1303e0 	mov	x0, x19
   8b70c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8b710:	d2800401 	mov	x1, #0x20                  	// #32
   8b714:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8b718:	17fff232 	b	87fe0 <operator delete(void*, unsigned long)>
   8b71c:	f0000001 	adrp	x1, 8e000 <font_data+0x5e0>
   8b720:	f0000000 	adrp	x0, 8e000 <font_data+0x5e0>
   8b724:	528013e2 	mov	w2, #0x9f                  	// #159
   8b728:	913f8000 	add	x0, x0, #0xfe0
   8b72c:	9139e021 	add	x1, x1, #0xe78
   8b730:	97fff3c0 	bl	88630 <assertion_failed>
   8b734:	f9400660 	ldr	x0, [x19, #8]
   8b738:	17ffffe9 	b	8b6dc <CPtrList::Remove(TPtrListElement*)+0x6c>
   8b73c:	f0000001 	adrp	x1, 8e000 <font_data+0x5e0>
   8b740:	f0000000 	adrp	x0, 8e000 <font_data+0x5e0>
   8b744:	9139e021 	add	x1, x1, #0xe78
   8b748:	913e6000 	add	x0, x0, #0xf98
   8b74c:	52801482 	mov	w2, #0xa4                  	// #164
   8b750:	97fff3b8 	bl	88630 <assertion_failed>
   8b754:	a9408660 	ldp	x0, x1, [x19, #8]
   8b758:	17ffffea 	b	8b700 <CPtrList::Remove(TPtrListElement*)+0x90>
   8b75c:	f9400a60 	ldr	x0, [x19, #16]
   8b760:	f9000280 	str	x0, [x20]
   8b764:	b4fffd00 	cbz	x0, 8b704 <CPtrList::Remove(TPtrListElement*)+0x94>
   8b768:	b9400002 	ldr	w2, [x0]
   8b76c:	5289a861 	mov	w1, #0x4d43                	// #19779
   8b770:	72aa0981 	movk	w1, #0x504c, lsl #16
   8b774:	6b01005f 	cmp	w2, w1
   8b778:	54000100 	b.eq	8b798 <CPtrList::Remove(TPtrListElement*)+0x128>  // b.none
   8b77c:	f0000001 	adrp	x1, 8e000 <font_data+0x5e0>
   8b780:	f0000000 	adrp	x0, 8e000 <font_data+0x5e0>
   8b784:	52801302 	mov	w2, #0x98                  	// #152
   8b788:	913e6000 	add	x0, x0, #0xf98
   8b78c:	9139e021 	add	x1, x1, #0xe78
   8b790:	97fff3a8 	bl	88630 <assertion_failed>
   8b794:	f9400a60 	ldr	x0, [x19, #16]
   8b798:	f900041f 	str	xzr, [x0, #8]
   8b79c:	aa1303e0 	mov	x0, x19
   8b7a0:	b900027f 	str	wzr, [x19]
   8b7a4:	d2800401 	mov	x1, #0x20                  	// #32
   8b7a8:	a94153f3 	ldp	x19, x20, [sp, #16]
   8b7ac:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8b7b0:	17fff20c 	b	87fe0 <operator delete(void*, unsigned long)>
   8b7b4:	f0000001 	adrp	x1, 8e000 <font_data+0x5e0>
   8b7b8:	f0000000 	adrp	x0, 8e000 <font_data+0x5e0>
   8b7bc:	528011e2 	mov	w2, #0x8f                  	// #143
   8b7c0:	9139e021 	add	x1, x1, #0xe78
   8b7c4:	913a6000 	add	x0, x0, #0xe98
   8b7c8:	97fff39a 	bl	88630 <assertion_failed>
   8b7cc:	17ffffaf 	b	8b688 <CPtrList::Remove(TPtrListElement*)+0x18>
   8b7d0:	f0000001 	adrp	x1, 8e000 <font_data+0x5e0>
   8b7d4:	f0000000 	adrp	x0, 8e000 <font_data+0x5e0>
   8b7d8:	528013c2 	mov	w2, #0x9e                  	// #158
   8b7dc:	913f2000 	add	x0, x0, #0xfc8
   8b7e0:	9139e021 	add	x1, x1, #0xe78
   8b7e4:	97fff393 	bl	88630 <assertion_failed>
   8b7e8:	f9400660 	ldr	x0, [x19, #8]
   8b7ec:	17ffffb7 	b	8b6c8 <CPtrList::Remove(TPtrListElement*)+0x58>

000000000008b7f0 <CPtrList::Find(void*)>:
   8b7f0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   8b7f4:	910003fd 	mov	x29, sp
   8b7f8:	f9000bf3 	str	x19, [sp, #16]
   8b7fc:	f9400013 	ldr	x19, [x0]
   8b800:	b40003f3 	cbz	x19, 8b87c <CPtrList::Find(void*)+0x8c>
   8b804:	a901d7b4 	stp	x20, x21, [x29, #24]
   8b808:	f0000015 	adrp	x21, 8e000 <font_data+0x5e0>
   8b80c:	913aa2b5 	add	x21, x21, #0xea8
   8b810:	a902dfb6 	stp	x22, x23, [x29, #40]
   8b814:	aa0103f4 	mov	x20, x1
   8b818:	f0000016 	adrp	x22, 8e000 <font_data+0x5e0>
   8b81c:	9139e2d6 	add	x22, x22, #0xe78
   8b820:	5289a877 	mov	w23, #0x4d43                	// #19779
   8b824:	72aa0997 	movk	w23, #0x504c, lsl #16
   8b828:	14000003 	b	8b834 <CPtrList::Find(void*)+0x44>
   8b82c:	f9400a73 	ldr	x19, [x19, #16]
   8b830:	b4000233 	cbz	x19, 8b874 <CPtrList::Find(void*)+0x84>
   8b834:	b9400263 	ldr	w3, [x19]
   8b838:	52801662 	mov	w2, #0xb3                  	// #179
   8b83c:	aa1603e1 	mov	x1, x22
   8b840:	aa1503e0 	mov	x0, x21
   8b844:	6b17007f 	cmp	w3, w23
   8b848:	54000040 	b.eq	8b850 <CPtrList::Find(void*)+0x60>  // b.none
   8b84c:	97fff379 	bl	88630 <assertion_failed>
   8b850:	f9400e60 	ldr	x0, [x19, #24]
   8b854:	eb14001f 	cmp	x0, x20
   8b858:	54fffea1 	b.ne	8b82c <CPtrList::Find(void*)+0x3c>  // b.any
   8b85c:	aa1303e0 	mov	x0, x19
   8b860:	f9400bf3 	ldr	x19, [sp, #16]
   8b864:	a941d7b4 	ldp	x20, x21, [x29, #24]
   8b868:	a942dfb6 	ldp	x22, x23, [x29, #40]
   8b86c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8b870:	d65f03c0 	ret
   8b874:	a941d7b4 	ldp	x20, x21, [x29, #24]
   8b878:	a942dfb6 	ldp	x22, x23, [x29, #40]
   8b87c:	d2800013 	mov	x19, #0x0                   	// #0
   8b880:	aa1303e0 	mov	x0, x19
   8b884:	f9400bf3 	ldr	x19, [sp, #16]
   8b888:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8b88c:	d65f03c0 	ret
	...

000000000008c000 <VectorTable>:
   8c000:	140001ef 	b	8c7bc <SynchronousStub>
   8c004:	d503201f 	nop
   8c008:	d503201f 	nop
   8c00c:	d503201f 	nop
   8c010:	d503201f 	nop
   8c014:	d503201f 	nop
   8c018:	d503201f 	nop
   8c01c:	d503201f 	nop
   8c020:	d503201f 	nop
   8c024:	d503201f 	nop
   8c028:	d503201f 	nop
   8c02c:	d503201f 	nop
   8c030:	d503201f 	nop
   8c034:	d503201f 	nop
   8c038:	d503201f 	nop
   8c03c:	d503201f 	nop
   8c040:	d503201f 	nop
   8c044:	d503201f 	nop
   8c048:	d503201f 	nop
   8c04c:	d503201f 	nop
   8c050:	d503201f 	nop
   8c054:	d503201f 	nop
   8c058:	d503201f 	nop
   8c05c:	d503201f 	nop
   8c060:	d503201f 	nop
   8c064:	d503201f 	nop
   8c068:	d503201f 	nop
   8c06c:	d503201f 	nop
   8c070:	d503201f 	nop
   8c074:	d503201f 	nop
   8c078:	d503201f 	nop
   8c07c:	d503201f 	nop
   8c080:	140001eb 	b	8c82c <IRQStub>
   8c084:	d503201f 	nop
   8c088:	d503201f 	nop
   8c08c:	d503201f 	nop
   8c090:	d503201f 	nop
   8c094:	d503201f 	nop
   8c098:	d503201f 	nop
   8c09c:	d503201f 	nop
   8c0a0:	d503201f 	nop
   8c0a4:	d503201f 	nop
   8c0a8:	d503201f 	nop
   8c0ac:	d503201f 	nop
   8c0b0:	d503201f 	nop
   8c0b4:	d503201f 	nop
   8c0b8:	d503201f 	nop
   8c0bc:	d503201f 	nop
   8c0c0:	d503201f 	nop
   8c0c4:	d503201f 	nop
   8c0c8:	d503201f 	nop
   8c0cc:	d503201f 	nop
   8c0d0:	d503201f 	nop
   8c0d4:	d503201f 	nop
   8c0d8:	d503201f 	nop
   8c0dc:	d503201f 	nop
   8c0e0:	d503201f 	nop
   8c0e4:	d503201f 	nop
   8c0e8:	d503201f 	nop
   8c0ec:	d503201f 	nop
   8c0f0:	d503201f 	nop
   8c0f4:	d503201f 	nop
   8c0f8:	d503201f 	nop
   8c0fc:	d503201f 	nop
   8c100:	140001f5 	b	8c8d4 <FIQStub>
   8c104:	d503201f 	nop
   8c108:	d503201f 	nop
   8c10c:	d503201f 	nop
   8c110:	d503201f 	nop
   8c114:	d503201f 	nop
   8c118:	d503201f 	nop
   8c11c:	d503201f 	nop
   8c120:	d503201f 	nop
   8c124:	d503201f 	nop
   8c128:	d503201f 	nop
   8c12c:	d503201f 	nop
   8c130:	d503201f 	nop
   8c134:	d503201f 	nop
   8c138:	d503201f 	nop
   8c13c:	d503201f 	nop
   8c140:	d503201f 	nop
   8c144:	d503201f 	nop
   8c148:	d503201f 	nop
   8c14c:	d503201f 	nop
   8c150:	d503201f 	nop
   8c154:	d503201f 	nop
   8c158:	d503201f 	nop
   8c15c:	d503201f 	nop
   8c160:	d503201f 	nop
   8c164:	d503201f 	nop
   8c168:	d503201f 	nop
   8c16c:	d503201f 	nop
   8c170:	d503201f 	nop
   8c174:	d503201f 	nop
   8c178:	d503201f 	nop
   8c17c:	d503201f 	nop
   8c180:	1400019d 	b	8c7f4 <SErrorStub>
   8c184:	d503201f 	nop
   8c188:	d503201f 	nop
   8c18c:	d503201f 	nop
   8c190:	d503201f 	nop
   8c194:	d503201f 	nop
   8c198:	d503201f 	nop
   8c19c:	d503201f 	nop
   8c1a0:	d503201f 	nop
   8c1a4:	d503201f 	nop
   8c1a8:	d503201f 	nop
   8c1ac:	d503201f 	nop
   8c1b0:	d503201f 	nop
   8c1b4:	d503201f 	nop
   8c1b8:	d503201f 	nop
   8c1bc:	d503201f 	nop
   8c1c0:	d503201f 	nop
   8c1c4:	d503201f 	nop
   8c1c8:	d503201f 	nop
   8c1cc:	d503201f 	nop
   8c1d0:	d503201f 	nop
   8c1d4:	d503201f 	nop
   8c1d8:	d503201f 	nop
   8c1dc:	d503201f 	nop
   8c1e0:	d503201f 	nop
   8c1e4:	d503201f 	nop
   8c1e8:	d503201f 	nop
   8c1ec:	d503201f 	nop
   8c1f0:	d503201f 	nop
   8c1f4:	d503201f 	nop
   8c1f8:	d503201f 	nop
   8c1fc:	d503201f 	nop
   8c200:	1400016f 	b	8c7bc <SynchronousStub>
   8c204:	d503201f 	nop
   8c208:	d503201f 	nop
   8c20c:	d503201f 	nop
   8c210:	d503201f 	nop
   8c214:	d503201f 	nop
   8c218:	d503201f 	nop
   8c21c:	d503201f 	nop
   8c220:	d503201f 	nop
   8c224:	d503201f 	nop
   8c228:	d503201f 	nop
   8c22c:	d503201f 	nop
   8c230:	d503201f 	nop
   8c234:	d503201f 	nop
   8c238:	d503201f 	nop
   8c23c:	d503201f 	nop
   8c240:	d503201f 	nop
   8c244:	d503201f 	nop
   8c248:	d503201f 	nop
   8c24c:	d503201f 	nop
   8c250:	d503201f 	nop
   8c254:	d503201f 	nop
   8c258:	d503201f 	nop
   8c25c:	d503201f 	nop
   8c260:	d503201f 	nop
   8c264:	d503201f 	nop
   8c268:	d503201f 	nop
   8c26c:	d503201f 	nop
   8c270:	d503201f 	nop
   8c274:	d503201f 	nop
   8c278:	d503201f 	nop
   8c27c:	d503201f 	nop
   8c280:	1400016b 	b	8c82c <IRQStub>
   8c284:	d503201f 	nop
   8c288:	d503201f 	nop
   8c28c:	d503201f 	nop
   8c290:	d503201f 	nop
   8c294:	d503201f 	nop
   8c298:	d503201f 	nop
   8c29c:	d503201f 	nop
   8c2a0:	d503201f 	nop
   8c2a4:	d503201f 	nop
   8c2a8:	d503201f 	nop
   8c2ac:	d503201f 	nop
   8c2b0:	d503201f 	nop
   8c2b4:	d503201f 	nop
   8c2b8:	d503201f 	nop
   8c2bc:	d503201f 	nop
   8c2c0:	d503201f 	nop
   8c2c4:	d503201f 	nop
   8c2c8:	d503201f 	nop
   8c2cc:	d503201f 	nop
   8c2d0:	d503201f 	nop
   8c2d4:	d503201f 	nop
   8c2d8:	d503201f 	nop
   8c2dc:	d503201f 	nop
   8c2e0:	d503201f 	nop
   8c2e4:	d503201f 	nop
   8c2e8:	d503201f 	nop
   8c2ec:	d503201f 	nop
   8c2f0:	d503201f 	nop
   8c2f4:	d503201f 	nop
   8c2f8:	d503201f 	nop
   8c2fc:	d503201f 	nop
   8c300:	14000175 	b	8c8d4 <FIQStub>
   8c304:	d503201f 	nop
   8c308:	d503201f 	nop
   8c30c:	d503201f 	nop
   8c310:	d503201f 	nop
   8c314:	d503201f 	nop
   8c318:	d503201f 	nop
   8c31c:	d503201f 	nop
   8c320:	d503201f 	nop
   8c324:	d503201f 	nop
   8c328:	d503201f 	nop
   8c32c:	d503201f 	nop
   8c330:	d503201f 	nop
   8c334:	d503201f 	nop
   8c338:	d503201f 	nop
   8c33c:	d503201f 	nop
   8c340:	d503201f 	nop
   8c344:	d503201f 	nop
   8c348:	d503201f 	nop
   8c34c:	d503201f 	nop
   8c350:	d503201f 	nop
   8c354:	d503201f 	nop
   8c358:	d503201f 	nop
   8c35c:	d503201f 	nop
   8c360:	d503201f 	nop
   8c364:	d503201f 	nop
   8c368:	d503201f 	nop
   8c36c:	d503201f 	nop
   8c370:	d503201f 	nop
   8c374:	d503201f 	nop
   8c378:	d503201f 	nop
   8c37c:	d503201f 	nop
   8c380:	1400011d 	b	8c7f4 <SErrorStub>
   8c384:	d503201f 	nop
   8c388:	d503201f 	nop
   8c38c:	d503201f 	nop
   8c390:	d503201f 	nop
   8c394:	d503201f 	nop
   8c398:	d503201f 	nop
   8c39c:	d503201f 	nop
   8c3a0:	d503201f 	nop
   8c3a4:	d503201f 	nop
   8c3a8:	d503201f 	nop
   8c3ac:	d503201f 	nop
   8c3b0:	d503201f 	nop
   8c3b4:	d503201f 	nop
   8c3b8:	d503201f 	nop
   8c3bc:	d503201f 	nop
   8c3c0:	d503201f 	nop
   8c3c4:	d503201f 	nop
   8c3c8:	d503201f 	nop
   8c3cc:	d503201f 	nop
   8c3d0:	d503201f 	nop
   8c3d4:	d503201f 	nop
   8c3d8:	d503201f 	nop
   8c3dc:	d503201f 	nop
   8c3e0:	d503201f 	nop
   8c3e4:	d503201f 	nop
   8c3e8:	d503201f 	nop
   8c3ec:	d503201f 	nop
   8c3f0:	d503201f 	nop
   8c3f4:	d503201f 	nop
   8c3f8:	d503201f 	nop
   8c3fc:	d503201f 	nop
   8c400:	14000160 	b	8c980 <HVCStub>
   8c404:	d503201f 	nop
   8c408:	d503201f 	nop
   8c40c:	d503201f 	nop
   8c410:	d503201f 	nop
   8c414:	d503201f 	nop
   8c418:	d503201f 	nop
   8c41c:	d503201f 	nop
   8c420:	d503201f 	nop
   8c424:	d503201f 	nop
   8c428:	d503201f 	nop
   8c42c:	d503201f 	nop
   8c430:	d503201f 	nop
   8c434:	d503201f 	nop
   8c438:	d503201f 	nop
   8c43c:	d503201f 	nop
   8c440:	d503201f 	nop
   8c444:	d503201f 	nop
   8c448:	d503201f 	nop
   8c44c:	d503201f 	nop
   8c450:	d503201f 	nop
   8c454:	d503201f 	nop
   8c458:	d503201f 	nop
   8c45c:	d503201f 	nop
   8c460:	d503201f 	nop
   8c464:	d503201f 	nop
   8c468:	d503201f 	nop
   8c46c:	d503201f 	nop
   8c470:	d503201f 	nop
   8c474:	d503201f 	nop
   8c478:	d503201f 	nop
   8c47c:	d503201f 	nop
   8c480:	140000c1 	b	8c784 <UnexpectedStub>
   8c484:	d503201f 	nop
   8c488:	d503201f 	nop
   8c48c:	d503201f 	nop
   8c490:	d503201f 	nop
   8c494:	d503201f 	nop
   8c498:	d503201f 	nop
   8c49c:	d503201f 	nop
   8c4a0:	d503201f 	nop
   8c4a4:	d503201f 	nop
   8c4a8:	d503201f 	nop
   8c4ac:	d503201f 	nop
   8c4b0:	d503201f 	nop
   8c4b4:	d503201f 	nop
   8c4b8:	d503201f 	nop
   8c4bc:	d503201f 	nop
   8c4c0:	d503201f 	nop
   8c4c4:	d503201f 	nop
   8c4c8:	d503201f 	nop
   8c4cc:	d503201f 	nop
   8c4d0:	d503201f 	nop
   8c4d4:	d503201f 	nop
   8c4d8:	d503201f 	nop
   8c4dc:	d503201f 	nop
   8c4e0:	d503201f 	nop
   8c4e4:	d503201f 	nop
   8c4e8:	d503201f 	nop
   8c4ec:	d503201f 	nop
   8c4f0:	d503201f 	nop
   8c4f4:	d503201f 	nop
   8c4f8:	d503201f 	nop
   8c4fc:	d503201f 	nop
   8c500:	140000a1 	b	8c784 <UnexpectedStub>
   8c504:	d503201f 	nop
   8c508:	d503201f 	nop
   8c50c:	d503201f 	nop
   8c510:	d503201f 	nop
   8c514:	d503201f 	nop
   8c518:	d503201f 	nop
   8c51c:	d503201f 	nop
   8c520:	d503201f 	nop
   8c524:	d503201f 	nop
   8c528:	d503201f 	nop
   8c52c:	d503201f 	nop
   8c530:	d503201f 	nop
   8c534:	d503201f 	nop
   8c538:	d503201f 	nop
   8c53c:	d503201f 	nop
   8c540:	d503201f 	nop
   8c544:	d503201f 	nop
   8c548:	d503201f 	nop
   8c54c:	d503201f 	nop
   8c550:	d503201f 	nop
   8c554:	d503201f 	nop
   8c558:	d503201f 	nop
   8c55c:	d503201f 	nop
   8c560:	d503201f 	nop
   8c564:	d503201f 	nop
   8c568:	d503201f 	nop
   8c56c:	d503201f 	nop
   8c570:	d503201f 	nop
   8c574:	d503201f 	nop
   8c578:	d503201f 	nop
   8c57c:	d503201f 	nop
   8c580:	14000081 	b	8c784 <UnexpectedStub>
   8c584:	d503201f 	nop
   8c588:	d503201f 	nop
   8c58c:	d503201f 	nop
   8c590:	d503201f 	nop
   8c594:	d503201f 	nop
   8c598:	d503201f 	nop
   8c59c:	d503201f 	nop
   8c5a0:	d503201f 	nop
   8c5a4:	d503201f 	nop
   8c5a8:	d503201f 	nop
   8c5ac:	d503201f 	nop
   8c5b0:	d503201f 	nop
   8c5b4:	d503201f 	nop
   8c5b8:	d503201f 	nop
   8c5bc:	d503201f 	nop
   8c5c0:	d503201f 	nop
   8c5c4:	d503201f 	nop
   8c5c8:	d503201f 	nop
   8c5cc:	d503201f 	nop
   8c5d0:	d503201f 	nop
   8c5d4:	d503201f 	nop
   8c5d8:	d503201f 	nop
   8c5dc:	d503201f 	nop
   8c5e0:	d503201f 	nop
   8c5e4:	d503201f 	nop
   8c5e8:	d503201f 	nop
   8c5ec:	d503201f 	nop
   8c5f0:	d503201f 	nop
   8c5f4:	d503201f 	nop
   8c5f8:	d503201f 	nop
   8c5fc:	d503201f 	nop
   8c600:	14000061 	b	8c784 <UnexpectedStub>
   8c604:	d503201f 	nop
   8c608:	d503201f 	nop
   8c60c:	d503201f 	nop
   8c610:	d503201f 	nop
   8c614:	d503201f 	nop
   8c618:	d503201f 	nop
   8c61c:	d503201f 	nop
   8c620:	d503201f 	nop
   8c624:	d503201f 	nop
   8c628:	d503201f 	nop
   8c62c:	d503201f 	nop
   8c630:	d503201f 	nop
   8c634:	d503201f 	nop
   8c638:	d503201f 	nop
   8c63c:	d503201f 	nop
   8c640:	d503201f 	nop
   8c644:	d503201f 	nop
   8c648:	d503201f 	nop
   8c64c:	d503201f 	nop
   8c650:	d503201f 	nop
   8c654:	d503201f 	nop
   8c658:	d503201f 	nop
   8c65c:	d503201f 	nop
   8c660:	d503201f 	nop
   8c664:	d503201f 	nop
   8c668:	d503201f 	nop
   8c66c:	d503201f 	nop
   8c670:	d503201f 	nop
   8c674:	d503201f 	nop
   8c678:	d503201f 	nop
   8c67c:	d503201f 	nop
   8c680:	14000041 	b	8c784 <UnexpectedStub>
   8c684:	d503201f 	nop
   8c688:	d503201f 	nop
   8c68c:	d503201f 	nop
   8c690:	d503201f 	nop
   8c694:	d503201f 	nop
   8c698:	d503201f 	nop
   8c69c:	d503201f 	nop
   8c6a0:	d503201f 	nop
   8c6a4:	d503201f 	nop
   8c6a8:	d503201f 	nop
   8c6ac:	d503201f 	nop
   8c6b0:	d503201f 	nop
   8c6b4:	d503201f 	nop
   8c6b8:	d503201f 	nop
   8c6bc:	d503201f 	nop
   8c6c0:	d503201f 	nop
   8c6c4:	d503201f 	nop
   8c6c8:	d503201f 	nop
   8c6cc:	d503201f 	nop
   8c6d0:	d503201f 	nop
   8c6d4:	d503201f 	nop
   8c6d8:	d503201f 	nop
   8c6dc:	d503201f 	nop
   8c6e0:	d503201f 	nop
   8c6e4:	d503201f 	nop
   8c6e8:	d503201f 	nop
   8c6ec:	d503201f 	nop
   8c6f0:	d503201f 	nop
   8c6f4:	d503201f 	nop
   8c6f8:	d503201f 	nop
   8c6fc:	d503201f 	nop
   8c700:	14000021 	b	8c784 <UnexpectedStub>
   8c704:	d503201f 	nop
   8c708:	d503201f 	nop
   8c70c:	d503201f 	nop
   8c710:	d503201f 	nop
   8c714:	d503201f 	nop
   8c718:	d503201f 	nop
   8c71c:	d503201f 	nop
   8c720:	d503201f 	nop
   8c724:	d503201f 	nop
   8c728:	d503201f 	nop
   8c72c:	d503201f 	nop
   8c730:	d503201f 	nop
   8c734:	d503201f 	nop
   8c738:	d503201f 	nop
   8c73c:	d503201f 	nop
   8c740:	d503201f 	nop
   8c744:	d503201f 	nop
   8c748:	d503201f 	nop
   8c74c:	d503201f 	nop
   8c750:	d503201f 	nop
   8c754:	d503201f 	nop
   8c758:	d503201f 	nop
   8c75c:	d503201f 	nop
   8c760:	d503201f 	nop
   8c764:	d503201f 	nop
   8c768:	d503201f 	nop
   8c76c:	d503201f 	nop
   8c770:	d503201f 	nop
   8c774:	d503201f 	nop
   8c778:	d503201f 	nop
   8c77c:	d503201f 	nop
   8c780:	14000001 	b	8c784 <UnexpectedStub>

000000000008c784 <UnexpectedStub>:
   8c784:	d5385200 	mrs	x0, esr_el1
   8c788:	d5384001 	mrs	x1, spsr_el1
   8c78c:	aa1e03e2 	mov	x2, x30
   8c790:	d5384023 	mrs	x3, elr_el1
   8c794:	d5384104 	mrs	x4, sp_el0
   8c798:	910003e5 	mov	x5, sp
   8c79c:	d5386006 	mrs	x6, far_el1
   8c7a0:	f81f0fe6 	str	x6, [sp, #-16]!
   8c7a4:	a9bf17e4 	stp	x4, x5, [sp, #-16]!
   8c7a8:	a9bf0fe2 	stp	x2, x3, [sp, #-16]!
   8c7ac:	a9bf07e0 	stp	x0, x1, [sp, #-16]!
   8c7b0:	d2800000 	mov	x0, #0x0                   	// #0
   8c7b4:	910003e1 	mov	x1, sp
   8c7b8:	14000172 	b	8cd80 <ExceptionHandler>

000000000008c7bc <SynchronousStub>:
   8c7bc:	d5385200 	mrs	x0, esr_el1
   8c7c0:	d5384001 	mrs	x1, spsr_el1
   8c7c4:	aa1e03e2 	mov	x2, x30
   8c7c8:	d5384023 	mrs	x3, elr_el1
   8c7cc:	d5384104 	mrs	x4, sp_el0
   8c7d0:	910003e5 	mov	x5, sp
   8c7d4:	d5386006 	mrs	x6, far_el1
   8c7d8:	f81f0fe6 	str	x6, [sp, #-16]!
   8c7dc:	a9bf17e4 	stp	x4, x5, [sp, #-16]!
   8c7e0:	a9bf0fe2 	stp	x2, x3, [sp, #-16]!
   8c7e4:	a9bf07e0 	stp	x0, x1, [sp, #-16]!
   8c7e8:	d2800020 	mov	x0, #0x1                   	// #1
   8c7ec:	910003e1 	mov	x1, sp
   8c7f0:	14000164 	b	8cd80 <ExceptionHandler>

000000000008c7f4 <SErrorStub>:
   8c7f4:	d5385200 	mrs	x0, esr_el1
   8c7f8:	d5384001 	mrs	x1, spsr_el1
   8c7fc:	aa1e03e2 	mov	x2, x30
   8c800:	d5384023 	mrs	x3, elr_el1
   8c804:	d5384104 	mrs	x4, sp_el0
   8c808:	910003e5 	mov	x5, sp
   8c80c:	d5386006 	mrs	x6, far_el1
   8c810:	f81f0fe6 	str	x6, [sp, #-16]!
   8c814:	a9bf17e4 	stp	x4, x5, [sp, #-16]!
   8c818:	a9bf0fe2 	stp	x2, x3, [sp, #-16]!
   8c81c:	a9bf07e0 	stp	x0, x1, [sp, #-16]!
   8c820:	d2800040 	mov	x0, #0x2                   	// #2
   8c824:	910003e1 	mov	x1, sp
   8c828:	14000156 	b	8cd80 <ExceptionHandler>

000000000008c82c <IRQStub>:
   8c82c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8c830:	d538403d 	mrs	x29, elr_el1
   8c834:	d538401e 	mrs	x30, spsr_el1
   8c838:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8c83c:	d50341ff 	msr	daifclr, #0x1
   8c840:	a9bf73fb 	stp	x27, x28, [sp, #-16]!
   8c844:	a9bf6bf9 	stp	x25, x26, [sp, #-16]!
   8c848:	a9bf63f7 	stp	x23, x24, [sp, #-16]!
   8c84c:	a9bf5bf5 	stp	x21, x22, [sp, #-16]!
   8c850:	a9bf53f3 	stp	x19, x20, [sp, #-16]!
   8c854:	a9bf4bf1 	stp	x17, x18, [sp, #-16]!
   8c858:	a9bf43ef 	stp	x15, x16, [sp, #-16]!
   8c85c:	a9bf3bed 	stp	x13, x14, [sp, #-16]!
   8c860:	a9bf33eb 	stp	x11, x12, [sp, #-16]!
   8c864:	a9bf2be9 	stp	x9, x10, [sp, #-16]!
   8c868:	a9bf23e7 	stp	x7, x8, [sp, #-16]!
   8c86c:	a9bf1be5 	stp	x5, x6, [sp, #-16]!
   8c870:	a9bf13e3 	stp	x3, x4, [sp, #-16]!
   8c874:	a9bf0be1 	stp	x1, x2, [sp, #-16]!
   8c878:	f81f0fe0 	str	x0, [sp, #-16]!
   8c87c:	97fff84d 	bl	8a9b0 <InterruptHandler>
   8c880:	f84107e0 	ldr	x0, [sp], #16
   8c884:	a8c10be1 	ldp	x1, x2, [sp], #16
   8c888:	a8c113e3 	ldp	x3, x4, [sp], #16
   8c88c:	a8c11be5 	ldp	x5, x6, [sp], #16
   8c890:	a8c123e7 	ldp	x7, x8, [sp], #16
   8c894:	a8c12be9 	ldp	x9, x10, [sp], #16
   8c898:	a8c133eb 	ldp	x11, x12, [sp], #16
   8c89c:	a8c13bed 	ldp	x13, x14, [sp], #16
   8c8a0:	a8c143ef 	ldp	x15, x16, [sp], #16
   8c8a4:	a8c14bf1 	ldp	x17, x18, [sp], #16
   8c8a8:	a8c153f3 	ldp	x19, x20, [sp], #16
   8c8ac:	a8c15bf5 	ldp	x21, x22, [sp], #16
   8c8b0:	a8c163f7 	ldp	x23, x24, [sp], #16
   8c8b4:	a8c16bf9 	ldp	x25, x26, [sp], #16
   8c8b8:	a8c173fb 	ldp	x27, x28, [sp], #16
   8c8bc:	d50341df 	msr	daifset, #0x1
   8c8c0:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8c8c4:	d518403d 	msr	elr_el1, x29
   8c8c8:	d518401e 	msr	spsr_el1, x30
   8c8cc:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8c8d0:	d69f03e0 	eret

000000000008c8d4 <FIQStub>:
   8c8d4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8c8d8:	a9bf73fb 	stp	x27, x28, [sp, #-16]!
   8c8dc:	a9bf6bf9 	stp	x25, x26, [sp, #-16]!
   8c8e0:	a9bf63f7 	stp	x23, x24, [sp, #-16]!
   8c8e4:	a9bf5bf5 	stp	x21, x22, [sp, #-16]!
   8c8e8:	a9bf53f3 	stp	x19, x20, [sp, #-16]!
   8c8ec:	a9bf4bf1 	stp	x17, x18, [sp, #-16]!
   8c8f0:	a9bf43ef 	stp	x15, x16, [sp, #-16]!
   8c8f4:	a9bf3bed 	stp	x13, x14, [sp, #-16]!
   8c8f8:	a9bf33eb 	stp	x11, x12, [sp, #-16]!
   8c8fc:	a9bf2be9 	stp	x9, x10, [sp, #-16]!
   8c900:	a9bf23e7 	stp	x7, x8, [sp, #-16]!
   8c904:	a9bf1be5 	stp	x5, x6, [sp, #-16]!
   8c908:	a9bf13e3 	stp	x3, x4, [sp, #-16]!
   8c90c:	a9bf0be1 	stp	x1, x2, [sp, #-16]!
   8c910:	f81f0fe0 	str	x0, [sp, #-16]!
   8c914:	58000422 	ldr	x2, 8c998 <HVCStub+0x18>
   8c918:	f9400041 	ldr	x1, [x2]
   8c91c:	f100003f 	cmp	x1, #0x0
   8c920:	54000280 	b.eq	8c970 <FIQStub+0x9c>  // b.none
   8c924:	f9400440 	ldr	x0, [x2, #8]
   8c928:	d63f0020 	blr	x1
   8c92c:	f84107e0 	ldr	x0, [sp], #16
   8c930:	a8c10be1 	ldp	x1, x2, [sp], #16
   8c934:	a8c113e3 	ldp	x3, x4, [sp], #16
   8c938:	a8c11be5 	ldp	x5, x6, [sp], #16
   8c93c:	a8c123e7 	ldp	x7, x8, [sp], #16
   8c940:	a8c12be9 	ldp	x9, x10, [sp], #16
   8c944:	a8c133eb 	ldp	x11, x12, [sp], #16
   8c948:	a8c13bed 	ldp	x13, x14, [sp], #16
   8c94c:	a8c143ef 	ldp	x15, x16, [sp], #16
   8c950:	a8c14bf1 	ldp	x17, x18, [sp], #16
   8c954:	a8c153f3 	ldp	x19, x20, [sp], #16
   8c958:	a8c15bf5 	ldp	x21, x22, [sp], #16
   8c95c:	a8c163f7 	ldp	x23, x24, [sp], #16
   8c960:	a8c16bf9 	ldp	x25, x26, [sp], #16
   8c964:	a8c173fb 	ldp	x27, x28, [sp], #16
   8c968:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8c96c:	d69f03e0 	eret
   8c970:	58000181 	ldr	x1, 8c9a0 <HVCStub+0x20>
   8c974:	52800000 	mov	w0, #0x0                   	// #0
   8c978:	b9000020 	str	w0, [x1]
   8c97c:	17ffffec 	b	8c92c <FIQStub+0x58>

000000000008c980 <HVCStub>:
   8c980:	d53c4000 	mrs	x0, spsr_el2
   8c984:	927cec00 	and	x0, x0, #0xfffffffffffffff0
   8c988:	d2800121 	mov	x1, #0x9                   	// #9
   8c98c:	aa010000 	orr	x0, x0, x1
   8c990:	d51c4000 	msr	spsr_el2, x0
   8c994:	d69f03e0 	eret
   8c998:	0008f500 	.word	0x0008f500
   8c99c:	00000000 	.word	0x00000000
   8c9a0:	3f00b20c 	.word	0x3f00b20c
	...

000000000008c9b0 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>:
   8c9b0:	b9000001 	str	w1, [x0]
   8c9b4:	39001002 	strb	w2, [x0, #4]
   8c9b8:	d65f03c0 	ret
   8c9bc:	d503201f 	nop

000000000008c9c0 <CBcmMailBox::~CBcmMailBox()>:
   8c9c0:	d65f03c0 	ret
   8c9c4:	d503201f 	nop
   8c9c8:	d503201f 	nop
   8c9cc:	d503201f 	nop

000000000008c9d0 <CBcmMailBox::Flush()>:
   8c9d0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8c9d4:	910003fd 	mov	x29, sp
   8c9d8:	f9000bf3 	str	x19, [sp, #16]
   8c9dc:	d2971313 	mov	x19, #0xb898                	// #47256
   8c9e0:	f2a7e013 	movk	x19, #0x3f00, lsl #16
   8c9e4:	b9400260 	ldr	w0, [x19]
   8c9e8:	37f00140 	tbnz	w0, #30, 8ca10 <CBcmMailBox::Flush()+0x40>
   8c9ec:	f9000fb4 	str	x20, [x29, #24]
   8c9f0:	d2971014 	mov	x20, #0xb880                	// #47232
   8c9f4:	f2a7e014 	movk	x20, #0x3f00, lsl #16
   8c9f8:	b9400280 	ldr	w0, [x20]
   8c9fc:	52800280 	mov	w0, #0x14                  	// #20
   8ca00:	97ffe774 	bl	867d0 <CTimer::SimpleMsDelay(unsigned int)>
   8ca04:	b9400260 	ldr	w0, [x19]
   8ca08:	36f7ff80 	tbz	w0, #30, 8c9f8 <CBcmMailBox::Flush()+0x28>
   8ca0c:	f9400fb4 	ldr	x20, [x29, #24]
   8ca10:	f9400bf3 	ldr	x19, [sp, #16]
   8ca14:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8ca18:	d65f03c0 	ret
   8ca1c:	d503201f 	nop

000000000008ca20 <CBcmMailBox::Read()>:
   8ca20:	b9400004 	ldr	w4, [x0]
   8ca24:	d2971301 	mov	x1, #0xb898                	// #47256
   8ca28:	f2a7e001 	movk	x1, #0x3f00, lsl #16
   8ca2c:	d2971003 	mov	x3, #0xb880                	// #47232
   8ca30:	f2a7e003 	movk	x3, #0x3f00, lsl #16
   8ca34:	d503201f 	nop
   8ca38:	b9400020 	ldr	w0, [x1]
   8ca3c:	37f7ffe0 	tbnz	w0, #30, 8ca38 <CBcmMailBox::Read()+0x18>
   8ca40:	b9400060 	ldr	w0, [x3]
   8ca44:	12000c02 	and	w2, w0, #0xf
   8ca48:	6b04005f 	cmp	w2, w4
   8ca4c:	54ffff61 	b.ne	8ca38 <CBcmMailBox::Read()+0x18>  // b.any
   8ca50:	121c6c00 	and	w0, w0, #0xfffffff0
   8ca54:	d65f03c0 	ret
   8ca58:	d503201f 	nop
   8ca5c:	d503201f 	nop

000000000008ca60 <CBcmMailBox::Write(unsigned int)>:
   8ca60:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8ca64:	910003fd 	mov	x29, sp
   8ca68:	a90153f3 	stp	x19, x20, [sp, #16]
   8ca6c:	aa0003f4 	mov	x20, x0
   8ca70:	2a0103f3 	mov	w19, w1
   8ca74:	d2971701 	mov	x1, #0xb8b8                	// #47288
   8ca78:	f2a7e001 	movk	x1, #0x3f00, lsl #16
   8ca7c:	d503201f 	nop
   8ca80:	b9400020 	ldr	w0, [x1]
   8ca84:	37ffffe0 	tbnz	w0, #31, 8ca80 <CBcmMailBox::Write(unsigned int)+0x20>
   8ca88:	f2400e7f 	tst	x19, #0xf
   8ca8c:	540000e0 	b.eq	8caa8 <CBcmMailBox::Write(unsigned int)+0x48>  // b.none
   8ca90:	f0000001 	adrp	x1, 8f000 <vtable for CDevice+0x720>
   8ca94:	f0000000 	adrp	x0, 8f000 <vtable for CDevice+0x720>
   8ca98:	52800c42 	mov	w2, #0x62                  	// #98
   8ca9c:	91004021 	add	x1, x1, #0x10
   8caa0:	91008000 	add	x0, x0, #0x20
   8caa4:	97ffeee3 	bl	88630 <assertion_failed>
   8caa8:	b9400281 	ldr	w1, [x20]
   8caac:	d2971400 	mov	x0, #0xb8a0                	// #47264
   8cab0:	f2a7e000 	movk	x0, #0x3f00, lsl #16
   8cab4:	2a010273 	orr	w19, w19, w1
   8cab8:	b9000013 	str	w19, [x0]
   8cabc:	a94153f3 	ldp	x19, x20, [sp, #16]
   8cac0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8cac4:	d65f03c0 	ret
   8cac8:	d503201f 	nop
   8cacc:	d503201f 	nop

000000000008cad0 <CBcmMailBox::WriteRead(unsigned int)>:
   8cad0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   8cad4:	910003fd 	mov	x29, sp
   8cad8:	a90153f3 	stp	x19, x20, [sp, #16]
   8cadc:	aa0003f4 	mov	x20, x0
   8cae0:	39401000 	ldrb	w0, [x0, #4]
   8cae4:	f90017f6 	str	x22, [sp, #40]
   8cae8:	2a0103f6 	mov	w22, w1
   8caec:	35000080 	cbnz	w0, 8cafc <CBcmMailBox::WriteRead(unsigned int)+0x2c>
   8caf0:	f0000000 	adrp	x0, 8f000 <vtable for CDevice+0x720>
   8caf4:	b9463000 	ldr	w0, [x0, #1584]
   8caf8:	350005a0 	cbnz	w0, 8cbac <CBcmMailBox::WriteRead(unsigned int)+0xdc>
   8cafc:	d2971313 	mov	x19, #0xb898                	// #47256
   8cb00:	f2a7e013 	movk	x19, #0x3f00, lsl #16
   8cb04:	b9400260 	ldr	w0, [x19]
   8cb08:	37f00140 	tbnz	w0, #30, 8cb30 <CBcmMailBox::WriteRead(unsigned int)+0x60>
   8cb0c:	f90013b5 	str	x21, [x29, #32]
   8cb10:	d2971015 	mov	x21, #0xb880                	// #47232
   8cb14:	f2a7e015 	movk	x21, #0x3f00, lsl #16
   8cb18:	b94002a0 	ldr	w0, [x21]
   8cb1c:	52800280 	mov	w0, #0x14                  	// #20
   8cb20:	97ffe72c 	bl	867d0 <CTimer::SimpleMsDelay(unsigned int)>
   8cb24:	b9400260 	ldr	w0, [x19]
   8cb28:	36f7ff80 	tbz	w0, #30, 8cb18 <CBcmMailBox::WriteRead(unsigned int)+0x48>
   8cb2c:	f94013b5 	ldr	x21, [x29, #32]
   8cb30:	2a1603e1 	mov	w1, w22
   8cb34:	aa1403e0 	mov	x0, x20
   8cb38:	97ffffca 	bl	8ca60 <CBcmMailBox::Write(unsigned int)>
   8cb3c:	b9400284 	ldr	w4, [x20]
   8cb40:	d2971301 	mov	x1, #0xb898                	// #47256
   8cb44:	f2a7e001 	movk	x1, #0x3f00, lsl #16
   8cb48:	d2971003 	mov	x3, #0xb880                	// #47232
   8cb4c:	f2a7e003 	movk	x3, #0x3f00, lsl #16
   8cb50:	b9400020 	ldr	w0, [x1]
   8cb54:	37f7ffe0 	tbnz	w0, #30, 8cb50 <CBcmMailBox::WriteRead(unsigned int)+0x80>
   8cb58:	b9400060 	ldr	w0, [x3]
   8cb5c:	12000c02 	and	w2, w0, #0xf
   8cb60:	6b04005f 	cmp	w2, w4
   8cb64:	54ffff61 	b.ne	8cb50 <CBcmMailBox::WriteRead(unsigned int)+0x80>  // b.any
   8cb68:	39401281 	ldrb	w1, [x20, #4]
   8cb6c:	121c6c00 	and	w0, w0, #0xfffffff0
   8cb70:	35000081 	cbnz	w1, 8cb80 <CBcmMailBox::WriteRead(unsigned int)+0xb0>
   8cb74:	f0000001 	adrp	x1, 8f000 <vtable for CDevice+0x720>
   8cb78:	b9463021 	ldr	w1, [x1, #1584]
   8cb7c:	350000a1 	cbnz	w1, 8cb90 <CBcmMailBox::WriteRead(unsigned int)+0xc0>
   8cb80:	a94153f3 	ldp	x19, x20, [sp, #16]
   8cb84:	f94017f6 	ldr	x22, [sp, #40]
   8cb88:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8cb8c:	d65f03c0 	ret
   8cb90:	b9003fa0 	str	w0, [x29, #60]
   8cb94:	97ffeaf7 	bl	87770 <LeaveCritical>
   8cb98:	b9403fa0 	ldr	w0, [x29, #60]
   8cb9c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8cba0:	f94017f6 	ldr	x22, [sp, #40]
   8cba4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8cba8:	d65f03c0 	ret
   8cbac:	97ffeab9 	bl	87690 <EnterCritical>
   8cbb0:	17ffffd3 	b	8cafc <CBcmMailBox::WriteRead(unsigned int)+0x2c>
	...

000000000008cbc0 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE>:
   8cbc0:	f0000000 	adrp	x0, 8f000 <vtable for CDevice+0x720>
   8cbc4:	b906301f 	str	wzr, [x0, #1584]
   8cbc8:	d65f03c0 	ret
   8cbcc:	00000000 	.inst	0x00000000 ; undefined

000000000008cbd0 <CExceptionHandler::CExceptionHandler()>:
   8cbd0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8cbd4:	910003fd 	mov	x29, sp
   8cbd8:	a90153f3 	stp	x19, x20, [sp, #16]
   8cbdc:	f0000013 	adrp	x19, 8f000 <vtable for CDevice+0x720>
   8cbe0:	f9431e61 	ldr	x1, [x19, #1592]
   8cbe4:	aa0003f4 	mov	x20, x0
   8cbe8:	b40000e1 	cbz	x1, 8cc04 <CExceptionHandler::CExceptionHandler()+0x34>
   8cbec:	f0000001 	adrp	x1, 8f000 <vtable for CDevice+0x720>
   8cbf0:	b0000000 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   8cbf4:	52800562 	mov	w2, #0x2b                  	// #43
   8cbf8:	91010021 	add	x1, x1, #0x40
   8cbfc:	9113c000 	add	x0, x0, #0x4f0
   8cc00:	97ffee8c 	bl	88630 <assertion_failed>
   8cc04:	f9031e74 	str	x20, [x19, #1592]
   8cc08:	a94153f3 	ldp	x19, x20, [sp, #16]
   8cc0c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8cc10:	d65f03c0 	ret
   8cc14:	d503201f 	nop
   8cc18:	d503201f 	nop
   8cc1c:	d503201f 	nop

000000000008cc20 <CExceptionHandler::~CExceptionHandler()>:
   8cc20:	f0000000 	adrp	x0, 8f000 <vtable for CDevice+0x720>
   8cc24:	f9031c1f 	str	xzr, [x0, #1592]
   8cc28:	d65f03c0 	ret
   8cc2c:	d503201f 	nop

000000000008cc30 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
   8cc30:	d101c3ff 	sub	sp, sp, #0x70
   8cc34:	a9027bfd 	stp	x29, x30, [sp, #32]
   8cc38:	910083fd 	add	x29, sp, #0x20
   8cc3c:	a90353f3 	stp	x19, x20, [sp, #48]
   8cc40:	aa0203f3 	mov	x19, x2
   8cc44:	a9045bf5 	stp	x21, x22, [sp, #64]
   8cc48:	2a0103f6 	mov	w22, w1
   8cc4c:	a90563f7 	stp	x23, x24, [sp, #80]
   8cc50:	f90033f9 	str	x25, [sp, #96]
   8cc54:	b40005a2 	cbz	x2, 8cd08 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xd8>
   8cc58:	f9400660 	ldr	x0, [x19, #8]
   8cc5c:	f9401277 	ldr	x23, [x19, #32]
   8cc60:	92400c00 	and	x0, x0, #0xf
   8cc64:	f100141f 	cmp	x0, #0x5
   8cc68:	54000041 	b.ne	8cc70 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x40>  // b.any
   8cc6c:	f9401677 	ldr	x23, [x19, #40]
   8cc70:	f9400274 	ldr	x20, [x19]
   8cc74:	d2800018 	mov	x24, #0x0                   	// #0
   8cc78:	92406299 	and	x25, x20, #0x1ffffff
   8cc7c:	531a7e94 	lsr	w20, w20, #26
   8cc80:	d1008281 	sub	x1, x20, #0x20
   8cc84:	d100d280 	sub	x0, x20, #0x34
   8cc88:	f100143f 	cmp	x1, #0x5
   8cc8c:	fa418800 	ccmp	x0, #0x1, #0x0, hi  // hi = pmore
   8cc90:	54000048 	b.hi	8cc98 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x68>  // b.pmore
   8cc94:	f9401a78 	ldr	x24, [x19, #48]
   8cc98:	f0000015 	adrp	x21, 8f000 <vtable for CDevice+0x720>
   8cc9c:	9100e2b5 	add	x21, x21, #0x38
   8cca0:	aa1503e1 	mov	x1, x21
   8cca4:	aa1703e0 	mov	x0, x23
   8cca8:	97fff0aa 	bl	88f50 <debug_stacktrace(unsigned long const*, char const*)>
   8ccac:	97fff86d 	bl	8ae60 <CLogger::Get()>
   8ccb0:	f0000001 	adrp	x1, 8f000 <vtable for CDevice+0x720>
   8ccb4:	91144021 	add	x1, x1, #0x510
   8ccb8:	a9408e62 	ldp	x2, x3, [x19, #8]
   8ccbc:	aa1903e7 	mov	x7, x25
   8ccc0:	f9400e65 	ldr	x5, [x19, #24]
   8ccc4:	aa1403e6 	mov	x6, x20
   8ccc8:	f90003f8 	str	x24, [sp]
   8cccc:	f8765824 	ldr	x4, [x1, w22, uxtw #3]
   8ccd0:	aa1503e1 	mov	x1, x21
   8ccd4:	a9008ff7 	stp	x23, x3, [sp, #8]
   8ccd8:	f0000003 	adrp	x3, 8f000 <vtable for CDevice+0x720>
   8ccdc:	9101a063 	add	x3, x3, #0x68
   8cce0:	f9000fe2 	str	x2, [sp, #24]
   8cce4:	52800002 	mov	w2, #0x0                   	// #0
   8cce8:	97fff77e 	bl	8aae0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8ccec:	f94033f9 	ldr	x25, [sp, #96]
   8ccf0:	a9427bfd 	ldp	x29, x30, [sp, #32]
   8ccf4:	a94353f3 	ldp	x19, x20, [sp, #48]
   8ccf8:	a9445bf5 	ldp	x21, x22, [sp, #64]
   8ccfc:	a94563f7 	ldp	x23, x24, [sp, #80]
   8cd00:	9101c3ff 	add	sp, sp, #0x70
   8cd04:	d65f03c0 	ret
   8cd08:	f0000001 	adrp	x1, 8f000 <vtable for CDevice+0x720>
   8cd0c:	f0000000 	adrp	x0, 8f000 <vtable for CDevice+0x720>
   8cd10:	528006c2 	mov	w2, #0x36                  	// #54
   8cd14:	91010021 	add	x1, x1, #0x40
   8cd18:	91016000 	add	x0, x0, #0x58
   8cd1c:	97ffee45 	bl	88630 <assertion_failed>
   8cd20:	17ffffce 	b	8cc58 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
   8cd24:	d503201f 	nop
   8cd28:	d503201f 	nop
   8cd2c:	d503201f 	nop

000000000008cd30 <CExceptionHandler::Get()>:
   8cd30:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8cd34:	910003fd 	mov	x29, sp
   8cd38:	f9000bf3 	str	x19, [sp, #16]
   8cd3c:	f0000013 	adrp	x19, 8f000 <vtable for CDevice+0x720>
   8cd40:	f9431e60 	ldr	x0, [x19, #1592]
   8cd44:	b4000080 	cbz	x0, 8cd54 <CExceptionHandler::Get()+0x24>
   8cd48:	f9400bf3 	ldr	x19, [sp, #16]
   8cd4c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8cd50:	d65f03c0 	ret
   8cd54:	52800a82 	mov	w2, #0x54                  	// #84
   8cd58:	f0000001 	adrp	x1, 8f000 <vtable for CDevice+0x720>
   8cd5c:	b0000000 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   8cd60:	91010021 	add	x1, x1, #0x40
   8cd64:	91196000 	add	x0, x0, #0x658
   8cd68:	97ffee32 	bl	88630 <assertion_failed>
   8cd6c:	f9431e60 	ldr	x0, [x19, #1592]
   8cd70:	f9400bf3 	ldr	x19, [sp, #16]
   8cd74:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8cd78:	d65f03c0 	ret
   8cd7c:	d503201f 	nop

000000000008cd80 <ExceptionHandler>:
   8cd80:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8cd84:	910003fd 	mov	x29, sp
   8cd88:	a90153f3 	stp	x19, x20, [sp, #16]
   8cd8c:	aa0003f4 	mov	x20, x0
   8cd90:	f90013f5 	str	x21, [sp, #32]
   8cd94:	aa0103f5 	mov	x21, x1
   8cd98:	97fff67a 	bl	8a780 <CInterruptSystem::DisableFIQ()>
   8cd9c:	d50341ff 	msr	daifclr, #0x1
   8cda0:	f0000013 	adrp	x19, 8f000 <vtable for CDevice+0x720>
   8cda4:	f9431e60 	ldr	x0, [x19, #1592]
   8cda8:	b40000e0 	cbz	x0, 8cdc4 <ExceptionHandler+0x44>
   8cdac:	aa1503e2 	mov	x2, x21
   8cdb0:	2a1403e1 	mov	w1, w20
   8cdb4:	a94153f3 	ldp	x19, x20, [sp, #16]
   8cdb8:	f94013f5 	ldr	x21, [sp, #32]
   8cdbc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8cdc0:	17ffff9c 	b	8cc30 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
   8cdc4:	52800a82 	mov	w2, #0x54                  	// #84
   8cdc8:	f0000001 	adrp	x1, 8f000 <vtable for CDevice+0x720>
   8cdcc:	b0000000 	adrp	x0, 8d000 <vtable for CGPIOPin+0x158>
   8cdd0:	91010021 	add	x1, x1, #0x40
   8cdd4:	91196000 	add	x0, x0, #0x658
   8cdd8:	97ffee16 	bl	88630 <assertion_failed>
   8cddc:	f9431e60 	ldr	x0, [x19, #1592]
   8cde0:	aa1503e2 	mov	x2, x21
   8cde4:	2a1403e1 	mov	w1, w20
   8cde8:	f94013f5 	ldr	x21, [sp, #32]
   8cdec:	a94153f3 	ldp	x19, x20, [sp, #16]
   8cdf0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8cdf4:	17ffff8f 	b	8cc30 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
